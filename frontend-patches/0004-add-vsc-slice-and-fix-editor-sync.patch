From 09ffedd210bdf9562484a9ab994131b69d8468ee Mon Sep 17 00:00:00 2001
From: heyzec <61238538+heyzec@users.noreply.github.com>
Date: Sun, 10 Nov 2024 11:52:00 +0100
Subject: [PATCH 4/4] add vsc slice and fix editor sync

---
 src/commons/application/Application.tsx       | 44 ++++++++++++++
 src/commons/application/ApplicationTypes.ts   |  9 ++-
 src/commons/application/actions/VscActions.ts | 10 ++++
 .../application/reducers/RootReducer.ts       |  4 +-
 .../application/reducers/VscReducer.ts        | 21 +++++++
 src/commons/application/types/VscTypes.ts     |  3 +
 .../AssessmentWorkspace.tsx                   | 56 +++++++++--------
 src/commons/mocks/StoreMocks.ts               |  4 +-
 src/commons/utils/ActionsHelper.ts            |  4 +-
 src/commons/workspace/Workspace.tsx           | 10 +++-
 src/commons/workspace/WorkspaceActions.ts     |  5 +-
 .../workspace/reducers/editorReducer.ts       |  4 ++
 src/features/vsc/messages.ts                  | 60 +++++++++++++++++++
 src/index.tsx                                 | 14 -----
 14 files changed, 200 insertions(+), 48 deletions(-)
 create mode 100644 src/commons/application/actions/VscActions.ts
 create mode 100644 src/commons/application/reducers/VscReducer.ts
 create mode 100644 src/commons/application/types/VscTypes.ts
 create mode 100644 src/features/vsc/messages.ts

diff --git a/src/commons/application/Application.tsx b/src/commons/application/Application.tsx
index 45562ee8..9abcb61c 100644
--- a/src/commons/application/Application.tsx
+++ b/src/commons/application/Application.tsx
@@ -7,6 +7,9 @@ import Constants from '../utils/Constants';
 import { useLocalStorageState, useSession } from '../utils/Hooks';
 import { defaultWorkspaceSettings, WorkspaceSettingsContext } from '../WorkspaceSettingsContext';
 import SessionActions from './actions/SessionActions';
+import VscActions from './actions/VscActions';
+import Messages, { MessageType, sendToWebview } from 'src/features/vsc/messages';
+import WorkspaceActions from '../workspace/WorkspaceActions';
 
 const Application: React.FC = () => {
   const dispatch = useDispatch();
@@ -70,6 +73,47 @@ const Application: React.FC = () => {
     };
   }, [isPWA, isMobile]);
 
+  // Effect to fetch the latest user info and course configurations from the backend on refresh,
+  // if the user was previously logged in
+  React.useEffect(() => {
+    // Polyfill confirm() to instead show as VSCode notification
+    window.confirm = () => {
+      console.log('You gotta confirm!');
+      return true;
+    };
+
+    const message = Messages.WebviewStarted();
+    sendToWebview(message);
+
+    window.addEventListener('message', event => {
+      const message: MessageType = event.data;
+      // Only accept messages from the vscode webview
+      if (!event.origin.startsWith('vscode-webview://')) {
+        return;
+      }
+      // console.log(`FRONTEND: Message from ${event.origin}: ${JSON.stringify(message)}`);
+      switch (message.type) {
+        case 'WebviewStarted':
+          console.log("Received WebviewStarted message, will set vsc");
+          dispatch(VscActions.setVsc());
+          break;
+        case 'Text':
+          const code = message.code;
+          console.log(`FRONTEND: TextMessage: ${code}`);
+          // TODO: Don't change ace editor directly
+          // const elements = document.getElementsByClassName('react-ace');
+          // if (elements.length === 0) {
+          //   return;
+          // }
+          // // @ts-expect-error: ace is not available at compile time
+          // const editor = ace.edit(elements[0]);
+          // editor.setValue(code);
+          dispatch(WorkspaceActions.updateEditorValue("assessment", 0, code));
+          break;
+      }
+    });
+  }, []);
+
   return (
     <WorkspaceSettingsContext.Provider value={[workspaceSettings, setWorkspaceSettings]}>
       <div className="Application">
diff --git a/src/commons/application/ApplicationTypes.ts b/src/commons/application/ApplicationTypes.ts
index e0a54c99..0a47d7d6 100644
--- a/src/commons/application/ApplicationTypes.ts
+++ b/src/commons/application/ApplicationTypes.ts
@@ -20,6 +20,7 @@ import {
 import { RouterState } from './types/CommonsTypes';
 import { ExternalLibraryName } from './types/ExternalTypes';
 import { SessionState } from './types/SessionTypes';
+import { VscState } from './types/VscTypes';
 
 export type OverallState = {
   readonly router: RouterState;
@@ -31,6 +32,7 @@ export type OverallState = {
   readonly dashboard: DashboardState;
   readonly fileSystem: FileSystemState;
   readonly sideContent: SideContentManagerState;
+  readonly vsc: VscState;
 };
 
 export type Story = {
@@ -600,6 +602,10 @@ export const defaultSideContentManager: SideContentManagerState = {
   stories: {}
 };
 
+export const defaultVsc: VscState = {
+  isVsc: false,
+}
+
 export const defaultState: OverallState = {
   router: defaultRouter,
   achievement: defaultAchievement,
@@ -609,5 +615,6 @@ export const defaultState: OverallState = {
   stories: defaultStories,
   workspaces: defaultWorkspaceManager,
   fileSystem: defaultFileSystem,
-  sideContent: defaultSideContentManager
+  sideContent: defaultSideContentManager,
+  vsc: defaultVsc
 };
diff --git a/src/commons/application/actions/VscActions.ts b/src/commons/application/actions/VscActions.ts
new file mode 100644
index 00000000..53241263
--- /dev/null
+++ b/src/commons/application/actions/VscActions.ts
@@ -0,0 +1,10 @@
+import { createActions } from 'src/commons/redux/utils';
+
+const VscActions = createActions('vsc', {
+  setVsc: () => ({})
+});
+
+// For compatibility with existing code (actions helper)
+export default {
+  ...VscActions
+};
diff --git a/src/commons/application/reducers/RootReducer.ts b/src/commons/application/reducers/RootReducer.ts
index 68122aaf..f685bc51 100644
--- a/src/commons/application/reducers/RootReducer.ts
+++ b/src/commons/application/reducers/RootReducer.ts
@@ -11,6 +11,7 @@ import { WorkspaceReducer as workspaces } from '../../workspace/WorkspaceReducer
 import { OverallState } from '../ApplicationTypes';
 import { RouterReducer as router } from './CommonsReducer';
 import { SessionsReducer as session } from './SessionsReducer';
+import { VscReducer as vsc } from './VscReducer';
 
 const rootReducer: Reducer<OverallState, SourceActionType> = combineReducers({
   router,
@@ -21,7 +22,8 @@ const rootReducer: Reducer<OverallState, SourceActionType> = combineReducers({
   stories,
   workspaces,
   fileSystem,
-  sideContent
+  sideContent,
+  vsc
 });
 
 export default rootReducer;
diff --git a/src/commons/application/reducers/VscReducer.ts b/src/commons/application/reducers/VscReducer.ts
new file mode 100644
index 00000000..6cfdb358
--- /dev/null
+++ b/src/commons/application/reducers/VscReducer.ts
@@ -0,0 +1,21 @@
+import { createReducer, Reducer } from '@reduxjs/toolkit';
+
+import { SourceActionType } from '../../utils/ActionsHelper';
+import { defaultVsc } from '../ApplicationTypes';
+import { VscState } from '../types/VscTypes';
+import VscActions from '../actions/VscActions';
+
+export const VscReducer: Reducer<VscState, SourceActionType> = (
+  state = defaultVsc,
+  action
+) => {
+  state = newVscReducer(state, action);
+  return state;
+};
+
+const newVscReducer = createReducer(defaultVsc, builder => {
+  builder
+    .addCase(VscActions.setVsc, (state) => {
+      return { ...state, ...{isVsc: true} };
+    });
+});
diff --git a/src/commons/application/types/VscTypes.ts b/src/commons/application/types/VscTypes.ts
new file mode 100644
index 00000000..6d8f60e2
--- /dev/null
+++ b/src/commons/application/types/VscTypes.ts
@@ -0,0 +1,3 @@
+export type VscState = {
+  isVsc: boolean;
+};
diff --git a/src/commons/assessmentWorkspace/AssessmentWorkspace.tsx b/src/commons/assessmentWorkspace/AssessmentWorkspace.tsx
index bb5b9b79..09e96354 100644
--- a/src/commons/assessmentWorkspace/AssessmentWorkspace.tsx
+++ b/src/commons/assessmentWorkspace/AssessmentWorkspace.tsx
@@ -76,6 +76,7 @@ import Workspace, { WorkspaceProps } from '../workspace/Workspace';
 import WorkspaceActions from '../workspace/WorkspaceActions';
 import { WorkspaceLocation, WorkspaceState } from '../workspace/WorkspaceTypes';
 import AssessmentWorkspaceGradingResult from './AssessmentWorkspaceGradingResult';
+import Messages, { sendToWebview } from 'src/features/vsc/messages';
 
 export type AssessmentWorkspaceProps = {
   assessmentId: number;
@@ -184,11 +185,11 @@ const AssessmentWorkspace: React.FC<AssessmentWorkspaceProps> = props => {
     };
   }, [dispatch]);
 
-  useEffect(() => {
-    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.
-    handleEditorValueChange(0, '');
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, []);
+  // useEffect(() => {
+  //   // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.
+  //   handleEditorValueChange(0, '');
+  //   // eslint-disable-next-line react-hooks/exhaustive-deps
+  // }, []);
 
   useEffect(() => {
     handleTeamOverviewFetch(props.assessmentId);
@@ -219,27 +220,27 @@ const AssessmentWorkspace: React.FC<AssessmentWorkspaceProps> = props => {
     if (!assessment) {
       return;
     }
-    // ------------- PLEASE NOTE, EVERYTHING BELOW THIS SEEMS TO BE UNUSED -------------
-    // checkWorkspaceReset does exactly the same thing.
-    let questionId = props.questionId;
-    if (props.questionId >= assessment.questions.length) {
-      questionId = assessment.questions.length - 1;
-    }
-
-    const question = assessment.questions[questionId];
-
-    let answer = '';
-    if (question.type === QuestionTypes.programming) {
-      if (question.answer) {
-        answer = (question as IProgrammingQuestion).answer as string;
-      } else {
-        answer = (question as IProgrammingQuestion).solutionTemplate;
-      }
-    }
-
-    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.
-    handleEditorValueChange(0, answer);
-    // eslint-disable-next-line react-hooks/exhaustive-deps
+    // // ------------- PLEASE NOTE, EVERYTHING BELOW THIS SEEMS TO BE UNUSED -------------
+    // // checkWorkspaceReset does exactly the same thing.
+    // let questionId = props.questionId;
+    // if (props.questionId >= assessment.questions.length) {
+    //   questionId = assessment.questions.length - 1;
+    // }
+
+    // const question = assessment.questions[questionId];
+
+    // let answer = '';
+    // if (question.type === QuestionTypes.programming) {
+    //   if (question.answer) {
+    //     answer = (question as IProgrammingQuestion).answer as string;
+    //   } else {
+    //     answer = (question as IProgrammingQuestion).solutionTemplate;
+    //   }
+    // }
+
+    // // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.
+    // handleEditorValueChange(0, answer);
+    // // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
 
   /**
@@ -414,9 +415,12 @@ const AssessmentWorkspace: React.FC<AssessmentWorkspaceProps> = props => {
     );
     handleClearContext(question.library, true);
     handleUpdateHasUnsavedChanges(false);
+    sendToWebview(Messages.NewEditor(`assessment${assessment.id}`, props.questionId, ''));
     if (options.editorValue) {
       // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.
       handleEditorValueChange(0, options.editorValue);
+    } else {
+      handleEditorValueChange(0, '');
     }
   };
 
diff --git a/src/commons/mocks/StoreMocks.ts b/src/commons/mocks/StoreMocks.ts
index f77c7e88..ae321267 100644
--- a/src/commons/mocks/StoreMocks.ts
+++ b/src/commons/mocks/StoreMocks.ts
@@ -11,6 +11,7 @@ import {
   defaultSession,
   defaultSideContentManager,
   defaultStories,
+  defaultVsc,
   defaultWorkspaceManager,
   OverallState
 } from '../application/ApplicationTypes';
@@ -30,7 +31,8 @@ export function mockInitialStore(
     session: defaultSession,
     stories: defaultStories,
     fileSystem: defaultFileSystem,
-    sideContent: defaultSideContentManager
+    sideContent: defaultSideContentManager,
+    vsc: defaultVsc
   };
 
   const lodashMergeCustomizer = (objValue: any, srcValue: any) => {
diff --git a/src/commons/utils/ActionsHelper.ts b/src/commons/utils/ActionsHelper.ts
index b6fcbb1e..27243d78 100644
--- a/src/commons/utils/ActionsHelper.ts
+++ b/src/commons/utils/ActionsHelper.ts
@@ -17,6 +17,7 @@ import SourcecastActions from '../../features/sourceRecorder/sourcecast/Sourceca
 import SourceRecorderActions from '../../features/sourceRecorder/SourceRecorderActions';
 import SourcereelActions from '../../features/sourceRecorder/sourcereel/SourcereelActions';
 import StoriesActions from '../../features/stories/StoriesActions';
+import VscActions from '../application/actions/VscActions';
 import { ActionType } from './TypeHelper';
 
 export const actions = {
@@ -38,7 +39,8 @@ export const actions = {
   ...RemoteExecutionActions,
   ...FileSystemActions,
   ...StoriesActions,
-  ...SideContentActions
+  ...SideContentActions,
+  ...VscActions
 };
 
 export type SourceActionType = ActionType<typeof actions>;
diff --git a/src/commons/workspace/Workspace.tsx b/src/commons/workspace/Workspace.tsx
index d3df27b6..6e84632c 100644
--- a/src/commons/workspace/Workspace.tsx
+++ b/src/commons/workspace/Workspace.tsx
@@ -12,7 +12,7 @@ import { Prompt } from '../ReactRouterPrompt';
 import Repl, { ReplProps } from '../repl/Repl';
 import SideBar, { SideBarTab } from '../sideBar/SideBar';
 import SideContent, { SideContentProps } from '../sideContent/SideContent';
-import { useDimensions } from '../utils/Hooks';
+import { useDimensions, useTypedSelector } from '../utils/Hooks';
 
 export type WorkspaceProps = DispatchProps & StateProps;
 
@@ -44,6 +44,7 @@ const Workspace: React.FC<WorkspaceProps> = props => {
   const [contentContainerWidth] = useDimensions(contentContainerDiv);
   const [expandedSideBarWidth, setExpandedSideBarWidth] = useState(200);
   const [isSideBarExpanded, setIsSideBarExpanded] = useState(true);
+  const isVsc = useTypedSelector(state => state.vsc.isVsc);
 
   const sideBarCollapsedWidth = 40;
 
@@ -96,7 +97,7 @@ const Workspace: React.FC<WorkspaceProps> = props => {
       minWidth: 0,
       onResize: toggleEditorDividerDisplay,
       ref: leftParentResizable,
-      defaultSize: { width: '0%', height: '100%' },
+      defaultSize: { width: '50%', height: '100%' },
       as: undefined as any // re-resizable bug - wrong typedef
     } as ResizableProps;
   };
@@ -222,7 +223,12 @@ const Workspace: React.FC<WorkspaceProps> = props => {
         </Resizable>
         <div className="row content-parent" ref={contentContainerDiv}>
           <div className="editor-divider" ref={editorDividerDiv} />
+          {isVsc ? (
+            <div style={{ width: '0px' }}>{createWorkspaceInput(props)}</div>
+          ) : (
           <Resizable {...editorResizableProps()}>{createWorkspaceInput(props)}</Resizable>
+          )}
+          <div style={{ width: '0px' }}>{createWorkspaceInput(props)}</div>
           <div className="right-parent" ref={setFullscreenRefs}>
             <Tooltip
               className="fullscreen-button"
diff --git a/src/commons/workspace/WorkspaceActions.ts b/src/commons/workspace/WorkspaceActions.ts
index a59fd7b2..15c3a789 100644
--- a/src/commons/workspace/WorkspaceActions.ts
+++ b/src/commons/workspace/WorkspaceActions.ts
@@ -113,8 +113,9 @@ const newActions = createActions('workspace', {
   updateEditorValue: (
     workspaceLocation: WorkspaceLocation,
     editorTabIndex: number,
-    newEditorValue: string
-  ) => ({ workspaceLocation, editorTabIndex, newEditorValue }),
+    newEditorValue: string,
+    isFromVsc: boolean = false
+  ) => ({ workspaceLocation, editorTabIndex, newEditorValue, isFromVsc }),
   setEditorBreakpoint: (
     workspaceLocation: WorkspaceLocation,
     editorTabIndex: number,
diff --git a/src/commons/workspace/reducers/editorReducer.ts b/src/commons/workspace/reducers/editorReducer.ts
index dc314a2c..fa89353b 100644
--- a/src/commons/workspace/reducers/editorReducer.ts
+++ b/src/commons/workspace/reducers/editorReducer.ts
@@ -3,6 +3,7 @@ import { ActionReducerMapBuilder } from '@reduxjs/toolkit';
 import WorkspaceActions from '../WorkspaceActions';
 import { getWorkspaceLocation } from '../WorkspaceReducer';
 import { EditorTabState, WorkspaceManagerState } from '../WorkspaceTypes';
+import Messages, { sendToWebview } from 'src/features/vsc/messages';
 
 export const handleEditorActions = (builder: ActionReducerMapBuilder<WorkspaceManagerState>) => {
   builder
@@ -52,6 +53,9 @@ export const handleEditorActions = (builder: ActionReducerMapBuilder<WorkspaceMa
       }
 
       state[workspaceLocation].editorTabs[editorTabIndex].value = newEditorValue;
+      if (!action.payload.isFromVsc) {
+        sendToWebview(Messages.Text(newEditorValue));
+      }
     })
     .addCase(WorkspaceActions.setEditorBreakpoint, (state, action) => {
       const workspaceLocation = getWorkspaceLocation(action);
diff --git a/src/features/vsc/messages.ts b/src/features/vsc/messages.ts
new file mode 100644
index 00000000..19375428
--- /dev/null
+++ b/src/features/vsc/messages.ts
@@ -0,0 +1,60 @@
+// This file also needs to be copied to source-academy/frontend
+type BaseMessage<T extends string, P extends object> = {
+  type: T;
+} & P;
+
+function createMessages<T extends Record<string, (...args: any[]) => object>>(
+  creators: T,
+): {
+  [K in Extract<keyof T, string>]: (
+    ...args: Parameters<T[K]>
+  ) => BaseMessage<K, ReturnType<T[K]>>;
+} {
+  return Object.fromEntries(
+    Object.entries(creators).map(([key, creator]) => [
+      key,
+      (...args: any[]) => ({
+        type: key,
+        ...creator(...args),
+      }),
+    ]),
+  ) as any;
+}
+
+const Messages = createMessages({
+  WebviewStarted: () => ({}),
+  IsVsc: () => ({}),
+  NewEditor: (assessmentName: string, questionId: number, code: string) => ({
+    assessmentName,
+    questionId,
+    code,
+  }),
+  Text: (code: string) => ({ code }),
+});
+
+export default Messages;
+
+// Define MessageTypes to map each key in Messages to its specific message type
+export type MessageTypes = {
+  [K in keyof typeof Messages]: ReturnType<(typeof Messages)[K]>;
+};
+
+// Define MessageType as a union of all message types
+export type MessageType = MessageTypes[keyof MessageTypes];
+
+export const FRONTEND_ELEMENT_ID = "frontend";
+
+export function sendToWebview(message: MessageType) {
+  window.parent.postMessage(message, "*");
+}
+export function sendToFrontend(document: Document, message: MessageType) {
+  const iframe: HTMLIFrameElement = document.getElementById(
+    FRONTEND_ELEMENT_ID,
+  ) as HTMLIFrameElement;
+  const contentWindow = iframe.contentWindow;
+  if (!contentWindow) {
+    return;
+  }
+  // TODO: Don't hardcode this!
+  contentWindow.postMessage(message, "http://localhost:8000");
+}
diff --git a/src/index.tsx b/src/index.tsx
index e19927eb..bb990d08 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -15,20 +15,6 @@ import { store } from 'src/pages/createStore';
 import ApplicationWrapper from './commons/application/ApplicationWrapper';
 import { createInBrowserFileSystem } from './pages/fileSystem/createInBrowserFileSystem';
 
-window.addEventListener('message', (event) => {
-  // Only accept messages from the vscode webview
-  if (!event.origin.startsWith('vscode-webview://')) {
-    return;
-  }
-  const elements = document.getElementsByClassName('react-ace');
-  if (elements.length === 0) {
-    return;
-  }
-  // @ts-expect-error: ace is not available at compile time
-  const editor = ace.edit(elements[0]);
-  editor.setValue(event.data);
-});
-
 if (Constants.sentryDsn) {
   Sentry.init({
     dsn: Constants.sentryDsn,
-- 
2.47.0

