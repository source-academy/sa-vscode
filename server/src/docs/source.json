[[{"label": "Infinity", "title": "Infinity:number", "description": "#### Infinity:number\n\nThe name `Infinity` refers to the special number value `Infinity`.\nSee [ECMAScript Specification, Section 4.3.23](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-infinity)", "meta": "const"}, {"label": "math_E", "title": "math_E:number", "description": "#### math\\_E:number\n\nThe Number value for e, Euler's number,\nwhich is approximately 2.718281828459045.", "meta": "const"}, {"label": "math_LN2", "title": "math_LN2:number", "description": "#### math\\_LN2:number\n\nThe Number value for the natural logarithm of 2,\nwhich is approximately 0.6931471805599453.", "meta": "const"}, {"label": "math_LN10", "title": "math_LN10:number", "description": "#### math\\_LN10:number\n\nThe Number value for the natural logarithm of 10,\nwhich is approximately 2.302585092994046.", "meta": "const"}, {"label": "math_LOG2E", "title": "math_LOG2E:number", "description": "#### math\\_LOG2E:number\n\nThe Number value for the base-2 logarithm of e\u211d, the base of the natural logarithms;\nthis value is approximately 1.4426950408889634.\n\nNOTE:\nThe value of math\\_LOG2E is approximately the reciprocal of the value of math\\_LN2.\n", "meta": "const"}, {"label": "math_LOG10E", "title": "math_LOG10E:number", "description": "#### math\\_LOG10E:number\n\nThe Number value for the base-10 logarithm of e,\nthe base of the natural logarithms; this value is approximately 0.4342944819032518.\n\nNOTE:\nThe value of math\\_LOG10E is approximately the reciprocal of the value of math\\_LN10.\n", "meta": "const"}, {"label": "math_PI", "title": "math_PI:number", "description": "#### math\\_PI:number\n\nThe Number value for \u03c0, the ratio of the circumference of a circle to its diameter,\nwhich is approximately 3.1415926535897932.", "meta": "const"}, {"label": "math_SQRT1_2", "title": "math_SQRT1_2:number", "description": "#### math\\_SQRT1\\_2:number\n\nThe Number value for the square root of 0.5, which is approximately 0.7071067811865476.\n\nNOTE:\nThe value of math\\_SQRT1\\_2 is approximately the reciprocal of the value of math\\_SQRT2.\n", "meta": "const"}, {"label": "math_SQRT2", "title": "math_SQRT2:number", "description": "#### math\\_SQRT2:number\n\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.", "meta": "const"}, {"label": "NaN", "title": "NaN:number", "description": "#### NaN:number\n\nThe name `NaN` refers to the special number value `NaN` (\"not a number\"). Note that\n`NaN` is a number, as specified by `is_number`.\nSee [ECMAScript Specification, Section 4.3.24](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-nan)", "meta": "const"}, {"label": "undefined", "title": "undefined:undefined", "description": "#### undefined:undefined\n\nThe name `undefined` refers to the special value `undefined`.\nSee also [textbook explanation in section 4.1.1](https://sourceacademy.org/sicpjs/4.1.1#h5).", "meta": "const"}, {"label": "arity", "title": "arity(f) \u2192 {number}", "description": "#### arity(f) \u2192 {number}\n\nReturns the number of parameters the given function `f` expects,\nexcluding the rest parameter.", "meta": "func", "parameters": ["f"]}, {"label": "char_at", "title": "char_at(s, i) \u2192 {string}", "description": "#### char\\_at(s, i) \u2192 {string}\n\nTakes a string `s` as first argument and a nonnegative integer\n`i` as second argument. If `i` is less than the length\nof `s`, this function returns a one-character string that contains\nthe character of `s` at position `i`, counting from 0.\nIf `i` is larger than or equal to the length of\n`s`, this function returns `undefined`.", "meta": "func", "parameters": ["s", "i"]}, {"label": "display", "title": "display(v, s) \u2192 {value}", "description": "#### display(v, s) \u2192 {value}\n\nOptional second argument. If present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console.\nIf second argument not present,\njust displays the value `v` in the console.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "error", "title": "error(v, s)", "description": "#### error(v, s)\n\nOptional second argument.\nIf present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console with error flag.\nIf second argument not present,\njust displays the value `v` in the console with error flag.\nThe evaluation\nof any call of `error` aborts the running program immediately.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "get_time", "title": "get_time() \u2192 {number}", "description": "#### get\\_time() \u2192 {number}\n\nReturns number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\nSee also [textbook example](https://sourceacademy.org/sicpjs/1.2.6#ex-1.21).", "meta": "func", "parameters": []}, {"label": "is_boolean", "title": "is_boolean(v) \u2192 {boolean}", "description": "#### is\\_boolean(v) \u2192 {boolean}\n\nchecks whether a given value is a boolean", "meta": "func", "parameters": ["v"]}, {"label": "is_function", "title": "is_function(v) \u2192 {boolean}", "description": "#### is\\_function(v) \u2192 {boolean}\n\nchecks whether a given value is a function", "meta": "func", "parameters": ["v"]}, {"label": "is_number", "title": "is_number(v) \u2192 {boolean}", "description": "#### is\\_number(v) \u2192 {boolean}\n\nchecks whether a given value is a number.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_string", "title": "is_string(v) \u2192 {boolean}", "description": "#### is\\_string(v) \u2192 {boolean}\n\nchecks whether a given value is a string.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_undefined", "title": "is_undefined(v) \u2192 {boolean}", "description": "#### is\\_undefined(v) \u2192 {boolean}\n\nchecks whether a given value is the special value `undefined`", "meta": "func", "parameters": ["v"]}, {"label": "math_abs", "title": "math_abs(x) \u2192 {number}", "description": "#### math\\_abs(x) \u2192 {number}\n\ncomputes the absolute value of x; the result has the same magnitude as `x` but has positive sign.", "meta": "func", "parameters": ["x"]}, {"label": "math_acos", "title": "math_acos(x) \u2192 {number}", "description": "#### math\\_acos(x) \u2192 {number}\n\ncomputes the arc cosine of `x`.\nThe result is expressed in radians and ranges from +0 to +\u03c0.", "meta": "func", "parameters": ["x"]}, {"label": "math_acosh", "title": "math_acosh(x) \u2192 {number}", "description": "#### math\\_acosh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic cosine of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_asin", "title": "math_asin(x) \u2192 {number}", "description": "#### math\\_asin(x) \u2192 {number}\n\ncomputes the arc sine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_asinh", "title": "math_asinh(x) \u2192 {number}", "description": "#### math\\_asinh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic\nsine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan", "title": "math_atan(x) \u2192 {number}", "description": "#### math\\_atan(x) \u2192 {number}\n\ncomputes the arc tangent of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan2", "title": "math_atan2(y, x) \u2192 {number}", "description": "#### math\\_atan2(y, x) \u2192 {number}\n\ncomputes the arc tangent of the quotient `y` / `x` of the arguments `y` and `x`, where the signs of `y` and `x` are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named `y` be first and the argument named `x` be second. The result is expressed in radians and ranges from -\u03c0 to +\u03c0.", "meta": "func", "parameters": ["y", "x"]}, {"label": "math_atanh", "title": "math_atanh(x) \u2192 {number}", "description": "#### math\\_atanh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic tangent of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_cbrt", "title": "math_cbrt(x) \u2192 {number}", "description": "#### math\\_cbrt(x) \u2192 {number}\n\ncomputes the cube root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_ceil", "title": "math_ceil(x) \u2192 {number}", "description": "#### math\\_ceil(x) \u2192 {number}\n\ncomputes the smallest (closest to -\u221e) Number value that is not less than `x` and is an integer. If `x` is already an integer, the result is `x`.\nThe value of math\\_ceil(x) is the same as the value of -math\\_floor(-x).", "meta": "func", "parameters": ["x"]}, {"label": "math_clz32", "title": "math_clz32(n) \u2192 {number}", "description": "#### math\\_clz32(n) \u2192 {number}\n\nWhen math\\_clz32 is called with one argument `x`, the following steps are taken:\nLet n be ToUint32(x).\nLet p be the number of leading zero bits in the 32-bit binary representation of n.\nReturn p.\n\nNOTE:\n  \nIf n is 0, p will be 32. If the most significant bit of the 32-bit binary encoding of n is 1,\np will be 0.\n", "meta": "func", "parameters": ["n"]}, {"label": "math_cos", "title": "math_cos(x) \u2192 {number}", "description": "#### math\\_cos(x) \u2192 {number}\n\nComputes the cosine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_cosh", "title": "math_cosh(x) \u2192 {number}", "description": "#### math\\_cosh(x) \u2192 {number}\n\ncomputes the hyperbolic cosine of `x`.\n\nNOTE:\nThe value of cosh(x) is the same as (exp(x) + exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_exp", "title": "math_exp(x) \u2192 {number}", "description": "#### math\\_exp(x) \u2192 {number}\n\ncomputes the exponential function of `x`\n(e raised to the power of `x`, where e is the base of the natural logarithms).", "meta": "func", "parameters": ["x"]}, {"label": "math_expm1", "title": "math_expm1(x) \u2192 {number}", "description": "#### math\\_expm1(x) \u2192 {number}\n\ncomputes subtracting 1 from the\nexponential function of `x` (e raised to the power of `x`, where e is the base of\nthe natural logarithms). The result is computed in a way that is accurate even\nwhen the value of `x` is close to 0.", "meta": "func", "parameters": ["x"]}, {"label": "math_floor", "title": "math_floor(x) \u2192 {number}", "description": "#### math\\_floor(x) \u2192 {number}\n\ncomputes the greatest (closest to +\u221e) Number value that is not greater than `x`\nand is an integer.\n  \nIf `x` is already an integer, the result is `x`.\n\nNOTE:\nThe value of math\\_floor(x) is the same as the value of -math\\_ceil(-x).\n", "meta": "func", "parameters": ["x"]}, {"label": "math_fround", "title": "math_fround(x) \u2192 {number}", "description": "#### math\\_fround(x) \u2192 {number}\n\nWhen math\\_fround is called with argument `x`, the following steps are taken:\n\n1. If `x` is NaN, return NaN.\n2. If `x` is one of +0, -0, +\u221e, -\u221e, return `x`.\n3. Let x32 be the result of converting `x` to a value in IEEE 754-2008 binary32 format using roundTiesToEven mode.\n4. Let x64 be the result of converting x32 to a value in IEEE 754-2008 binary64 format.\n5. Return the ECMAScript Number value corresponding to x64.", "meta": "func", "parameters": ["x"]}, {"label": "math_hypot", "title": "math_hypot() \u2192 {number}", "description": "#### math\\_hypot() \u2192 {number}\n\ncomputes the square root\nof the sum of squares of its arguments.\n  \nIf no arguments are passed, the result is +0.", "meta": "func", "parameters": []}, {"label": "math_imul", "title": "math_imul(x, x) \u2192 {number}", "description": "#### math\\_imul(x, x) \u2192 {number}\n\nWhen math\\_imul is called with arguments `x` and `y`,\nthe following steps are taken:\n\n1. Let a be ToUint32(x).\n2. Let b be ToUint32(y).\n3. Let product be (a \u00d7 b) modulo 232.\n4. If product \u2265 231, return product - 232; otherwise return product.", "meta": "func", "parameters": ["x", "x"]}, {"label": "math_log", "title": "math_log(x) \u2192 {number}", "description": "#### math\\_log(x) \u2192 {number}\n\nComputes the natural logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log1p", "title": "math_log1p(x) \u2192 {number}", "description": "#### math\\_log1p(x) \u2192 {number}\n\ncomputes the natural logarithm of 1 + `x`. The result is computed in a way that is accurate even when the value of `x` is close to zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_log2", "title": "math_log2(x) \u2192 {number}", "description": "#### math\\_log2(x) \u2192 {number}\n\ncomputes the base 2 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log10", "title": "math_log10(x) \u2192 {number}", "description": "#### math\\_log10(x) \u2192 {number}\n\ncomputes the base 10 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_max", "title": "math_max() \u2192 {number}", "description": "#### math\\_max() \u2192 {number}\n\nGiven zero or more numbers, returns the largest of them.\n  \nIf no arguments are given, the result is -\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the largest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_min", "title": "math_min() \u2192 {number}", "description": "#### math\\_min() \u2192 {number}\n\nGiven zero or more arguments, returns the smallest of them.\n  \nIf no arguments are given, the result is +\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the smallest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_pow", "title": "math_pow(base, exponent) \u2192 {number}", "description": "#### math\\_pow(base, exponent) \u2192 {number}\n\nComputes the result of raising base to\nthe power of exponent.", "meta": "func", "parameters": ["base", "exponent"]}, {"label": "math_random", "title": "math_random() \u2192 {number}", "description": "#### math\\_random() \u2192 {number}\n\nReturns a number value with positive sign, greater than or equal to 0 but less than 1,\nchosen randomly or pseudo randomly with approximately uniform distribution over that\nrange, using an implementation-dependent algorithm or strategy. This function takes no arguments.\nEach math\\_random function created for distinct realms must produce a distinct sequence\nof values from successive calls.", "meta": "func", "parameters": []}, {"label": "math_round", "title": "math_round(x) \u2192 {number}", "description": "#### math\\_round(x) \u2192 {number}\n\nReturns the number value that is closest to `x` and is an integer.\n  \nIf two integers are equally close to `x`, then the result is the Number value\nthat is closer to +\u221e. If `x` is already an integer, the result is `x`.\nNOTE 1:\nmath\\_round(3.5) returns 4, but math\\_round(-3.5) returns -3.", "meta": "func", "parameters": ["x"]}, {"label": "math_sign", "title": "math_sign(x) \u2192 {number}", "description": "#### math\\_sign(x) \u2192 {number}\n\nComputes the sign of `x`, indicating whether `x` is positive, negative, or zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_sin", "title": "math_sin(x) \u2192 {number}", "description": "#### math\\_sin(x) \u2192 {number}\n\nComputes the sine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_sinh", "title": "math_sinh(x) \u2192 {number}", "description": "#### math\\_sinh(x) \u2192 {number}\n\nComputes the hyperbolic sine of `x`.\n\nNOTE:\nThe value of sinh(x) is the same as (exp(x) - exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_sqrt", "title": "math_sqrt(x) \u2192 {number}", "description": "#### math\\_sqrt(x) \u2192 {number}\n\nComputes the square root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_tan", "title": "math_tan(x) \u2192 {number}", "description": "#### math\\_tan(x) \u2192 {number}\n\nComputes the tangent of `x`. The argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_tanh", "title": "math_tanh(x) \u2192 {number}", "description": "#### math\\_tanh(x) \u2192 {number}\n\nComputes the hyperbolic tangent of `x`.\n\nNOTE:\nThe value of `math_tanh(x)` is the same as\n`(exp(x) - exp(-x))/(exp(x) + exp(-x))`.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_trunc", "title": "math_trunc(x) \u2192 {number}", "description": "#### math\\_trunc(x) \u2192 {number}\n\nComputes the integral part of the number `x`,\nremoving any fractional digits.", "meta": "func", "parameters": ["x"]}, {"label": "parse_int", "title": "parse_int(s, i) \u2192 {number}", "description": "#### parse\\_int(s, i) \u2192 {number}\n\nInterprets a given string `s` as an integer,\nusing the positive integer `i` as radix,\nand returns the respective value.\n  \nExamples: `parse_int(\"909\", 10)` returns the number\n`909`, and `parse_int(\"-1111\", 2)` returns the number\n`-15`.  \n\nSee [ECMAScript Specification, Section 18.2.5](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-parseint-string-radix) for details.", "meta": "func", "parameters": ["s", "i"]}, {"label": "prompt", "title": "prompt(s) \u2192 {string}", "description": "#### prompt(s) \u2192 {string}\n\nPops up a window that displays the string `s`, provides\nan input line for the user to enter a text, a `Cancel` button and an `OK` button.\nThe call of `prompt`\nsuspends execution of the program until one of the two buttons is pressed. If\nthe `OK` button is pressed, `prompt` returns the entered text as a string.\nIf the `Cancel` button is pressed, `prompt` returns a non-string value.", "meta": "func", "parameters": ["s"]}, {"label": "stringify", "title": "stringify(v) \u2192 {string}", "description": "#### stringify(v) \u2192 {string}\n\nreturns a string that represents the value `v`, using a\nnotation that is is consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.\nSee also [textbook example](https://sourceacademy.org/sicpjs/3.3.5).", "meta": "func", "parameters": ["v"]}], [{"label": "Infinity", "title": "Infinity:number", "description": "#### Infinity:number\n\nThe name `Infinity` refers to the special number value `Infinity`.\nSee [ECMAScript Specification, Section 4.3.23](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-infinity)", "meta": "const"}, {"label": "math_E", "title": "math_E:number", "description": "#### math\\_E:number\n\nThe Number value for e, Euler's number,\nwhich is approximately 2.718281828459045.", "meta": "const"}, {"label": "math_LN2", "title": "math_LN2:number", "description": "#### math\\_LN2:number\n\nThe Number value for the natural logarithm of 2,\nwhich is approximately 0.6931471805599453.", "meta": "const"}, {"label": "math_LN10", "title": "math_LN10:number", "description": "#### math\\_LN10:number\n\nThe Number value for the natural logarithm of 10,\nwhich is approximately 2.302585092994046.", "meta": "const"}, {"label": "math_LOG2E", "title": "math_LOG2E:number", "description": "#### math\\_LOG2E:number\n\nThe Number value for the base-2 logarithm of e\u211d, the base of the natural logarithms;\nthis value is approximately 1.4426950408889634.\n\nNOTE:\nThe value of math\\_LOG2E is approximately the reciprocal of the value of math\\_LN2.\n", "meta": "const"}, {"label": "math_LOG10E", "title": "math_LOG10E:number", "description": "#### math\\_LOG10E:number\n\nThe Number value for the base-10 logarithm of e,\nthe base of the natural logarithms; this value is approximately 0.4342944819032518.\n\nNOTE:\nThe value of math\\_LOG10E is approximately the reciprocal of the value of math\\_LN10.\n", "meta": "const"}, {"label": "math_PI", "title": "math_PI:number", "description": "#### math\\_PI:number\n\nThe Number value for \u03c0, the ratio of the circumference of a circle to its diameter,\nwhich is approximately 3.1415926535897932.", "meta": "const"}, {"label": "math_SQRT1_2", "title": "math_SQRT1_2:number", "description": "#### math\\_SQRT1\\_2:number\n\nThe Number value for the square root of 0.5, which is approximately 0.7071067811865476.\n\nNOTE:\nThe value of math\\_SQRT1\\_2 is approximately the reciprocal of the value of math\\_SQRT2.\n", "meta": "const"}, {"label": "math_SQRT2", "title": "math_SQRT2:number", "description": "#### math\\_SQRT2:number\n\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.", "meta": "const"}, {"label": "NaN", "title": "NaN:number", "description": "#### NaN:number\n\nThe name `NaN` refers to the special number value `NaN` (\"not a number\"). Note that\n`NaN` is a number, as specified by `is_number`.\nSee [ECMAScript Specification, Section 4.3.24](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-nan)", "meta": "const"}, {"label": "undefined", "title": "undefined:undefined", "description": "#### undefined:undefined\n\nThe name `undefined` refers to the special value `undefined`.\nSee also [textbook explanation in section 4.1.1](https://sourceacademy.org/sicpjs/4.1.1#h5).", "meta": "const"}, {"label": "__access_export__", "title": "__access_export__(exports, lookup_name) \u2192 {value}", "description": "#### \\_\\_access\\_export\\_\\_(exports, lookup\\_name) \u2192 {value}\n\nSearches for the specified name in the data structure of exported names.\nThe data structure is a pair where the head element is the default export\nand the tail element is a list of pairs where each pair is a mapping from\nthe exported name to the value being exported. If the lookup name is\n\"default\", the default export is returned instead of a named export. If\nthe name does not exist, `undefined` is returned.", "meta": "func", "parameters": ["exports", "lookup_name"]}, {"label": "__access_named_export__", "title": "__access_named_export__(named_exports, lookup_name) \u2192 {value}", "description": "#### \\_\\_access\\_named\\_export\\_\\_(named\\_exports, lookup\\_name) \u2192 {value}\n\nSearches for the specified name in the data structure of exported names.\nThe data structure is a list of pairs where each pair is a mapping from\nthe exported name to the value being exported. If the name does not exist,\n`undefined` is returned.", "meta": "func", "parameters": ["named_exports", "lookup_name"]}, {"label": "accumulate", "title": "accumulate(f, initial, xs) \u2192 {value}", "description": "#### accumulate(f, initial, xs) \u2192 {value}\n\nApplies binary\nfunction `f` to the elements of `xs` from\nright-to-left order, first applying `f` to the last element\nand the value `initial`, resulting in `r`1,\nthen to the\nsecond-last element and `r`1, resulting in\n`r`2,\netc, and finally\nto the first element and `r`n-1, where\n`n` is the length of the\nlist. Thus, `accumulate(f,zero,list(1,2,3))` results in\n`f(1, f(2, f(3, zero)))`.\nIterative process;\ntime: `Theta(n)` (apart from `f`), space: `Theta(n)` (apart from `f`),\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["(x, y) => ", "initial", "xs"]}, {"label": "append", "title": "append(xs, ys) \u2192 {list}", "description": "#### append(xs, ys) \u2192 {list}\n\nReturns a list that results from\nappending the list `ys` to the list `xs`.\nIterative process; time: `Theta(n)`, space:\n`Theta(n)`, where `n` is the length of `xs`.\nIn the result, null at the end of the first argument list\nis replaced by the second argument, regardless what the second\nargument consists of.", "meta": "func", "parameters": ["xs", "ys"]}, {"label": "arity", "title": "arity(f) \u2192 {number}", "description": "#### arity(f) \u2192 {number}\n\nReturns the number of parameters the given function `f` expects,\nexcluding the rest parameter.", "meta": "func", "parameters": ["f"]}, {"label": "build_list", "title": "build_list(f, n) \u2192 {list}", "description": "#### build\\_list(f, n) \u2192 {list}\n\nMakes a list with `n`\nelements by applying the unary function `f`\nto the numbers 0 to `n - 1`, assumed to be a nonnegative integer.\nIterative process; time: `Theta(n)` (apart from `f`), space: `Theta(n)` (apart from `f`).", "meta": "func", "parameters": ["x => ", "n"]}, {"label": "char_at", "title": "char_at(s, i) \u2192 {string}", "description": "#### char\\_at(s, i) \u2192 {string}\n\nTakes a string `s` as first argument and a nonnegative integer\n`i` as second argument. If `i` is less than the length\nof `s`, this function returns a one-character string that contains\nthe character of `s` at position `i`, counting from 0.\nIf `i` is larger than or equal to the length of\n`s`, this function returns `undefined`.", "meta": "func", "parameters": ["s", "i"]}, {"label": "display", "title": "display(v, s) \u2192 {value}", "description": "#### display(v, s) \u2192 {value}\n\nOptional second argument. If present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console.\nIf second argument not present,\njust displays the value `v` in the console.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "display_list", "title": "display_list(xs, s) \u2192 {value}", "description": "#### display\\_list(xs, s) \u2192 {value}\n\nOptional second argument.\nSimilar to `display`, but formats well-formed lists nicely if detected;\ntime, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in `x`.", "meta": "func", "parameters": ["xs", "s"], "optional_params": ["s"]}, {"label": "draw_data", "title": "draw_data() \u2192 {value}", "description": "#### draw\\_data() \u2192 {value}\n\nvisualizes the arguments in a separate drawing\narea in the Source Academy using box-and-pointer diagrams; time, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in the arguments.", "meta": "func", "parameters": []}, {"label": "enum_list", "title": "enum_list(start, end) \u2192 {list}", "description": "#### enum\\_list(start, end) \u2192 {list}\n\nReturns a list that enumerates\nnumbers starting from `start` using a step size of 1, until\nthe number exceeds (`>`) `end`.\nIterative process;\ntime: `Theta(n)`, space: `Theta(n)`,\nwhere `n` is `end - start`.", "meta": "func", "parameters": ["start", "end"]}, {"label": "equal", "title": "equal(x, y) \u2192 {boolean}", "description": "#### equal(x, y) \u2192 {boolean}\n\nReturns `true` if both\nhave the same structure with respect to `pair`,\nand identical values at corresponding leave positions (places that are not\nthemselves pairs), and `false` otherwise. For the \"identical\",\nthe values need to have the same type, otherwise the result is\n`false`. If corresponding leaves are boolean values, these values\nneed to be the same. If both are `undefined` or both are\n`null`, the result is `true`. Otherwise they are compared\nwith `===` (using the definition of `===` in the\nrespective Source language in use).\nTime, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in `x` and `y`.", "meta": "func", "parameters": ["x", "y"]}, {"label": "error", "title": "error(v, s)", "description": "#### error(v, s)\n\nOptional second argument.\nIf present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console with error flag.\nIf second argument not present,\njust displays the value `v` in the console with error flag.\nThe evaluation\nof any call of `error` aborts the running program immediately.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "filter", "title": "filter(pred, xs) \u2192 {list}", "description": "#### filter(pred, xs) \u2192 {list}\n\nReturns a list that contains\nonly those elements for which the one-argument function\n`pred`\nreturns `true`.\nIterative process;\ntime: `Theta(n)` (apart from `pred`), space: `Theta(n)` (apart from `pred`),\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "for_each", "title": "for_each(f, xs) \u2192 {boolean}", "description": "#### for\\_each(f, xs) \u2192 {boolean}\n\nApplies unary function `f` to every\nelement of the list `xs`.\nIterative process; time: `Theta(n)` (apart from `f`), space: `Theta(1)` (apart from `f`),\nwhere `n` is the length of `xs`.\n`f` is applied element-by-element:\n`for_each(fun, list(1, 2))` results in the calls\n`fun(1)` and `fun(2)`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "get_time", "title": "get_time() \u2192 {number}", "description": "#### get\\_time() \u2192 {number}\n\nReturns number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\nSee also [textbook example](https://sourceacademy.org/sicpjs/1.2.6#ex-1.21).", "meta": "func", "parameters": []}, {"label": "head", "title": "head(p) \u2192 {value}", "description": "#### head(p) \u2192 {value}\n\n\\*\\*primitive\\*\\*; returns head (first component) of given pair `p`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["p"]}, {"label": "is_boolean", "title": "is_boolean(v) \u2192 {boolean}", "description": "#### is\\_boolean(v) \u2192 {boolean}\n\nchecks whether a given value is a boolean", "meta": "func", "parameters": ["v"]}, {"label": "is_function", "title": "is_function(v) \u2192 {boolean}", "description": "#### is\\_function(v) \u2192 {boolean}\n\nchecks whether a given value is a function", "meta": "func", "parameters": ["v"]}, {"label": "is_list", "title": "is_list(xs) \u2192 {xs}", "description": "#### is\\_list(xs) \u2192 {xs}\n\n\\*\\*primitive\\*\\*; returns `true` if\n`xs` is a list as defined in the textbook, and\n`false` otherwise. Iterative process;\ntime: `Theta(n)`, space: `Theta(1)`, where `n`\nis the length of the\nchain of `tail` operations that can be applied to `xs`.\n`is_list` recurses down the list and checks that it ends with the empty list null", "meta": "func", "parameters": ["xs"]}, {"label": "is_null", "title": "is_null(x) \u2192 {boolean}", "description": "#### is\\_null(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x` is the\nempty list `null`, and `false` otherwise; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x"]}, {"label": "is_number", "title": "is_number(v) \u2192 {boolean}", "description": "#### is\\_number(v) \u2192 {boolean}\n\nchecks whether a given value is a number.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_pair", "title": "is_pair(x) \u2192 {boolean}", "description": "#### is\\_pair(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x` is a\npair and false otherwise; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x"]}, {"label": "is_string", "title": "is_string(v) \u2192 {boolean}", "description": "#### is\\_string(v) \u2192 {boolean}\n\nchecks whether a given value is a string.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_undefined", "title": "is_undefined(v) \u2192 {boolean}", "description": "#### is\\_undefined(v) \u2192 {boolean}\n\nchecks whether a given value is the special value `undefined`", "meta": "func", "parameters": ["v"]}, {"label": "length", "title": "length(xs) \u2192 {number}", "description": "#### length(xs) \u2192 {number}\n\nReturns the length of the list\n`xs`.\nIterative process; time: `Theta(n)`, space:\n`Theta(1)`, where `n` is the length of `xs`.", "meta": "func", "parameters": ["xs"]}, {"label": "list", "title": "list() \u2192 {list}", "description": "#### list() \u2192 {list}\n\n\\*\\*primitive\\*\\*; given `n` values, returns a list of length `n`.\nThe elements of the list are the given values in the given order; time: `Theta(n)Theta(n)`.", "meta": "func", "parameters": []}, {"label": "list_ref", "title": "list_ref(xs, n) \u2192 {value}", "description": "#### list\\_ref(xs, n) \u2192 {value}\n\nReturns the element\nof list `xs` at position `n`,\nwhere the first element has index 0.\nIterative process;\ntime: `Theta(n)`, space: `Theta(1)`,\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["xs", "n"]}, {"label": "list_to_string", "title": "list_to_string(xs) \u2192 {string}", "description": "#### list\\_to\\_string(xs) \u2192 {string}\n\nReturns a string that represents\nlist `xs` using the text-based box-and-pointer notation\n`[...]`.\nIterative process; time: `Theta(n)` where `n` is the size of the list, space: `Theta(m)` where `m` is the length of the string.\nThe process is iterative, but consumes space `O(m)`\nbecause of the result string.", "meta": "func", "parameters": ["xs"]}, {"label": "map", "title": "map(f, xs) \u2192 {list}", "description": "#### map(f, xs) \u2192 {list}\n\nReturns a list that results from list\n`xs` by element-wise application of unary function `f`.\nIterative process; time: `Theta(n)` (apart from `f`),\nspace: `Theta(n)` (apart from `f`), where `n` is the length of `xs`.\n`f` is applied element-by-element:\n`map(f, list(1, 2))` results in `list(f(1), f(2))`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "math_abs", "title": "math_abs(x) \u2192 {number}", "description": "#### math\\_abs(x) \u2192 {number}\n\ncomputes the absolute value of x; the result has the same magnitude as `x` but has positive sign.", "meta": "func", "parameters": ["x"]}, {"label": "math_acos", "title": "math_acos(x) \u2192 {number}", "description": "#### math\\_acos(x) \u2192 {number}\n\ncomputes the arc cosine of `x`.\nThe result is expressed in radians and ranges from +0 to +\u03c0.", "meta": "func", "parameters": ["x"]}, {"label": "math_acosh", "title": "math_acosh(x) \u2192 {number}", "description": "#### math\\_acosh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic cosine of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_asin", "title": "math_asin(x) \u2192 {number}", "description": "#### math\\_asin(x) \u2192 {number}\n\ncomputes the arc sine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_asinh", "title": "math_asinh(x) \u2192 {number}", "description": "#### math\\_asinh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic\nsine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan", "title": "math_atan(x) \u2192 {number}", "description": "#### math\\_atan(x) \u2192 {number}\n\ncomputes the arc tangent of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan2", "title": "math_atan2(y, x) \u2192 {number}", "description": "#### math\\_atan2(y, x) \u2192 {number}\n\ncomputes the arc tangent of the quotient `y` / `x` of the arguments `y` and `x`, where the signs of `y` and `x` are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named `y` be first and the argument named `x` be second. The result is expressed in radians and ranges from -\u03c0 to +\u03c0.", "meta": "func", "parameters": ["y", "x"]}, {"label": "math_atanh", "title": "math_atanh(x) \u2192 {number}", "description": "#### math\\_atanh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic tangent of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_cbrt", "title": "math_cbrt(x) \u2192 {number}", "description": "#### math\\_cbrt(x) \u2192 {number}\n\ncomputes the cube root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_ceil", "title": "math_ceil(x) \u2192 {number}", "description": "#### math\\_ceil(x) \u2192 {number}\n\ncomputes the smallest (closest to -\u221e) Number value that is not less than `x` and is an integer. If `x` is already an integer, the result is `x`.\nThe value of math\\_ceil(x) is the same as the value of -math\\_floor(-x).", "meta": "func", "parameters": ["x"]}, {"label": "math_clz32", "title": "math_clz32(n) \u2192 {number}", "description": "#### math\\_clz32(n) \u2192 {number}\n\nWhen math\\_clz32 is called with one argument `x`, the following steps are taken:\nLet n be ToUint32(x).\nLet p be the number of leading zero bits in the 32-bit binary representation of n.\nReturn p.\n\nNOTE:\n  \nIf n is 0, p will be 32. If the most significant bit of the 32-bit binary encoding of n is 1,\np will be 0.\n", "meta": "func", "parameters": ["n"]}, {"label": "math_cos", "title": "math_cos(x) \u2192 {number}", "description": "#### math\\_cos(x) \u2192 {number}\n\nComputes the cosine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_cosh", "title": "math_cosh(x) \u2192 {number}", "description": "#### math\\_cosh(x) \u2192 {number}\n\ncomputes the hyperbolic cosine of `x`.\n\nNOTE:\nThe value of cosh(x) is the same as (exp(x) + exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_exp", "title": "math_exp(x) \u2192 {number}", "description": "#### math\\_exp(x) \u2192 {number}\n\ncomputes the exponential function of `x`\n(e raised to the power of `x`, where e is the base of the natural logarithms).", "meta": "func", "parameters": ["x"]}, {"label": "math_expm1", "title": "math_expm1(x) \u2192 {number}", "description": "#### math\\_expm1(x) \u2192 {number}\n\ncomputes subtracting 1 from the\nexponential function of `x` (e raised to the power of `x`, where e is the base of\nthe natural logarithms). The result is computed in a way that is accurate even\nwhen the value of `x` is close to 0.", "meta": "func", "parameters": ["x"]}, {"label": "math_floor", "title": "math_floor(x) \u2192 {number}", "description": "#### math\\_floor(x) \u2192 {number}\n\ncomputes the greatest (closest to +\u221e) Number value that is not greater than `x`\nand is an integer.\n  \nIf `x` is already an integer, the result is `x`.\n\nNOTE:\nThe value of math\\_floor(x) is the same as the value of -math\\_ceil(-x).\n", "meta": "func", "parameters": ["x"]}, {"label": "math_fround", "title": "math_fround(x) \u2192 {number}", "description": "#### math\\_fround(x) \u2192 {number}\n\nWhen math\\_fround is called with argument `x`, the following steps are taken:\n\n1. If `x` is NaN, return NaN.\n2. If `x` is one of +0, -0, +\u221e, -\u221e, return `x`.\n3. Let x32 be the result of converting `x` to a value in IEEE 754-2008 binary32 format using roundTiesToEven mode.\n4. Let x64 be the result of converting x32 to a value in IEEE 754-2008 binary64 format.\n5. Return the ECMAScript Number value corresponding to x64.", "meta": "func", "parameters": ["x"]}, {"label": "math_hypot", "title": "math_hypot() \u2192 {number}", "description": "#### math\\_hypot() \u2192 {number}\n\ncomputes the square root\nof the sum of squares of its arguments.\n  \nIf no arguments are passed, the result is +0.", "meta": "func", "parameters": []}, {"label": "math_imul", "title": "math_imul(x, x) \u2192 {number}", "description": "#### math\\_imul(x, x) \u2192 {number}\n\nWhen math\\_imul is called with arguments `x` and `y`,\nthe following steps are taken:\n\n1. Let a be ToUint32(x).\n2. Let b be ToUint32(y).\n3. Let product be (a \u00d7 b) modulo 232.\n4. If product \u2265 231, return product - 232; otherwise return product.", "meta": "func", "parameters": ["x", "x"]}, {"label": "math_log", "title": "math_log(x) \u2192 {number}", "description": "#### math\\_log(x) \u2192 {number}\n\nComputes the natural logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log1p", "title": "math_log1p(x) \u2192 {number}", "description": "#### math\\_log1p(x) \u2192 {number}\n\ncomputes the natural logarithm of 1 + `x`. The result is computed in a way that is accurate even when the value of `x` is close to zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_log2", "title": "math_log2(x) \u2192 {number}", "description": "#### math\\_log2(x) \u2192 {number}\n\ncomputes the base 2 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log10", "title": "math_log10(x) \u2192 {number}", "description": "#### math\\_log10(x) \u2192 {number}\n\ncomputes the base 10 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_max", "title": "math_max() \u2192 {number}", "description": "#### math\\_max() \u2192 {number}\n\nGiven zero or more numbers, returns the largest of them.\n  \nIf no arguments are given, the result is -\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the largest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_min", "title": "math_min() \u2192 {number}", "description": "#### math\\_min() \u2192 {number}\n\nGiven zero or more arguments, returns the smallest of them.\n  \nIf no arguments are given, the result is +\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the smallest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_pow", "title": "math_pow(base, exponent) \u2192 {number}", "description": "#### math\\_pow(base, exponent) \u2192 {number}\n\nComputes the result of raising base to\nthe power of exponent.", "meta": "func", "parameters": ["base", "exponent"]}, {"label": "math_random", "title": "math_random() \u2192 {number}", "description": "#### math\\_random() \u2192 {number}\n\nReturns a number value with positive sign, greater than or equal to 0 but less than 1,\nchosen randomly or pseudo randomly with approximately uniform distribution over that\nrange, using an implementation-dependent algorithm or strategy. This function takes no arguments.\nEach math\\_random function created for distinct realms must produce a distinct sequence\nof values from successive calls.", "meta": "func", "parameters": []}, {"label": "math_round", "title": "math_round(x) \u2192 {number}", "description": "#### math\\_round(x) \u2192 {number}\n\nReturns the number value that is closest to `x` and is an integer.\n  \nIf two integers are equally close to `x`, then the result is the Number value\nthat is closer to +\u221e. If `x` is already an integer, the result is `x`.\nNOTE 1:\nmath\\_round(3.5) returns 4, but math\\_round(-3.5) returns -3.", "meta": "func", "parameters": ["x"]}, {"label": "math_sign", "title": "math_sign(x) \u2192 {number}", "description": "#### math\\_sign(x) \u2192 {number}\n\nComputes the sign of `x`, indicating whether `x` is positive, negative, or zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_sin", "title": "math_sin(x) \u2192 {number}", "description": "#### math\\_sin(x) \u2192 {number}\n\nComputes the sine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_sinh", "title": "math_sinh(x) \u2192 {number}", "description": "#### math\\_sinh(x) \u2192 {number}\n\nComputes the hyperbolic sine of `x`.\n\nNOTE:\nThe value of sinh(x) is the same as (exp(x) - exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_sqrt", "title": "math_sqrt(x) \u2192 {number}", "description": "#### math\\_sqrt(x) \u2192 {number}\n\nComputes the square root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_tan", "title": "math_tan(x) \u2192 {number}", "description": "#### math\\_tan(x) \u2192 {number}\n\nComputes the tangent of `x`. The argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_tanh", "title": "math_tanh(x) \u2192 {number}", "description": "#### math\\_tanh(x) \u2192 {number}\n\nComputes the hyperbolic tangent of `x`.\n\nNOTE:\nThe value of `math_tanh(x)` is the same as\n`(exp(x) - exp(-x))/(exp(x) + exp(-x))`.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_trunc", "title": "math_trunc(x) \u2192 {number}", "description": "#### math\\_trunc(x) \u2192 {number}\n\nComputes the integral part of the number `x`,\nremoving any fractional digits.", "meta": "func", "parameters": ["x"]}, {"label": "member", "title": "member(v, xs) \u2192 {list}", "description": "#### member(v, xs) \u2192 {list}\n\nReturns first postfix sublist\nwhose head is identical to\n`v` (using `===`); returns `null` if the\nelement does not occur in the list.\nIterative process; time: `Theta(n)`,\nspace: `Theta(1)`, where `n` is the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "pair", "title": "pair(x, y) \u2192 {pair}", "description": "#### pair(x, y) \u2192 {pair}\n\n\\*\\*primitive\\*\\*; makes a pair whose head (first component) is `x`\nand whose tail (second component) is `y`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x", "y"]}, {"label": "parse_int", "title": "parse_int(s, i) \u2192 {number}", "description": "#### parse\\_int(s, i) \u2192 {number}\n\nInterprets a given string `s` as an integer,\nusing the positive integer `i` as radix,\nand returns the respective value.\n  \nExamples: `parse_int(\"909\", 10)` returns the number\n`909`, and `parse_int(\"-1111\", 2)` returns the number\n`-15`.  \n\nSee [ECMAScript Specification, Section 18.2.5](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-parseint-string-radix) for details.", "meta": "func", "parameters": ["s", "i"]}, {"label": "prompt", "title": "prompt(s) \u2192 {string}", "description": "#### prompt(s) \u2192 {string}\n\nPops up a window that displays the string `s`, provides\nan input line for the user to enter a text, a `Cancel` button and an `OK` button.\nThe call of `prompt`\nsuspends execution of the program until one of the two buttons is pressed. If\nthe `OK` button is pressed, `prompt` returns the entered text as a string.\nIf the `Cancel` button is pressed, `prompt` returns a non-string value.", "meta": "func", "parameters": ["s"]}, {"label": "remove", "title": "remove(v, xs) \u2192 {list}", "description": "#### remove(v, xs) \u2192 {list}\n\nReturns a list that results from\n`xs` by removing the first item from `xs` that\nis identical (`===`) to `v`.\nReturns the original\nlist if there is no occurrence. Iterative process;\ntime: `Theta(n)`, space: `Theta(n)`, where `n`\nis the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "remove_all", "title": "remove_all(v, xs) \u2192 {list}", "description": "#### remove\\_all(v, xs) \u2192 {list}\n\nReturns a list that results from\n`xs` by removing all items from `xs` that\nare identical (`===`) to `v`.\nReturns the original\nlist if there is no occurrence.\nIterative process;\ntime: `Theta(n)`, space: `Theta(n)`, where `n`\nis the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "reverse", "title": "reverse(xs) \u2192 {list}", "description": "#### reverse(xs) \u2192 {list}\n\nReturns list `xs` in reverse\norder. Iterative process; time: `Theta(n)`,\nspace: `Theta(n)`, where `n` is the length of `xs`.\nThe process is iterative, but consumes space `Theta(n)`\nbecause of the result list.", "meta": "func", "parameters": ["xs"]}, {"label": "stringify", "title": "stringify(v) \u2192 {string}", "description": "#### stringify(v) \u2192 {string}\n\nreturns a string that represents the value `v`, using a\nnotation that is is consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.\nSee also [textbook example](https://sourceacademy.org/sicpjs/3.3.5).", "meta": "func", "parameters": ["v"]}, {"label": "tail", "title": "tail(p) \u2192 {value}", "description": "#### tail(p) \u2192 {value}\n\n\\*\\*primitive\\*\\*; returns tail (second component of given pair `p`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["p"]}], [{"label": "Infinity", "title": "Infinity:number", "description": "#### Infinity:number\n\nThe name `Infinity` refers to the special number value `Infinity`.\nSee [ECMAScript Specification, Section 4.3.23](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-infinity)", "meta": "const"}, {"label": "math_E", "title": "math_E:number", "description": "#### math\\_E:number\n\nThe Number value for e, Euler's number,\nwhich is approximately 2.718281828459045.", "meta": "const"}, {"label": "math_LN2", "title": "math_LN2:number", "description": "#### math\\_LN2:number\n\nThe Number value for the natural logarithm of 2,\nwhich is approximately 0.6931471805599453.", "meta": "const"}, {"label": "math_LN10", "title": "math_LN10:number", "description": "#### math\\_LN10:number\n\nThe Number value for the natural logarithm of 10,\nwhich is approximately 2.302585092994046.", "meta": "const"}, {"label": "math_LOG2E", "title": "math_LOG2E:number", "description": "#### math\\_LOG2E:number\n\nThe Number value for the base-2 logarithm of e\u211d, the base of the natural logarithms;\nthis value is approximately 1.4426950408889634.\n\nNOTE:\nThe value of math\\_LOG2E is approximately the reciprocal of the value of math\\_LN2.\n", "meta": "const"}, {"label": "math_LOG10E", "title": "math_LOG10E:number", "description": "#### math\\_LOG10E:number\n\nThe Number value for the base-10 logarithm of e,\nthe base of the natural logarithms; this value is approximately 0.4342944819032518.\n\nNOTE:\nThe value of math\\_LOG10E is approximately the reciprocal of the value of math\\_LN10.\n", "meta": "const"}, {"label": "math_PI", "title": "math_PI:number", "description": "#### math\\_PI:number\n\nThe Number value for \u03c0, the ratio of the circumference of a circle to its diameter,\nwhich is approximately 3.1415926535897932.", "meta": "const"}, {"label": "math_SQRT1_2", "title": "math_SQRT1_2:number", "description": "#### math\\_SQRT1\\_2:number\n\nThe Number value for the square root of 0.5, which is approximately 0.7071067811865476.\n\nNOTE:\nThe value of math\\_SQRT1\\_2 is approximately the reciprocal of the value of math\\_SQRT2.\n", "meta": "const"}, {"label": "math_SQRT2", "title": "math_SQRT2:number", "description": "#### math\\_SQRT2:number\n\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.", "meta": "const"}, {"label": "NaN", "title": "NaN:number", "description": "#### NaN:number\n\nThe name `NaN` refers to the special number value `NaN` (\"not a number\"). Note that\n`NaN` is a number, as specified by `is_number`.\nSee [ECMAScript Specification, Section 4.3.24](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-nan)", "meta": "const"}, {"label": "undefined", "title": "undefined:undefined", "description": "#### undefined:undefined\n\nThe name `undefined` refers to the special value `undefined`.\nSee also [textbook explanation in section 4.1.1](https://sourceacademy.org/sicpjs/4.1.1#h5).", "meta": "const"}, {"label": "__access_export__", "title": "__access_export__(exports, lookup_name) \u2192 {value}", "description": "#### \\_\\_access\\_export\\_\\_(exports, lookup\\_name) \u2192 {value}\n\nSearches for the specified name in the data structure of exported names.\nThe data structure is a pair where the head element is the default export\nand the tail element is a list of pairs where each pair is a mapping from\nthe exported name to the value being exported. If the lookup name is\n\"default\", the default export is returned instead of a named export. If\nthe name does not exist, `undefined` is returned.", "meta": "func", "parameters": ["exports", "lookup_name"]}, {"label": "__access_named_export__", "title": "__access_named_export__(named_exports, lookup_name) \u2192 {value}", "description": "#### \\_\\_access\\_named\\_export\\_\\_(named\\_exports, lookup\\_name) \u2192 {value}\n\nSearches for the specified name in the data structure of exported names.\nThe data structure is a list of pairs where each pair is a mapping from\nthe exported name to the value being exported. If the name does not exist,\n`undefined` is returned.", "meta": "func", "parameters": ["named_exports", "lookup_name"]}, {"label": "accumulate", "title": "accumulate(f, initial, xs) \u2192 {value}", "description": "#### accumulate(f, initial, xs) \u2192 {value}\n\nApplies binary\nfunction `f` to the elements of `xs` from\nright-to-left order, first applying `f` to the last element\nand the value `initial`, resulting in `r`1,\nthen to the\nsecond-last element and `r`1, resulting in\n`r`2,\netc, and finally\nto the first element and `r`n-1, where\n`n` is the length of the\nlist. Thus, `accumulate(f,zero,list(1,2,3))` results in\n`f(1, f(2, f(3, zero)))`.\nIterative process;\ntime: `Theta(n)` (apart from `f`), space: `Theta(n)` (apart from `f`),\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["(x, y) => ", "initial", "xs"]}, {"label": "append", "title": "append(xs, ys) \u2192 {list}", "description": "#### append(xs, ys) \u2192 {list}\n\nReturns a list that results from\nappending the list `ys` to the list `xs`.\nIterative process; time: `Theta(n)`, space:\n`Theta(n)`, where `n` is the length of `xs`.\nIn the result, null at the end of the first argument list\nis replaced by the second argument, regardless what the second\nargument consists of.", "meta": "func", "parameters": ["xs", "ys"]}, {"label": "arity", "title": "arity(f) \u2192 {number}", "description": "#### arity(f) \u2192 {number}\n\nReturns the number of parameters the given function `f` expects,\nexcluding the rest parameter.", "meta": "func", "parameters": ["f"]}, {"label": "array_length", "title": "array_length(x) \u2192 {number}", "description": "#### array\\_length(x) \u2192 {number}\n\n\\*\\*primitive\\*\\*; returns\nthe current length of array `x`, which is 1 plus the\nhighest index that has been used so far in an array assignment on\n`x`. Here literal array expressions are counted too: The\narray `[10, 20, 30]` has a length of 3.\nTime: `\u0398(1)`, space: `\u0398(1)`", "meta": "func", "parameters": ["x"]}, {"label": "build_list", "title": "build_list(f, n) \u2192 {list}", "description": "#### build\\_list(f, n) \u2192 {list}\n\nMakes a list with `n`\nelements by applying the unary function `f`\nto the numbers 0 to `n - 1`, assumed to be a nonnegative integer.\nIterative process; time: `Theta(n)` (apart from `f`), space: `Theta(n)` (apart from `f`).", "meta": "func", "parameters": ["x => ", "n"]}, {"label": "build_stream", "title": "build_stream(f, n) \u2192 {stream}", "description": "#### build\\_stream(f, n) \u2192 {stream}\n\nMakes a stream with `n`\nelements by applying the unary function `f`\nto the numbers 0 to `n - 1`, assumed to be a nonnegative integer.\nLazy? Yes: The result stream forces the application of `f`\nfor the next element", "meta": "func", "parameters": ["x => ", "n"]}, {"label": "char_at", "title": "char_at(s, i) \u2192 {string}", "description": "#### char\\_at(s, i) \u2192 {string}\n\nTakes a string `s` as first argument and a nonnegative integer\n`i` as second argument. If `i` is less than the length\nof `s`, this function returns a one-character string that contains\nthe character of `s` at position `i`, counting from 0.\nIf `i` is larger than or equal to the length of\n`s`, this function returns `undefined`.", "meta": "func", "parameters": ["s", "i"]}, {"label": "display", "title": "display(v, s) \u2192 {value}", "description": "#### display(v, s) \u2192 {value}\n\nOptional second argument. If present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console.\nIf second argument not present,\njust displays the value `v` in the console.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "display_list", "title": "display_list(xs, s) \u2192 {value}", "description": "#### display\\_list(xs, s) \u2192 {value}\n\nOptional second argument.\nSimilar to `display`, but formats well-formed lists nicely if detected;\ntime, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in `x`.", "meta": "func", "parameters": ["xs", "s"], "optional_params": ["s"]}, {"label": "draw_data", "title": "draw_data() \u2192 {value}", "description": "#### draw\\_data() \u2192 {value}\n\nvisualizes the arguments in a separate drawing\narea in the Source Academy using box-and-pointer diagrams; time, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in the arguments.", "meta": "func", "parameters": []}, {"label": "enum_list", "title": "enum_list(start, end) \u2192 {list}", "description": "#### enum\\_list(start, end) \u2192 {list}\n\nReturns a list that enumerates\nnumbers starting from `start` using a step size of 1, until\nthe number exceeds (`>`) `end`.\nIterative process;\ntime: `Theta(n)`, space: `Theta(n)`,\nwhere `n` is `end - start`.", "meta": "func", "parameters": ["start", "end"]}, {"label": "enum_stream", "title": "enum_stream(start, end) \u2192 {stream}", "description": "#### enum\\_stream(start, end) \u2192 {stream}\n\nReturns a stream that enumerates\nnumbers starting from `start` using a step size of 1, until\nthe number exceeds (`>`) `end`.\nLazy? Yes: The result stream forces the construction of\neach next element", "meta": "func", "parameters": ["start", "end"]}, {"label": "equal", "title": "equal(x, y) \u2192 {boolean}", "description": "#### equal(x, y) \u2192 {boolean}\n\nReturns `true` if both\nhave the same structure with respect to `pair`,\nand identical values at corresponding leave positions (places that are not\nthemselves pairs), and `false` otherwise. For the \"identical\",\nthe values need to have the same type, otherwise the result is\n`false`. If corresponding leaves are boolean values, these values\nneed to be the same. If both are `undefined` or both are\n`null`, the result is `true`. Otherwise they are compared\nwith `===` (using the definition of `===` in the\nrespective Source language in use).\nTime, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in `x` and `y`.", "meta": "func", "parameters": ["x", "y"]}, {"label": "error", "title": "error(v, s)", "description": "#### error(v, s)\n\nOptional second argument.\nIf present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console with error flag.\nIf second argument not present,\njust displays the value `v` in the console with error flag.\nThe evaluation\nof any call of `error` aborts the running program immediately.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "eval_stream", "title": "eval_stream(s, n) \u2192 {list}", "description": "#### eval\\_stream(s, n) \u2192 {list}\n\nConstructs the list of the first `n` elements\nof a given stream `s`\nLazy? Sort-of: `eval_stream` only forces the computation of\nthe first `n` elements, and leaves the rest of\nthe stream untouched.", "meta": "func", "parameters": ["s", "n"]}, {"label": "filter", "title": "filter(pred, xs) \u2192 {list}", "description": "#### filter(pred, xs) \u2192 {list}\n\nReturns a list that contains\nonly those elements for which the one-argument function\n`pred`\nreturns `true`.\nIterative process;\ntime: `Theta(n)` (apart from `pred`), space: `Theta(n)` (apart from `pred`),\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "for_each", "title": "for_each(f, xs) \u2192 {boolean}", "description": "#### for\\_each(f, xs) \u2192 {boolean}\n\nApplies unary function `f` to every\nelement of the list `xs`.\nIterative process; time: `Theta(n)` (apart from `f`), space: `Theta(1)` (apart from `f`),\nwhere `n` is the length of `xs`.\n`f` is applied element-by-element:\n`for_each(fun, list(1, 2))` results in the calls\n`fun(1)` and `fun(2)`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "get_time", "title": "get_time() \u2192 {number}", "description": "#### get\\_time() \u2192 {number}\n\nReturns number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\nSee also [textbook example](https://sourceacademy.org/sicpjs/1.2.6#ex-1.21).", "meta": "func", "parameters": []}, {"label": "head", "title": "head(p) \u2192 {value}", "description": "#### head(p) \u2192 {value}\n\n\\*\\*primitive\\*\\*; returns head (first component) of given pair `p`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["p"]}, {"label": "integers_from", "title": "integers_from(start) \u2192 {stream}", "description": "#### integers\\_from(start) \u2192 {stream}\n\nReturns infinite stream if integers starting\nat given number `n` using a step size of 1.\nLazy? Yes: The result stream forces the construction of\neach next element", "meta": "func", "parameters": ["start"]}, {"label": "is_array", "title": "is_array(x) \u2192 {boolean}", "description": "#### is\\_array(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x`\nis an array, and `false` if it is not.\nTime: `\u0398(1)`, space: `\u0398(1)`", "meta": "func", "parameters": ["x"]}, {"label": "is_boolean", "title": "is_boolean(v) \u2192 {boolean}", "description": "#### is\\_boolean(v) \u2192 {boolean}\n\nchecks whether a given value is a boolean", "meta": "func", "parameters": ["v"]}, {"label": "is_function", "title": "is_function(v) \u2192 {boolean}", "description": "#### is\\_function(v) \u2192 {boolean}\n\nchecks whether a given value is a function", "meta": "func", "parameters": ["v"]}, {"label": "is_list", "title": "is_list(xs) \u2192 {xs}", "description": "#### is\\_list(xs) \u2192 {xs}\n\n\\*\\*primitive\\*\\*; returns `true` if\n`xs` is a list as defined in the textbook, and\n`false` otherwise. Iterative process;\ntime: `Theta(n)`, space: `Theta(1)`, where `n`\nis the length of the\nchain of `tail` operations that can be applied to `xs`.\n`is_list` recurses down the list and checks that it ends with the empty list null", "meta": "func", "parameters": ["xs"]}, {"label": "is_null", "title": "is_null(x) \u2192 {boolean}", "description": "#### is\\_null(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x` is the\nempty list `null`, and `false` otherwise; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x"]}, {"label": "is_number", "title": "is_number(v) \u2192 {boolean}", "description": "#### is\\_number(v) \u2192 {boolean}\n\nchecks whether a given value is a number.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_pair", "title": "is_pair(x) \u2192 {boolean}", "description": "#### is\\_pair(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x` is a\npair and false otherwise; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x"]}, {"label": "is_stream", "title": "is_stream(xs) \u2192 {boolean}", "description": "#### is\\_stream(xs) \u2192 {boolean}\n\nReturns `true` if\n`xs` is a stream as defined in the textbook, and\n`false` otherwise. Iterative process.\nRecurses down the stream and checks that it ends with the empty stream null.\nLaziness: No: `is_stream` needs to force the given stream.", "meta": "func", "parameters": ["xs"]}, {"label": "is_string", "title": "is_string(v) \u2192 {boolean}", "description": "#### is\\_string(v) \u2192 {boolean}\n\nchecks whether a given value is a string.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_undefined", "title": "is_undefined(v) \u2192 {boolean}", "description": "#### is\\_undefined(v) \u2192 {boolean}\n\nchecks whether a given value is the special value `undefined`", "meta": "func", "parameters": ["v"]}, {"label": "length", "title": "length(xs) \u2192 {number}", "description": "#### length(xs) \u2192 {number}\n\nReturns the length of the list\n`xs`.\nIterative process; time: `Theta(n)`, space:\n`Theta(1)`, where `n` is the length of `xs`.", "meta": "func", "parameters": ["xs"]}, {"label": "list", "title": "list() \u2192 {list}", "description": "#### list() \u2192 {list}\n\n\\*\\*primitive\\*\\*; given `n` values, returns a list of length `n`.\nThe elements of the list are the given values in the given order; time: `Theta(n)Theta(n)`.", "meta": "func", "parameters": []}, {"label": "list_ref", "title": "list_ref(xs, n) \u2192 {value}", "description": "#### list\\_ref(xs, n) \u2192 {value}\n\nReturns the element\nof list `xs` at position `n`,\nwhere the first element has index 0.\nIterative process;\ntime: `Theta(n)`, space: `Theta(1)`,\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["xs", "n"]}, {"label": "list_to_stream", "title": "list_to_stream(xs) \u2192 {stream}", "description": "#### list\\_to\\_stream(xs) \u2192 {stream}\n\nGiven list `xs`, returns a stream of same length with\nthe same elements as `xs` in the same order.\nLaziness: Yes: `list_to_stream`\ngoes down the list only when forced.", "meta": "func", "parameters": ["xs"]}, {"label": "list_to_string", "title": "list_to_string(xs) \u2192 {string}", "description": "#### list\\_to\\_string(xs) \u2192 {string}\n\nReturns a string that represents\nlist `xs` using the text-based box-and-pointer notation\n`[...]`.\nIterative process; time: `Theta(n)` where `n` is the size of the list, space: `Theta(m)` where `m` is the length of the string.\nThe process is iterative, but consumes space `O(m)`\nbecause of the result string.", "meta": "func", "parameters": ["xs"]}, {"label": "map", "title": "map(f, xs) \u2192 {list}", "description": "#### map(f, xs) \u2192 {list}\n\nReturns a list that results from list\n`xs` by element-wise application of unary function `f`.\nIterative process; time: `Theta(n)` (apart from `f`),\nspace: `Theta(n)` (apart from `f`), where `n` is the length of `xs`.\n`f` is applied element-by-element:\n`map(f, list(1, 2))` results in `list(f(1), f(2))`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "math_abs", "title": "math_abs(x) \u2192 {number}", "description": "#### math\\_abs(x) \u2192 {number}\n\ncomputes the absolute value of x; the result has the same magnitude as `x` but has positive sign.", "meta": "func", "parameters": ["x"]}, {"label": "math_acos", "title": "math_acos(x) \u2192 {number}", "description": "#### math\\_acos(x) \u2192 {number}\n\ncomputes the arc cosine of `x`.\nThe result is expressed in radians and ranges from +0 to +\u03c0.", "meta": "func", "parameters": ["x"]}, {"label": "math_acosh", "title": "math_acosh(x) \u2192 {number}", "description": "#### math\\_acosh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic cosine of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_asin", "title": "math_asin(x) \u2192 {number}", "description": "#### math\\_asin(x) \u2192 {number}\n\ncomputes the arc sine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_asinh", "title": "math_asinh(x) \u2192 {number}", "description": "#### math\\_asinh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic\nsine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan", "title": "math_atan(x) \u2192 {number}", "description": "#### math\\_atan(x) \u2192 {number}\n\ncomputes the arc tangent of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan2", "title": "math_atan2(y, x) \u2192 {number}", "description": "#### math\\_atan2(y, x) \u2192 {number}\n\ncomputes the arc tangent of the quotient `y` / `x` of the arguments `y` and `x`, where the signs of `y` and `x` are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named `y` be first and the argument named `x` be second. The result is expressed in radians and ranges from -\u03c0 to +\u03c0.", "meta": "func", "parameters": ["y", "x"]}, {"label": "math_atanh", "title": "math_atanh(x) \u2192 {number}", "description": "#### math\\_atanh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic tangent of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_cbrt", "title": "math_cbrt(x) \u2192 {number}", "description": "#### math\\_cbrt(x) \u2192 {number}\n\ncomputes the cube root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_ceil", "title": "math_ceil(x) \u2192 {number}", "description": "#### math\\_ceil(x) \u2192 {number}\n\ncomputes the smallest (closest to -\u221e) Number value that is not less than `x` and is an integer. If `x` is already an integer, the result is `x`.\nThe value of math\\_ceil(x) is the same as the value of -math\\_floor(-x).", "meta": "func", "parameters": ["x"]}, {"label": "math_clz32", "title": "math_clz32(n) \u2192 {number}", "description": "#### math\\_clz32(n) \u2192 {number}\n\nWhen math\\_clz32 is called with one argument `x`, the following steps are taken:\nLet n be ToUint32(x).\nLet p be the number of leading zero bits in the 32-bit binary representation of n.\nReturn p.\n\nNOTE:\n  \nIf n is 0, p will be 32. If the most significant bit of the 32-bit binary encoding of n is 1,\np will be 0.\n", "meta": "func", "parameters": ["n"]}, {"label": "math_cos", "title": "math_cos(x) \u2192 {number}", "description": "#### math\\_cos(x) \u2192 {number}\n\nComputes the cosine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_cosh", "title": "math_cosh(x) \u2192 {number}", "description": "#### math\\_cosh(x) \u2192 {number}\n\ncomputes the hyperbolic cosine of `x`.\n\nNOTE:\nThe value of cosh(x) is the same as (exp(x) + exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_exp", "title": "math_exp(x) \u2192 {number}", "description": "#### math\\_exp(x) \u2192 {number}\n\ncomputes the exponential function of `x`\n(e raised to the power of `x`, where e is the base of the natural logarithms).", "meta": "func", "parameters": ["x"]}, {"label": "math_expm1", "title": "math_expm1(x) \u2192 {number}", "description": "#### math\\_expm1(x) \u2192 {number}\n\ncomputes subtracting 1 from the\nexponential function of `x` (e raised to the power of `x`, where e is the base of\nthe natural logarithms). The result is computed in a way that is accurate even\nwhen the value of `x` is close to 0.", "meta": "func", "parameters": ["x"]}, {"label": "math_floor", "title": "math_floor(x) \u2192 {number}", "description": "#### math\\_floor(x) \u2192 {number}\n\ncomputes the greatest (closest to +\u221e) Number value that is not greater than `x`\nand is an integer.\n  \nIf `x` is already an integer, the result is `x`.\n\nNOTE:\nThe value of math\\_floor(x) is the same as the value of -math\\_ceil(-x).\n", "meta": "func", "parameters": ["x"]}, {"label": "math_fround", "title": "math_fround(x) \u2192 {number}", "description": "#### math\\_fround(x) \u2192 {number}\n\nWhen math\\_fround is called with argument `x`, the following steps are taken:\n\n1. If `x` is NaN, return NaN.\n2. If `x` is one of +0, -0, +\u221e, -\u221e, return `x`.\n3. Let x32 be the result of converting `x` to a value in IEEE 754-2008 binary32 format using roundTiesToEven mode.\n4. Let x64 be the result of converting x32 to a value in IEEE 754-2008 binary64 format.\n5. Return the ECMAScript Number value corresponding to x64.", "meta": "func", "parameters": ["x"]}, {"label": "math_hypot", "title": "math_hypot() \u2192 {number}", "description": "#### math\\_hypot() \u2192 {number}\n\ncomputes the square root\nof the sum of squares of its arguments.\n  \nIf no arguments are passed, the result is +0.", "meta": "func", "parameters": []}, {"label": "math_imul", "title": "math_imul(x, x) \u2192 {number}", "description": "#### math\\_imul(x, x) \u2192 {number}\n\nWhen math\\_imul is called with arguments `x` and `y`,\nthe following steps are taken:\n\n1. Let a be ToUint32(x).\n2. Let b be ToUint32(y).\n3. Let product be (a \u00d7 b) modulo 232.\n4. If product \u2265 231, return product - 232; otherwise return product.", "meta": "func", "parameters": ["x", "x"]}, {"label": "math_log", "title": "math_log(x) \u2192 {number}", "description": "#### math\\_log(x) \u2192 {number}\n\nComputes the natural logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log1p", "title": "math_log1p(x) \u2192 {number}", "description": "#### math\\_log1p(x) \u2192 {number}\n\ncomputes the natural logarithm of 1 + `x`. The result is computed in a way that is accurate even when the value of `x` is close to zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_log2", "title": "math_log2(x) \u2192 {number}", "description": "#### math\\_log2(x) \u2192 {number}\n\ncomputes the base 2 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log10", "title": "math_log10(x) \u2192 {number}", "description": "#### math\\_log10(x) \u2192 {number}\n\ncomputes the base 10 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_max", "title": "math_max() \u2192 {number}", "description": "#### math\\_max() \u2192 {number}\n\nGiven zero or more numbers, returns the largest of them.\n  \nIf no arguments are given, the result is -\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the largest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_min", "title": "math_min() \u2192 {number}", "description": "#### math\\_min() \u2192 {number}\n\nGiven zero or more arguments, returns the smallest of them.\n  \nIf no arguments are given, the result is +\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the smallest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_pow", "title": "math_pow(base, exponent) \u2192 {number}", "description": "#### math\\_pow(base, exponent) \u2192 {number}\n\nComputes the result of raising base to\nthe power of exponent.", "meta": "func", "parameters": ["base", "exponent"]}, {"label": "math_random", "title": "math_random() \u2192 {number}", "description": "#### math\\_random() \u2192 {number}\n\nReturns a number value with positive sign, greater than or equal to 0 but less than 1,\nchosen randomly or pseudo randomly with approximately uniform distribution over that\nrange, using an implementation-dependent algorithm or strategy. This function takes no arguments.\nEach math\\_random function created for distinct realms must produce a distinct sequence\nof values from successive calls.", "meta": "func", "parameters": []}, {"label": "math_round", "title": "math_round(x) \u2192 {number}", "description": "#### math\\_round(x) \u2192 {number}\n\nReturns the number value that is closest to `x` and is an integer.\n  \nIf two integers are equally close to `x`, then the result is the Number value\nthat is closer to +\u221e. If `x` is already an integer, the result is `x`.\nNOTE 1:\nmath\\_round(3.5) returns 4, but math\\_round(-3.5) returns -3.", "meta": "func", "parameters": ["x"]}, {"label": "math_sign", "title": "math_sign(x) \u2192 {number}", "description": "#### math\\_sign(x) \u2192 {number}\n\nComputes the sign of `x`, indicating whether `x` is positive, negative, or zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_sin", "title": "math_sin(x) \u2192 {number}", "description": "#### math\\_sin(x) \u2192 {number}\n\nComputes the sine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_sinh", "title": "math_sinh(x) \u2192 {number}", "description": "#### math\\_sinh(x) \u2192 {number}\n\nComputes the hyperbolic sine of `x`.\n\nNOTE:\nThe value of sinh(x) is the same as (exp(x) - exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_sqrt", "title": "math_sqrt(x) \u2192 {number}", "description": "#### math\\_sqrt(x) \u2192 {number}\n\nComputes the square root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_tan", "title": "math_tan(x) \u2192 {number}", "description": "#### math\\_tan(x) \u2192 {number}\n\nComputes the tangent of `x`. The argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_tanh", "title": "math_tanh(x) \u2192 {number}", "description": "#### math\\_tanh(x) \u2192 {number}\n\nComputes the hyperbolic tangent of `x`.\n\nNOTE:\nThe value of `math_tanh(x)` is the same as\n`(exp(x) - exp(-x))/(exp(x) + exp(-x))`.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_trunc", "title": "math_trunc(x) \u2192 {number}", "description": "#### math\\_trunc(x) \u2192 {number}\n\nComputes the integral part of the number `x`,\nremoving any fractional digits.", "meta": "func", "parameters": ["x"]}, {"label": "member", "title": "member(v, xs) \u2192 {list}", "description": "#### member(v, xs) \u2192 {list}\n\nReturns first postfix sublist\nwhose head is identical to\n`v` (using `===`); returns `null` if the\nelement does not occur in the list.\nIterative process; time: `Theta(n)`,\nspace: `Theta(1)`, where `n` is the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "pair", "title": "pair(x, y) \u2192 {pair}", "description": "#### pair(x, y) \u2192 {pair}\n\n\\*\\*primitive\\*\\*; makes a pair whose head (first component) is `x`\nand whose tail (second component) is `y`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x", "y"]}, {"label": "parse_int", "title": "parse_int(s, i) \u2192 {number}", "description": "#### parse\\_int(s, i) \u2192 {number}\n\nInterprets a given string `s` as an integer,\nusing the positive integer `i` as radix,\nand returns the respective value.\n  \nExamples: `parse_int(\"909\", 10)` returns the number\n`909`, and `parse_int(\"-1111\", 2)` returns the number\n`-15`.  \n\nSee [ECMAScript Specification, Section 18.2.5](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-parseint-string-radix) for details.", "meta": "func", "parameters": ["s", "i"]}, {"label": "prompt", "title": "prompt(s) \u2192 {string}", "description": "#### prompt(s) \u2192 {string}\n\nPops up a window that displays the string `s`, provides\nan input line for the user to enter a text, a `Cancel` button and an `OK` button.\nThe call of `prompt`\nsuspends execution of the program until one of the two buttons is pressed. If\nthe `OK` button is pressed, `prompt` returns the entered text as a string.\nIf the `Cancel` button is pressed, `prompt` returns a non-string value.", "meta": "func", "parameters": ["s"]}, {"label": "remove", "title": "remove(v, xs) \u2192 {list}", "description": "#### remove(v, xs) \u2192 {list}\n\nReturns a list that results from\n`xs` by removing the first item from `xs` that\nis identical (`===`) to `v`.\nReturns the original\nlist if there is no occurrence. Iterative process;\ntime: `Theta(n)`, space: `Theta(n)`, where `n`\nis the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "remove_all", "title": "remove_all(v, xs) \u2192 {list}", "description": "#### remove\\_all(v, xs) \u2192 {list}\n\nReturns a list that results from\n`xs` by removing all items from `xs` that\nare identical (`===`) to `v`.\nReturns the original\nlist if there is no occurrence.\nIterative process;\ntime: `Theta(n)`, space: `Theta(n)`, where `n`\nis the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "reverse", "title": "reverse(xs) \u2192 {list}", "description": "#### reverse(xs) \u2192 {list}\n\nReturns list `xs` in reverse\norder. Iterative process; time: `Theta(n)`,\nspace: `Theta(n)`, where `n` is the length of `xs`.\nThe process is iterative, but consumes space `Theta(n)`\nbecause of the result list.", "meta": "func", "parameters": ["xs"]}, {"label": "set_head", "title": "set_head(p, x) \u2192 {undefined}", "description": "#### set\\_head(p, x) \u2192 {undefined}\n\nchanges the pair `p` such that its head is `x`.", "meta": "func", "parameters": ["p", "x"]}, {"label": "set_tail", "title": "set_tail(p, x) \u2192 {undefined}", "description": "#### set\\_tail(p, x) \u2192 {undefined}\n\nchanges the pair `p` such that its tail is `x`.", "meta": "func", "parameters": ["p", "x"]}, {"label": "stream", "title": "stream() \u2192 {stream}", "description": "#### stream() \u2192 {stream}\n\nGiven `n` values, returns a stream of length `n`.\nThe elements of the stream are the given values in the given order.\nLazy? No: A\ncomplete list is generated,\nand then a stream using `list_to_stream` is generated from it.", "meta": "func", "parameters": []}, {"label": "stream_append", "title": "stream_append(xs, ys) \u2192 {stream}", "description": "#### stream\\_append(xs, ys) \u2192 {stream}\n\nReturns a stream that results from\nappending the stream `ys` to the stream `xs`.\nIn the result, null at the end of the first argument stream\nis replaced by the second argument, regardless what the second\nargument consists of.\nLazy? Yes: the result stream forces the actual append operation", "meta": "func", "parameters": ["xs", "ys"]}, {"label": "stream_filter", "title": "stream_filter(pred, xs) \u2192 {stream}", "description": "#### stream\\_filter(pred, xs) \u2192 {stream}\n\nReturns a stream that contains\nonly those elements of given stream `xs`\nfor which the one-argument function\n`pred`\nreturns `true`.\nLazy? Yes: The result stream forces the construction of\neach next element. Of course, the construction\nof the next element needs to go down the stream\nuntil an element is found for which `pred` holds.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "stream_for_each", "title": "stream_for_each(f, xs) \u2192 {boolean}", "description": "#### stream\\_for\\_each(f, xs) \u2192 {boolean}\n\nApplies unary function `f` to every\nelement of the stream `xs`.\nIterative process.\n`f` is applied element-by-element:\n`stream_for_each(f, stream(1, 2))` results in the calls\n`f(1)` and `f(2)`.\nLazy? No: `stream_for_each`\nforces the exploration of the entire stream", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "stream_length", "title": "stream_length(xs) \u2192 {number}", "description": "#### stream\\_length(xs) \u2192 {number}\n\nReturns the length of the stream\n`xs`.\nIterative process.\nLazy? No: The function needs to explore the whole stream", "meta": "func", "parameters": ["xs"]}, {"label": "stream_map", "title": "stream_map(f, xs) \u2192 {stream}", "description": "#### stream\\_map(f, xs) \u2192 {stream}\n\nReturns a stream that results from stream\n`xs` by element-wise application\nof unary function `f`.\n`f` is applied element-by-element:\n`stream_map(f, stream(1,2))` results in\nthe same as `stream(f(1),f(2))`.\nLazy? Yes: The argument stream is only explored as forced by\nthe result stream.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "stream_member", "title": "stream_member(v, xs) \u2192 {stream}", "description": "#### stream\\_member(v, xs) \u2192 {stream}\n\nReturns first postfix substream\nwhose head is identical to\n`v` (using `===`); returns `null` if the\nelement does not occur in the stream.\nIterative process.\nLazy? Sort-of: `stream_member`\nforces the stream only until the element\nis found.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "stream_ref", "title": "stream_ref(xs, n) \u2192 {value}", "description": "#### stream\\_ref(xs, n) \u2192 {value}\n\nReturns the element\nof stream `xs` at position `n`,\nwhere the first element has index 0.\nIterative process.\nLazy? Sort-of: `stream_ref` only forces the computation of\nthe first `n` elements, and leaves the rest of\nthe stream untouched.", "meta": "func", "parameters": ["xs", "n"]}, {"label": "stream_remove", "title": "stream_remove(v, xs) \u2192 {stream}", "description": "#### stream\\_remove(v, xs) \u2192 {stream}\n\nReturns a stream that results from\n`xs` by removing the first item from `xs` that\nis identical (`===`) to `v`.\nReturns the original\nstream if there is no occurrence.\nLazy? Yes: the result stream forces the construction of each next element", "meta": "func", "parameters": ["v", "xs"]}, {"label": "stream_remove_all", "title": "stream_remove_all(v, xs) \u2192 {stream}", "description": "#### stream\\_remove\\_all(v, xs) \u2192 {stream}\n\nReturns a stream that results from\n`xs` by removing all items from `xs` that\nare identical (`===`) to `v`.\nReturns the original\nstream if there is no occurrence.\nRecursive process.\nLazy? Yes: the result stream forces the construction of each next\nelement", "meta": "func", "parameters": ["v", "xs"]}, {"label": "stream_reverse", "title": "stream_reverse(xs) \u2192 {stream}", "description": "#### stream\\_reverse(xs) \u2192 {stream}\n\nReturns stream `xs` in reverse\norder. Iterative process.\nThe process is iterative, but consumes space `Omega(n)`\nbecause of the result stream.\nLazy? No: `stream_reverse`\nforces the exploration of the entire stream", "meta": "func", "parameters": ["xs"]}, {"label": "stream_tail", "title": "stream_tail(xs) \u2192 {Stream}", "description": "#### stream\\_tail(xs) \u2192 {Stream}\n\nassumes that the tail (second component) of the\npair {x} is a nullary function, and returns the result of\napplying that function. Throws an exception if the argument\nis not a pair, or if the tail is not a function.\nLaziness: Yes: {stream\\_tail} only forces the direct tail\nstream, but not the rest of the stream, i.e. not the tail\nof the tail, etc.", "meta": "func", "parameters": ["xs"]}, {"label": "stream_to_list", "title": "stream_to_list(xs) \u2192 {list}", "description": "#### stream\\_to\\_list(xs) \u2192 {list}\n\nGiven stream `xs`, returns a list of same length with\nthe same elements as `xs` in the same order.\nLaziness: No: `stream_to_list` needs to force the whole\nstream.", "meta": "func", "parameters": ["xs"]}, {"label": "stringify", "title": "stringify(v) \u2192 {string}", "description": "#### stringify(v) \u2192 {string}\n\nreturns a string that represents the value `v`, using a\nnotation that is is consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.\nSee also [textbook example](https://sourceacademy.org/sicpjs/3.3.5).", "meta": "func", "parameters": ["v"]}, {"label": "tail", "title": "tail(p) \u2192 {value}", "description": "#### tail(p) \u2192 {value}\n\n\\*\\*primitive\\*\\*; returns tail (second component of given pair `p`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["p"]}], [{"label": "Infinity", "title": "Infinity:number", "description": "#### Infinity:number\n\nThe name `Infinity` refers to the special number value `Infinity`.\nSee [ECMAScript Specification, Section 4.3.23](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-infinity)", "meta": "const"}, {"label": "math_E", "title": "math_E:number", "description": "#### math\\_E:number\n\nThe Number value for e, Euler's number,\nwhich is approximately 2.718281828459045.", "meta": "const"}, {"label": "math_LN2", "title": "math_LN2:number", "description": "#### math\\_LN2:number\n\nThe Number value for the natural logarithm of 2,\nwhich is approximately 0.6931471805599453.", "meta": "const"}, {"label": "math_LN10", "title": "math_LN10:number", "description": "#### math\\_LN10:number\n\nThe Number value for the natural logarithm of 10,\nwhich is approximately 2.302585092994046.", "meta": "const"}, {"label": "math_LOG2E", "title": "math_LOG2E:number", "description": "#### math\\_LOG2E:number\n\nThe Number value for the base-2 logarithm of e\u211d, the base of the natural logarithms;\nthis value is approximately 1.4426950408889634.\n\nNOTE:\nThe value of math\\_LOG2E is approximately the reciprocal of the value of math\\_LN2.\n", "meta": "const"}, {"label": "math_LOG10E", "title": "math_LOG10E:number", "description": "#### math\\_LOG10E:number\n\nThe Number value for the base-10 logarithm of e,\nthe base of the natural logarithms; this value is approximately 0.4342944819032518.\n\nNOTE:\nThe value of math\\_LOG10E is approximately the reciprocal of the value of math\\_LN10.\n", "meta": "const"}, {"label": "math_PI", "title": "math_PI:number", "description": "#### math\\_PI:number\n\nThe Number value for \u03c0, the ratio of the circumference of a circle to its diameter,\nwhich is approximately 3.1415926535897932.", "meta": "const"}, {"label": "math_SQRT1_2", "title": "math_SQRT1_2:number", "description": "#### math\\_SQRT1\\_2:number\n\nThe Number value for the square root of 0.5, which is approximately 0.7071067811865476.\n\nNOTE:\nThe value of math\\_SQRT1\\_2 is approximately the reciprocal of the value of math\\_SQRT2.\n", "meta": "const"}, {"label": "math_SQRT2", "title": "math_SQRT2:number", "description": "#### math\\_SQRT2:number\n\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.", "meta": "const"}, {"label": "NaN", "title": "NaN:number", "description": "#### NaN:number\n\nThe name `NaN` refers to the special number value `NaN` (\"not a number\"). Note that\n`NaN` is a number, as specified by `is_number`.\nSee [ECMAScript Specification, Section 4.3.24](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-value-properties-of-the-global-object-nan)", "meta": "const"}, {"label": "undefined", "title": "undefined:undefined", "description": "#### undefined:undefined\n\nThe name `undefined` refers to the special value `undefined`.\nSee also [textbook explanation in section 4.1.1](https://sourceacademy.org/sicpjs/4.1.1#h5).", "meta": "const"}, {"label": "__access_export__", "title": "__access_export__(exports, lookup_name) \u2192 {value}", "description": "#### \\_\\_access\\_export\\_\\_(exports, lookup\\_name) \u2192 {value}\n\nSearches for the specified name in the data structure of exported names.\nThe data structure is a pair where the head element is the default export\nand the tail element is a list of pairs where each pair is a mapping from\nthe exported name to the value being exported. If the lookup name is\n\"default\", the default export is returned instead of a named export. If\nthe name does not exist, `undefined` is returned.", "meta": "func", "parameters": ["exports", "lookup_name"]}, {"label": "__access_named_export__", "title": "__access_named_export__(named_exports, lookup_name) \u2192 {value}", "description": "#### \\_\\_access\\_named\\_export\\_\\_(named\\_exports, lookup\\_name) \u2192 {value}\n\nSearches for the specified name in the data structure of exported names.\nThe data structure is a list of pairs where each pair is a mapping from\nthe exported name to the value being exported. If the name does not exist,\n`undefined` is returned.", "meta": "func", "parameters": ["named_exports", "lookup_name"]}, {"label": "accumulate", "title": "accumulate(f, initial, xs) \u2192 {value}", "description": "#### accumulate(f, initial, xs) \u2192 {value}\n\nApplies binary\nfunction `f` to the elements of `xs` from\nright-to-left order, first applying `f` to the last element\nand the value `initial`, resulting in `r`1,\nthen to the\nsecond-last element and `r`1, resulting in\n`r`2,\netc, and finally\nto the first element and `r`n-1, where\n`n` is the length of the\nlist. Thus, `accumulate(f,zero,list(1,2,3))` results in\n`f(1, f(2, f(3, zero)))`.\nIterative process;\ntime: `Theta(n)` (apart from `f`), space: `Theta(n)` (apart from `f`),\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["(x, y) => ", "initial", "xs"]}, {"label": "append", "title": "append(xs, ys) \u2192 {list}", "description": "#### append(xs, ys) \u2192 {list}\n\nReturns a list that results from\nappending the list `ys` to the list `xs`.\nIterative process; time: `Theta(n)`, space:\n`Theta(n)`, where `n` is the length of `xs`.\nIn the result, null at the end of the first argument list\nis replaced by the second argument, regardless what the second\nargument consists of.", "meta": "func", "parameters": ["xs", "ys"]}, {"label": "apply_in_underlying_javascript", "title": "apply_in_underlying_javascript(f, xs) \u2192 {whatever}", "description": "#### apply\\_in\\_underlying\\_javascript(f, xs) \u2192 {whatever}\n\ncalls the function `f`\nwith arguments given in list `xs`. For example:\n```\nfunction times(x, y) {\nreturn x * y;\n}\napply_in_underlying_javascript(times, list(2, 3)); // returns 6\n```", "meta": "func", "parameters": ["f", "xs"]}, {"label": "arity", "title": "arity(f) \u2192 {number}", "description": "#### arity(f) \u2192 {number}\n\nReturns the number of parameters the given function `f` expects,\nexcluding the rest parameter.", "meta": "func", "parameters": ["f"]}, {"label": "array_length", "title": "array_length(x) \u2192 {number}", "description": "#### array\\_length(x) \u2192 {number}\n\n\\*\\*primitive\\*\\*; returns\nthe current length of array `x`, which is 1 plus the\nhighest index that has been used so far in an array assignment on\n`x`. Here literal array expressions are counted too: The\narray `[10, 20, 30]` has a length of 3.\nTime: `\u0398(1)`, space: `\u0398(1)`", "meta": "func", "parameters": ["x"]}, {"label": "build_list", "title": "build_list(f, n) \u2192 {list}", "description": "#### build\\_list(f, n) \u2192 {list}\n\nMakes a list with `n`\nelements by applying the unary function `f`\nto the numbers 0 to `n - 1`, assumed to be a nonnegative integer.\nIterative process; time: `Theta(n)` (apart from `f`), space: `Theta(n)` (apart from `f`).", "meta": "func", "parameters": ["x => ", "n"]}, {"label": "build_stream", "title": "build_stream(f, n) \u2192 {stream}", "description": "#### build\\_stream(f, n) \u2192 {stream}\n\nMakes a stream with `n`\nelements by applying the unary function `f`\nto the numbers 0 to `n - 1`, assumed to be a nonnegative integer.\nLazy? Yes: The result stream forces the application of `f`\nfor the next element", "meta": "func", "parameters": ["x => ", "n"]}, {"label": "char_at", "title": "char_at(s, i) \u2192 {string}", "description": "#### char\\_at(s, i) \u2192 {string}\n\nTakes a string `s` as first argument and a nonnegative integer\n`i` as second argument. If `i` is less than the length\nof `s`, this function returns a one-character string that contains\nthe character of `s` at position `i`, counting from 0.\nIf `i` is larger than or equal to the length of\n`s`, this function returns `undefined`.", "meta": "func", "parameters": ["s", "i"]}, {"label": "display", "title": "display(v, s) \u2192 {value}", "description": "#### display(v, s) \u2192 {value}\n\nOptional second argument. If present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console.\nIf second argument not present,\njust displays the value `v` in the console.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "display_list", "title": "display_list(xs, s) \u2192 {value}", "description": "#### display\\_list(xs, s) \u2192 {value}\n\nOptional second argument.\nSimilar to `display`, but formats well-formed lists nicely if detected;\ntime, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in `x`.", "meta": "func", "parameters": ["xs", "s"], "optional_params": ["s"]}, {"label": "draw_data", "title": "draw_data() \u2192 {value}", "description": "#### draw\\_data() \u2192 {value}\n\nvisualizes the arguments in a separate drawing\narea in the Source Academy using box-and-pointer diagrams; time, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in the arguments.", "meta": "func", "parameters": []}, {"label": "enum_list", "title": "enum_list(start, end) \u2192 {list}", "description": "#### enum\\_list(start, end) \u2192 {list}\n\nReturns a list that enumerates\nnumbers starting from `start` using a step size of 1, until\nthe number exceeds (`>`) `end`.\nIterative process;\ntime: `Theta(n)`, space: `Theta(n)`,\nwhere `n` is `end - start`.", "meta": "func", "parameters": ["start", "end"]}, {"label": "enum_stream", "title": "enum_stream(start, end) \u2192 {stream}", "description": "#### enum\\_stream(start, end) \u2192 {stream}\n\nReturns a stream that enumerates\nnumbers starting from `start` using a step size of 1, until\nthe number exceeds (`>`) `end`.\nLazy? Yes: The result stream forces the construction of\neach next element", "meta": "func", "parameters": ["start", "end"]}, {"label": "equal", "title": "equal(x, y) \u2192 {boolean}", "description": "#### equal(x, y) \u2192 {boolean}\n\nReturns `true` if both\nhave the same structure with respect to `pair`,\nand identical values at corresponding leave positions (places that are not\nthemselves pairs), and `false` otherwise. For the \"identical\",\nthe values need to have the same type, otherwise the result is\n`false`. If corresponding leaves are boolean values, these values\nneed to be the same. If both are `undefined` or both are\n`null`, the result is `true`. Otherwise they are compared\nwith `===` (using the definition of `===` in the\nrespective Source language in use).\nTime, space:\n`Theta(n)`, where `n` is the total number of data structures such as\npairs in `x` and `y`.", "meta": "func", "parameters": ["x", "y"]}, {"label": "error", "title": "error(v, s)", "description": "#### error(v, s)\n\nOptional second argument.\nIf present,\ndisplays the given string `s`, followed by a space character, followed by the\nvalue `v` in the console with error flag.\nIf second argument not present,\njust displays the value `v` in the console with error flag.\nThe evaluation\nof any call of `error` aborts the running program immediately.\nThe notation used for the display of values\nis consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.", "meta": "func", "parameters": ["v", "s"], "optional_params": ["s"]}, {"label": "eval_stream", "title": "eval_stream(s, n) \u2192 {list}", "description": "#### eval\\_stream(s, n) \u2192 {list}\n\nConstructs the list of the first `n` elements\nof a given stream `s`\nLazy? Sort-of: `eval_stream` only forces the computation of\nthe first `n` elements, and leaves the rest of\nthe stream untouched.", "meta": "func", "parameters": ["s", "n"]}, {"label": "filter", "title": "filter(pred, xs) \u2192 {list}", "description": "#### filter(pred, xs) \u2192 {list}\n\nReturns a list that contains\nonly those elements for which the one-argument function\n`pred`\nreturns `true`.\nIterative process;\ntime: `Theta(n)` (apart from `pred`), space: `Theta(n)` (apart from `pred`),\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "for_each", "title": "for_each(f, xs) \u2192 {boolean}", "description": "#### for\\_each(f, xs) \u2192 {boolean}\n\nApplies unary function `f` to every\nelement of the list `xs`.\nIterative process; time: `Theta(n)` (apart from `f`), space: `Theta(1)` (apart from `f`),\nwhere `n` is the length of `xs`.\n`f` is applied element-by-element:\n`for_each(fun, list(1, 2))` results in the calls\n`fun(1)` and `fun(2)`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "get_time", "title": "get_time() \u2192 {number}", "description": "#### get\\_time() \u2192 {number}\n\nReturns number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\nSee also [textbook example](https://sourceacademy.org/sicpjs/1.2.6#ex-1.21).", "meta": "func", "parameters": []}, {"label": "head", "title": "head(p) \u2192 {value}", "description": "#### head(p) \u2192 {value}\n\n\\*\\*primitive\\*\\*; returns head (first component) of given pair `p`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["p"]}, {"label": "integers_from", "title": "integers_from(start) \u2192 {stream}", "description": "#### integers\\_from(start) \u2192 {stream}\n\nReturns infinite stream if integers starting\nat given number `n` using a step size of 1.\nLazy? Yes: The result stream forces the construction of\neach next element", "meta": "func", "parameters": ["start"]}, {"label": "is_array", "title": "is_array(x) \u2192 {boolean}", "description": "#### is\\_array(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x`\nis an array, and `false` if it is not.\nTime: `\u0398(1)`, space: `\u0398(1)`", "meta": "func", "parameters": ["x"]}, {"label": "is_boolean", "title": "is_boolean(v) \u2192 {boolean}", "description": "#### is\\_boolean(v) \u2192 {boolean}\n\nchecks whether a given value is a boolean", "meta": "func", "parameters": ["v"]}, {"label": "is_function", "title": "is_function(v) \u2192 {boolean}", "description": "#### is\\_function(v) \u2192 {boolean}\n\nchecks whether a given value is a function", "meta": "func", "parameters": ["v"]}, {"label": "is_list", "title": "is_list(xs) \u2192 {xs}", "description": "#### is\\_list(xs) \u2192 {xs}\n\n\\*\\*primitive\\*\\*; returns `true` if\n`xs` is a list as defined in the textbook, and\n`false` otherwise. Iterative process;\ntime: `Theta(n)`, space: `Theta(1)`, where `n`\nis the length of the\nchain of `tail` operations that can be applied to `xs`.\n`is_list` recurses down the list and checks that it ends with the empty list null", "meta": "func", "parameters": ["xs"]}, {"label": "is_null", "title": "is_null(x) \u2192 {boolean}", "description": "#### is\\_null(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x` is the\nempty list `null`, and `false` otherwise; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x"]}, {"label": "is_number", "title": "is_number(v) \u2192 {boolean}", "description": "#### is\\_number(v) \u2192 {boolean}\n\nchecks whether a given value is a number.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_pair", "title": "is_pair(x) \u2192 {boolean}", "description": "#### is\\_pair(x) \u2192 {boolean}\n\n\\*\\*primitive\\*\\*; returns `true` if `x` is a\npair and false otherwise; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x"]}, {"label": "is_stream", "title": "is_stream(xs) \u2192 {boolean}", "description": "#### is\\_stream(xs) \u2192 {boolean}\n\nReturns `true` if\n`xs` is a stream as defined in the textbook, and\n`false` otherwise. Iterative process.\nRecurses down the stream and checks that it ends with the empty stream null.\nLaziness: No: `is_stream` needs to force the given stream.", "meta": "func", "parameters": ["xs"]}, {"label": "is_string", "title": "is_string(v) \u2192 {boolean}", "description": "#### is\\_string(v) \u2192 {boolean}\n\nchecks whether a given value is a string.\nSee also [textbook example](https://sourceacademy.org/sicpjs/2.3.2).", "meta": "func", "parameters": ["v"]}, {"label": "is_undefined", "title": "is_undefined(v) \u2192 {boolean}", "description": "#### is\\_undefined(v) \u2192 {boolean}\n\nchecks whether a given value is the special value `undefined`", "meta": "func", "parameters": ["v"]}, {"label": "length", "title": "length(xs) \u2192 {number}", "description": "#### length(xs) \u2192 {number}\n\nReturns the length of the list\n`xs`.\nIterative process; time: `Theta(n)`, space:\n`Theta(1)`, where `n` is the length of `xs`.", "meta": "func", "parameters": ["xs"]}, {"label": "list", "title": "list() \u2192 {list}", "description": "#### list() \u2192 {list}\n\n\\*\\*primitive\\*\\*; given `n` values, returns a list of length `n`.\nThe elements of the list are the given values in the given order; time: `Theta(n)Theta(n)`.", "meta": "func", "parameters": []}, {"label": "list_ref", "title": "list_ref(xs, n) \u2192 {value}", "description": "#### list\\_ref(xs, n) \u2192 {value}\n\nReturns the element\nof list `xs` at position `n`,\nwhere the first element has index 0.\nIterative process;\ntime: `Theta(n)`, space: `Theta(1)`,\nwhere `n` is the length of `xs`.", "meta": "func", "parameters": ["xs", "n"]}, {"label": "list_to_stream", "title": "list_to_stream(xs) \u2192 {stream}", "description": "#### list\\_to\\_stream(xs) \u2192 {stream}\n\nGiven list `xs`, returns a stream of same length with\nthe same elements as `xs` in the same order.\nLaziness: Yes: `list_to_stream`\ngoes down the list only when forced.", "meta": "func", "parameters": ["xs"]}, {"label": "list_to_string", "title": "list_to_string(xs) \u2192 {string}", "description": "#### list\\_to\\_string(xs) \u2192 {string}\n\nReturns a string that represents\nlist `xs` using the text-based box-and-pointer notation\n`[...]`.\nIterative process; time: `Theta(n)` where `n` is the size of the list, space: `Theta(m)` where `m` is the length of the string.\nThe process is iterative, but consumes space `O(m)`\nbecause of the result string.", "meta": "func", "parameters": ["xs"]}, {"label": "map", "title": "map(f, xs) \u2192 {list}", "description": "#### map(f, xs) \u2192 {list}\n\nReturns a list that results from list\n`xs` by element-wise application of unary function `f`.\nIterative process; time: `Theta(n)` (apart from `f`),\nspace: `Theta(n)` (apart from `f`), where `n` is the length of `xs`.\n`f` is applied element-by-element:\n`map(f, list(1, 2))` results in `list(f(1), f(2))`.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "math_abs", "title": "math_abs(x) \u2192 {number}", "description": "#### math\\_abs(x) \u2192 {number}\n\ncomputes the absolute value of x; the result has the same magnitude as `x` but has positive sign.", "meta": "func", "parameters": ["x"]}, {"label": "math_acos", "title": "math_acos(x) \u2192 {number}", "description": "#### math\\_acos(x) \u2192 {number}\n\ncomputes the arc cosine of `x`.\nThe result is expressed in radians and ranges from +0 to +\u03c0.", "meta": "func", "parameters": ["x"]}, {"label": "math_acosh", "title": "math_acosh(x) \u2192 {number}", "description": "#### math\\_acosh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic cosine of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_asin", "title": "math_asin(x) \u2192 {number}", "description": "#### math\\_asin(x) \u2192 {number}\n\ncomputes the arc sine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_asinh", "title": "math_asinh(x) \u2192 {number}", "description": "#### math\\_asinh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic\nsine of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan", "title": "math_atan(x) \u2192 {number}", "description": "#### math\\_atan(x) \u2192 {number}\n\ncomputes the arc tangent of `x`. The result is expressed in radians and ranges from -\u03c0 / 2 to +\u03c0 / 2.", "meta": "func", "parameters": ["x"]}, {"label": "math_atan2", "title": "math_atan2(y, x) \u2192 {number}", "description": "#### math\\_atan2(y, x) \u2192 {number}\n\ncomputes the arc tangent of the quotient `y` / `x` of the arguments `y` and `x`, where the signs of `y` and `x` are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named `y` be first and the argument named `x` be second. The result is expressed in radians and ranges from -\u03c0 to +\u03c0.", "meta": "func", "parameters": ["y", "x"]}, {"label": "math_atanh", "title": "math_atanh(x) \u2192 {number}", "description": "#### math\\_atanh(x) \u2192 {number}\n\ncomputes the inverse hyperbolic tangent of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_cbrt", "title": "math_cbrt(x) \u2192 {number}", "description": "#### math\\_cbrt(x) \u2192 {number}\n\ncomputes the cube root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_ceil", "title": "math_ceil(x) \u2192 {number}", "description": "#### math\\_ceil(x) \u2192 {number}\n\ncomputes the smallest (closest to -\u221e) Number value that is not less than `x` and is an integer. If `x` is already an integer, the result is `x`.\nThe value of math\\_ceil(x) is the same as the value of -math\\_floor(-x).", "meta": "func", "parameters": ["x"]}, {"label": "math_clz32", "title": "math_clz32(n) \u2192 {number}", "description": "#### math\\_clz32(n) \u2192 {number}\n\nWhen math\\_clz32 is called with one argument `x`, the following steps are taken:\nLet n be ToUint32(x).\nLet p be the number of leading zero bits in the 32-bit binary representation of n.\nReturn p.\n\nNOTE:\n  \nIf n is 0, p will be 32. If the most significant bit of the 32-bit binary encoding of n is 1,\np will be 0.\n", "meta": "func", "parameters": ["n"]}, {"label": "math_cos", "title": "math_cos(x) \u2192 {number}", "description": "#### math\\_cos(x) \u2192 {number}\n\nComputes the cosine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_cosh", "title": "math_cosh(x) \u2192 {number}", "description": "#### math\\_cosh(x) \u2192 {number}\n\ncomputes the hyperbolic cosine of `x`.\n\nNOTE:\nThe value of cosh(x) is the same as (exp(x) + exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_exp", "title": "math_exp(x) \u2192 {number}", "description": "#### math\\_exp(x) \u2192 {number}\n\ncomputes the exponential function of `x`\n(e raised to the power of `x`, where e is the base of the natural logarithms).", "meta": "func", "parameters": ["x"]}, {"label": "math_expm1", "title": "math_expm1(x) \u2192 {number}", "description": "#### math\\_expm1(x) \u2192 {number}\n\ncomputes subtracting 1 from the\nexponential function of `x` (e raised to the power of `x`, where e is the base of\nthe natural logarithms). The result is computed in a way that is accurate even\nwhen the value of `x` is close to 0.", "meta": "func", "parameters": ["x"]}, {"label": "math_floor", "title": "math_floor(x) \u2192 {number}", "description": "#### math\\_floor(x) \u2192 {number}\n\ncomputes the greatest (closest to +\u221e) Number value that is not greater than `x`\nand is an integer.\n  \nIf `x` is already an integer, the result is `x`.\n\nNOTE:\nThe value of math\\_floor(x) is the same as the value of -math\\_ceil(-x).\n", "meta": "func", "parameters": ["x"]}, {"label": "math_fround", "title": "math_fround(x) \u2192 {number}", "description": "#### math\\_fround(x) \u2192 {number}\n\nWhen math\\_fround is called with argument `x`, the following steps are taken:\n\n1. If `x` is NaN, return NaN.\n2. If `x` is one of +0, -0, +\u221e, -\u221e, return `x`.\n3. Let x32 be the result of converting `x` to a value in IEEE 754-2008 binary32 format using roundTiesToEven mode.\n4. Let x64 be the result of converting x32 to a value in IEEE 754-2008 binary64 format.\n5. Return the ECMAScript Number value corresponding to x64.", "meta": "func", "parameters": ["x"]}, {"label": "math_hypot", "title": "math_hypot() \u2192 {number}", "description": "#### math\\_hypot() \u2192 {number}\n\ncomputes the square root\nof the sum of squares of its arguments.\n  \nIf no arguments are passed, the result is +0.", "meta": "func", "parameters": []}, {"label": "math_imul", "title": "math_imul(x, x) \u2192 {number}", "description": "#### math\\_imul(x, x) \u2192 {number}\n\nWhen math\\_imul is called with arguments `x` and `y`,\nthe following steps are taken:\n\n1. Let a be ToUint32(x).\n2. Let b be ToUint32(y).\n3. Let product be (a \u00d7 b) modulo 232.\n4. If product \u2265 231, return product - 232; otherwise return product.", "meta": "func", "parameters": ["x", "x"]}, {"label": "math_log", "title": "math_log(x) \u2192 {number}", "description": "#### math\\_log(x) \u2192 {number}\n\nComputes the natural logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log1p", "title": "math_log1p(x) \u2192 {number}", "description": "#### math\\_log1p(x) \u2192 {number}\n\ncomputes the natural logarithm of 1 + `x`. The result is computed in a way that is accurate even when the value of `x` is close to zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_log2", "title": "math_log2(x) \u2192 {number}", "description": "#### math\\_log2(x) \u2192 {number}\n\ncomputes the base 2 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_log10", "title": "math_log10(x) \u2192 {number}", "description": "#### math\\_log10(x) \u2192 {number}\n\ncomputes the base 10 logarithm of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_max", "title": "math_max() \u2192 {number}", "description": "#### math\\_max() \u2192 {number}\n\nGiven zero or more numbers, returns the largest of them.\n  \nIf no arguments are given, the result is -\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the largest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_min", "title": "math_min() \u2192 {number}", "description": "#### math\\_min() \u2192 {number}\n\nGiven zero or more arguments, returns the smallest of them.\n  \nIf no arguments are given, the result is +\u221e.\n  \nIf any value is NaN, the result is NaN.\nThe comparison of values to determine the smallest value is done using the\nAbstract Relational Comparison algorithm except that +0 is considered to be larger than -0.", "meta": "func", "parameters": []}, {"label": "math_pow", "title": "math_pow(base, exponent) \u2192 {number}", "description": "#### math\\_pow(base, exponent) \u2192 {number}\n\nComputes the result of raising base to\nthe power of exponent.", "meta": "func", "parameters": ["base", "exponent"]}, {"label": "math_random", "title": "math_random() \u2192 {number}", "description": "#### math\\_random() \u2192 {number}\n\nReturns a number value with positive sign, greater than or equal to 0 but less than 1,\nchosen randomly or pseudo randomly with approximately uniform distribution over that\nrange, using an implementation-dependent algorithm or strategy. This function takes no arguments.\nEach math\\_random function created for distinct realms must produce a distinct sequence\nof values from successive calls.", "meta": "func", "parameters": []}, {"label": "math_round", "title": "math_round(x) \u2192 {number}", "description": "#### math\\_round(x) \u2192 {number}\n\nReturns the number value that is closest to `x` and is an integer.\n  \nIf two integers are equally close to `x`, then the result is the Number value\nthat is closer to +\u221e. If `x` is already an integer, the result is `x`.\nNOTE 1:\nmath\\_round(3.5) returns 4, but math\\_round(-3.5) returns -3.", "meta": "func", "parameters": ["x"]}, {"label": "math_sign", "title": "math_sign(x) \u2192 {number}", "description": "#### math\\_sign(x) \u2192 {number}\n\nComputes the sign of `x`, indicating whether `x` is positive, negative, or zero.", "meta": "func", "parameters": ["x"]}, {"label": "math_sin", "title": "math_sin(x) \u2192 {number}", "description": "#### math\\_sin(x) \u2192 {number}\n\nComputes the sine of `x`.\nThe argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_sinh", "title": "math_sinh(x) \u2192 {number}", "description": "#### math\\_sinh(x) \u2192 {number}\n\nComputes the hyperbolic sine of `x`.\n\nNOTE:\nThe value of sinh(x) is the same as (exp(x) - exp(-x)) / 2.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_sqrt", "title": "math_sqrt(x) \u2192 {number}", "description": "#### math\\_sqrt(x) \u2192 {number}\n\nComputes the square root of `x`.", "meta": "func", "parameters": ["x"]}, {"label": "math_tan", "title": "math_tan(x) \u2192 {number}", "description": "#### math\\_tan(x) \u2192 {number}\n\nComputes the tangent of `x`. The argument is expressed in radians.", "meta": "func", "parameters": ["x"]}, {"label": "math_tanh", "title": "math_tanh(x) \u2192 {number}", "description": "#### math\\_tanh(x) \u2192 {number}\n\nComputes the hyperbolic tangent of `x`.\n\nNOTE:\nThe value of `math_tanh(x)` is the same as\n`(exp(x) - exp(-x))/(exp(x) + exp(-x))`.\n", "meta": "func", "parameters": ["x"]}, {"label": "math_trunc", "title": "math_trunc(x) \u2192 {number}", "description": "#### math\\_trunc(x) \u2192 {number}\n\nComputes the integral part of the number `x`,\nremoving any fractional digits.", "meta": "func", "parameters": ["x"]}, {"label": "member", "title": "member(v, xs) \u2192 {list}", "description": "#### member(v, xs) \u2192 {list}\n\nReturns first postfix sublist\nwhose head is identical to\n`v` (using `===`); returns `null` if the\nelement does not occur in the list.\nIterative process; time: `Theta(n)`,\nspace: `Theta(1)`, where `n` is the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "pair", "title": "pair(x, y) \u2192 {pair}", "description": "#### pair(x, y) \u2192 {pair}\n\n\\*\\*primitive\\*\\*; makes a pair whose head (first component) is `x`\nand whose tail (second component) is `y`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["x", "y"]}, {"label": "parse", "title": "parse(x) \u2192 {value}", "description": "#### parse(x) \u2192 {value}\n\nreturns the parse tree that results from parsing\nthe string `str` as a Source program. The format\nof the parse tree is described in chapter 4 of\nthe textbook\nin [Structure and\nInterpretation of Computer Programs, JavaScript Adaptation](https://sourceacademy.org/sicpjs/) (SICP).", "meta": "func", "parameters": ["x"]}, {"label": "parse_int", "title": "parse_int(s, i) \u2192 {number}", "description": "#### parse\\_int(s, i) \u2192 {number}\n\nInterprets a given string `s` as an integer,\nusing the positive integer `i` as radix,\nand returns the respective value.\n  \nExamples: `parse_int(\"909\", 10)` returns the number\n`909`, and `parse_int(\"-1111\", 2)` returns the number\n`-15`.  \n\nSee [ECMAScript Specification, Section 18.2.5](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-parseint-string-radix) for details.", "meta": "func", "parameters": ["s", "i"]}, {"label": "prompt", "title": "prompt(s) \u2192 {string}", "description": "#### prompt(s) \u2192 {string}\n\nPops up a window that displays the string `s`, provides\nan input line for the user to enter a text, a `Cancel` button and an `OK` button.\nThe call of `prompt`\nsuspends execution of the program until one of the two buttons is pressed. If\nthe `OK` button is pressed, `prompt` returns the entered text as a string.\nIf the `Cancel` button is pressed, `prompt` returns a non-string value.", "meta": "func", "parameters": ["s"]}, {"label": "remove", "title": "remove(v, xs) \u2192 {list}", "description": "#### remove(v, xs) \u2192 {list}\n\nReturns a list that results from\n`xs` by removing the first item from `xs` that\nis identical (`===`) to `v`.\nReturns the original\nlist if there is no occurrence. Iterative process;\ntime: `Theta(n)`, space: `Theta(n)`, where `n`\nis the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "remove_all", "title": "remove_all(v, xs) \u2192 {list}", "description": "#### remove\\_all(v, xs) \u2192 {list}\n\nReturns a list that results from\n`xs` by removing all items from `xs` that\nare identical (`===`) to `v`.\nReturns the original\nlist if there is no occurrence.\nIterative process;\ntime: `Theta(n)`, space: `Theta(n)`, where `n`\nis the length of `xs`.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "reverse", "title": "reverse(xs) \u2192 {list}", "description": "#### reverse(xs) \u2192 {list}\n\nReturns list `xs` in reverse\norder. Iterative process; time: `Theta(n)`,\nspace: `Theta(n)`, where `n` is the length of `xs`.\nThe process is iterative, but consumes space `Theta(n)`\nbecause of the result list.", "meta": "func", "parameters": ["xs"]}, {"label": "set_head", "title": "set_head(p, x) \u2192 {undefined}", "description": "#### set\\_head(p, x) \u2192 {undefined}\n\nchanges the pair `p` such that its head is `x`.", "meta": "func", "parameters": ["p", "x"]}, {"label": "set_tail", "title": "set_tail(p, x) \u2192 {undefined}", "description": "#### set\\_tail(p, x) \u2192 {undefined}\n\nchanges the pair `p` such that its tail is `x`.", "meta": "func", "parameters": ["p", "x"]}, {"label": "stream", "title": "stream() \u2192 {stream}", "description": "#### stream() \u2192 {stream}\n\nGiven `n` values, returns a stream of length `n`.\nThe elements of the stream are the given values in the given order.\nLazy? No: A\ncomplete list is generated,\nand then a stream using `list_to_stream` is generated from it.", "meta": "func", "parameters": []}, {"label": "stream_append", "title": "stream_append(xs, ys) \u2192 {stream}", "description": "#### stream\\_append(xs, ys) \u2192 {stream}\n\nReturns a stream that results from\nappending the stream `ys` to the stream `xs`.\nIn the result, null at the end of the first argument stream\nis replaced by the second argument, regardless what the second\nargument consists of.\nLazy? Yes: the result stream forces the actual append operation", "meta": "func", "parameters": ["xs", "ys"]}, {"label": "stream_filter", "title": "stream_filter(pred, xs) \u2192 {stream}", "description": "#### stream\\_filter(pred, xs) \u2192 {stream}\n\nReturns a stream that contains\nonly those elements of given stream `xs`\nfor which the one-argument function\n`pred`\nreturns `true`.\nLazy? Yes: The result stream forces the construction of\neach next element. Of course, the construction\nof the next element needs to go down the stream\nuntil an element is found for which `pred` holds.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "stream_for_each", "title": "stream_for_each(f, xs) \u2192 {boolean}", "description": "#### stream\\_for\\_each(f, xs) \u2192 {boolean}\n\nApplies unary function `f` to every\nelement of the stream `xs`.\nIterative process.\n`f` is applied element-by-element:\n`stream_for_each(f, stream(1, 2))` results in the calls\n`f(1)` and `f(2)`.\nLazy? No: `stream_for_each`\nforces the exploration of the entire stream", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "stream_length", "title": "stream_length(xs) \u2192 {number}", "description": "#### stream\\_length(xs) \u2192 {number}\n\nReturns the length of the stream\n`xs`.\nIterative process.\nLazy? No: The function needs to explore the whole stream", "meta": "func", "parameters": ["xs"]}, {"label": "stream_map", "title": "stream_map(f, xs) \u2192 {stream}", "description": "#### stream\\_map(f, xs) \u2192 {stream}\n\nReturns a stream that results from stream\n`xs` by element-wise application\nof unary function `f`.\n`f` is applied element-by-element:\n`stream_map(f, stream(1,2))` results in\nthe same as `stream(f(1),f(2))`.\nLazy? Yes: The argument stream is only explored as forced by\nthe result stream.", "meta": "func", "parameters": ["x => ", "xs"]}, {"label": "stream_member", "title": "stream_member(v, xs) \u2192 {stream}", "description": "#### stream\\_member(v, xs) \u2192 {stream}\n\nReturns first postfix substream\nwhose head is identical to\n`v` (using `===`); returns `null` if the\nelement does not occur in the stream.\nIterative process.\nLazy? Sort-of: `stream_member`\nforces the stream only until the element\nis found.", "meta": "func", "parameters": ["v", "xs"]}, {"label": "stream_ref", "title": "stream_ref(xs, n) \u2192 {value}", "description": "#### stream\\_ref(xs, n) \u2192 {value}\n\nReturns the element\nof stream `xs` at position `n`,\nwhere the first element has index 0.\nIterative process.\nLazy? Sort-of: `stream_ref` only forces the computation of\nthe first `n` elements, and leaves the rest of\nthe stream untouched.", "meta": "func", "parameters": ["xs", "n"]}, {"label": "stream_remove", "title": "stream_remove(v, xs) \u2192 {stream}", "description": "#### stream\\_remove(v, xs) \u2192 {stream}\n\nReturns a stream that results from\n`xs` by removing the first item from `xs` that\nis identical (`===`) to `v`.\nReturns the original\nstream if there is no occurrence.\nLazy? Yes: the result stream forces the construction of each next element", "meta": "func", "parameters": ["v", "xs"]}, {"label": "stream_remove_all", "title": "stream_remove_all(v, xs) \u2192 {stream}", "description": "#### stream\\_remove\\_all(v, xs) \u2192 {stream}\n\nReturns a stream that results from\n`xs` by removing all items from `xs` that\nare identical (`===`) to `v`.\nReturns the original\nstream if there is no occurrence.\nRecursive process.\nLazy? Yes: the result stream forces the construction of each next\nelement", "meta": "func", "parameters": ["v", "xs"]}, {"label": "stream_reverse", "title": "stream_reverse(xs) \u2192 {stream}", "description": "#### stream\\_reverse(xs) \u2192 {stream}\n\nReturns stream `xs` in reverse\norder. Iterative process.\nThe process is iterative, but consumes space `Omega(n)`\nbecause of the result stream.\nLazy? No: `stream_reverse`\nforces the exploration of the entire stream", "meta": "func", "parameters": ["xs"]}, {"label": "stream_tail", "title": "stream_tail(xs) \u2192 {Stream}", "description": "#### stream\\_tail(xs) \u2192 {Stream}\n\nassumes that the tail (second component) of the\npair {x} is a nullary function, and returns the result of\napplying that function. Throws an exception if the argument\nis not a pair, or if the tail is not a function.\nLaziness: Yes: {stream\\_tail} only forces the direct tail\nstream, but not the rest of the stream, i.e. not the tail\nof the tail, etc.", "meta": "func", "parameters": ["xs"]}, {"label": "stream_to_list", "title": "stream_to_list(xs) \u2192 {list}", "description": "#### stream\\_to\\_list(xs) \u2192 {list}\n\nGiven stream `xs`, returns a list of same length with\nthe same elements as `xs` in the same order.\nLaziness: No: `stream_to_list` needs to force the whole\nstream.", "meta": "func", "parameters": ["xs"]}, {"label": "stringify", "title": "stringify(v) \u2192 {string}", "description": "#### stringify(v) \u2192 {string}\n\nreturns a string that represents the value `v`, using a\nnotation that is is consistent with\n[JSON](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf),\nbut also displays `undefined`, `NaN`, `Infinity`, and function objects.\nSee also [textbook example](https://sourceacademy.org/sicpjs/3.3.5).", "meta": "func", "parameters": ["v"]}, {"label": "tail", "title": "tail(p) \u2192 {value}", "description": "#### tail(p) \u2192 {value}\n\n\\*\\*primitive\\*\\*; returns tail (second component of given pair `p`; time: `Theta(1)Theta(1)`.", "meta": "func", "parameters": ["p"]}, {"label": "tokenize", "title": "tokenize(x) \u2192 {list}", "description": "#### tokenize(x) \u2192 {list}\n\nreturns the list of tokens that results from lexing the string `str`", "meta": "func", "parameters": ["x"]}]]