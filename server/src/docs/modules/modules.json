{"painter": [{"label": "display_painter", "meta": "func", "title": "Auto-import from painter", "description": "#### display_painter(painter) \u2192 Function\nReturns a function that turns a given Frame into a Drawing, given the\npainter\n", "parameters": ["${1:painter}"]}, {"label": "draw_line", "meta": "func", "title": "Auto-import from painter", "description": "#### draw_line(v_start, v_end) \u2192 void\nDraw a line from v\\_start to v\\_end\n", "parameters": ["${1:v_start}", "${2:v_end}"]}], "unity_academy": [{"label": "add_impulse_force", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### add_impulse_force(gameObjectIdentifier, force) \u2192 void\nAdd an impulse force on the Rigidbody attached on the GameObject, **using its mass**.\n\nUsage of all physics functions under the Physics category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:force}"]}, {"label": "add_vectors", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### add_vectors(vectorA, vectorB) \u2192 Vector3\nAdd two 3D vectors together.\n", "parameters": ["${1:vectorA}", "${2:vectorB}"]}, {"label": "apply_rigidbody", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### apply_rigidbody(gameObjectIdentifier) \u2192 void\nApply rigidbody (2D or 3D based on the current dimension mode) to the given GameObject to use Unity's physics engine.\n\nAll other functions under the Physics - Rigidbody category require calling this function first on the applied GameObjects.\n\nFor more information, see\n\n* https://docs.unity3d.com/ScriptReference/Rigidbody.html (For 3D Mode)\n* https://docs.unity3d.com/ScriptReference/Rigidbody2D.html (For 2D Mode)", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "copy_position", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### copy_position(from, to, deltaPosition) \u2192 void\nCopy the position values from one GameObject to another GameObject along with delta values.\n\nSet one or more coordinate value(s) in the `deltaPosition` Vector3 to the exact value \"999999\" (six nines) to remain the position of the destination GameObject on the corresponding axis/axes unaffected by this function.\n", "parameters": ["${1:from}", "${2:to}", "${3:deltaPosition}"]}, {"label": "copy_rotation", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### copy_rotation(from, to, deltaRotation) \u2192 void\nCopy the rotation values (Euler angles) from one GameObject to another GameObject along with delta values.\n\nSet one or more coordinate value(s) in the `deltaPosition` Vector3 to the exact value \"999999\" (six nines) to remain the rotation of the destination GameObject on the corresponding axis/axes unaffected by this function.\n", "parameters": ["${1:from}", "${2:to}", "${3:deltaRotation}"]}, {"label": "copy_scale", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### copy_scale(from, to, deltaScale) \u2192 void\nCopy the scale values from one GameObject to another GameObject along with delta values.\n\nSet one or more coordinate value(s) in the `deltaPosition` Vector3 to the exact value \"999999\" (six nines) to remain the scale of the destination GameObject on the corresponding axis/axes unaffected by this function.\n", "parameters": ["${1:from}", "${2:to}", "${3:deltaScale}"]}, {"label": "cross", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### cross(vectorA, vectorB) \u2192 Vector3\nCalcuate the cross product of two 3D vectors.\n", "parameters": ["${1:vectorA}", "${2:vectorB}"]}, {"label": "debug_log", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### debug_log(content) \u2192 void\nLog to Unity Academy Embedded Frontend's console.\n\nYou can use rich text for the parameter `content`.\n", "parameters": ["${1:content}"]}, {"label": "debug_logerror", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### debug_logerror(content) \u2192 void\nLog to Unity Academy Embedded Frontend's console, with red font color as highlighting.\n\nNote that this function does not \"really\" throw any error. It just logs a message with red font color and the student code will continue running normally after calling this function to log the error.\n\nYou can use rich text for the parameter `content`.\n", "parameters": ["${1:content}"]}, {"label": "debug_logwarning", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### debug_logwarning(content) \u2192 void\nLog to Unity Academy Embedded Frontend's console, with yellow font color as highlighting.\n\nYou can use rich text for the parameter `content`.\n", "parameters": ["${1:content}"]}, {"label": "delta_time", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### delta_time() \u2192 number\nReturns the value of Time.deltaTime in Unity ( roughly saying it's about `1 / instant_frame_rate_per_second` )\n\nThis should be useful when implementing timers or constant speed control in Update function.\n\nFor example:\n```\nfunction update(gameObject){\n    const move_speed = 3;\n    translate_world(gameObject, 0, 0, move_speed * delta_time());\n}\n```\nBy assigning the above code to a GameObject with `set_update`, that GameObject will move in a constant speed for about 3 units per second along world +Z axis.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Time-deltaTime.html\n", "parameters": []}, {"label": "destroy", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### destroy(gameObjectIdentifier) \u2192 void\nRemoves a GameObject\n\nNote that this won't remove the GameObject immediately, the actual removal will happen at the end of the current main cycle loop.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Object.Destroy.html\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "dot", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### dot(vectorA, vectorB) \u2192 number\nCalcuate the dot product of two 3D vectors.\n", "parameters": ["${1:vectorA}", "${2:vectorB}"]}, {"label": "gameobject_distance", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### gameobject_distance(gameObjectIdentifier_A, gameObjectIdentifier_B) \u2192 number\nCalcuate the distance between two GameObjects, based on each other's position\n", "parameters": ["${1:gameObjectIdentifier_A}", "${2:gameObjectIdentifier_B}"]}, {"label": "get_angular_velocity", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_angular_velocity(gameObjectIdentifier) \u2192 Vector3\nReturns the angular velocity of the rigidbody attached on the game object.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n\n\\*\\*2D Mode Special: \\*\\*In 2D mode there is no angular velocity on X nor Y axis, so in the X and Y values in the returned Vector3 will always be zero.\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "get_custom_prop", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_custom_prop(gameObjectIdentifier, propName) \u2192 any\nGet the value of a custom property with its name on a GameObject\n", "parameters": ["${1:gameObjectIdentifier}", "${2:propName}"]}, {"label": "get_key", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_key(keyCode) \u2192 boolean\nWhen user presses a key on the keyboard or mouse button, this function will return true in every frame that the key is still being pressed and false otherwise.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKey.html\n", "parameters": ["${1:keyCode}"]}, {"label": "get_key_down", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_key_down(keyCode) \u2192 boolean\nWhen user presses a key on the keyboard or mouse button, this function will return true only at the frame when the key is just pressed down and return false afterwards.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyDown.html\n", "parameters": ["${1:keyCode}"]}, {"label": "get_key_up", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_key_up(keyCode) \u2192 boolean\nWhen user releases a pressed key on the keyboard or mouse button, this function will return true only at the frame when the key is just released up and return false otherwise.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyUp.html\n", "parameters": ["${1:keyCode}"]}, {"label": "get_main_camera_following_target", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_main_camera_following_target() \u2192 GameObjectIdentifier\nGet the main camera following target GameObject (an invisible GameObject) to use it to control the position of the main camera with the default camera controller.\n\n* **In 3D mode**, the default camera controller behaves as third-person camera controller, and the center to follow is the following target GameObject. Also, Unity Academy will automatically set the rotation of this \"following target\" to the same rotation as the current main camera's rotation to let you get the main camera's rotation.\n* **In 2D mode**, the default camera controller will follow the target GameObject to move, along with a position delta value that you can adjust with the arrow keys on your keyboard.\n\nThe main camera following target GameObject is a primitive GameObject. This means that you are not allowed to destroy it and/or instantiate it during runtime. Multiple calls to this function will return GameObject identifiers that refer to the same primitive GameObject.\n\n**If default main camera controllers are disabled (you have called `request_for_main_camera_control`), then the following target GameObject is useless.**\n", "parameters": []}, {"label": "get_mass", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_mass(gameObjectIdentifier) \u2192 number\nReturns the mass of the rigidbody attached on the GameObject.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "get_position", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_position(gameObjectIdentifier) \u2192 Vector3\nReturns the world position of a given GameObject\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "get_rotation_euler", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_rotation_euler(gameObjectIdentifier) \u2192 Vector3\nReturns the world Euler angle rotation of a given GameObject\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "get_scale", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_scale(gameObjectIdentifier) \u2192 Vector3\nReturns the scale (size factor) of a given GameObject\n\nBy default the scale of a GameObject is (1, 1, 1)\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "get_velocity", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_velocity(gameObjectIdentifier) \u2192 Vector3\nReturns the velocity of the rigidbody attached on the GameObject.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "get_x", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_x(vector) \u2192 number\nGet the X component of a 3D vector\n", "parameters": ["${1:vector}"]}, {"label": "get_y", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_y(vector) \u2192 number\nGet the Y component of a 3D vector\n", "parameters": ["${1:vector}"]}, {"label": "get_z", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### get_z(vector) \u2192 number\nGet the Z component of a 3D vector\n", "parameters": ["${1:vector}"]}, {"label": "gui_button", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### gui_button(text, x, y, width, height, onClick) \u2192 void\nMake a button on the screen with given **screen space position** in the current frame. When user clicks the button, the `onClick` function will be called.\n\nThe origin of screen space is upper-left corner and the positive Y direction is downward.\n\nThe drawn button will only last for one frame. You should put this under the `Update` function (or a function that is called by the `Update` function) to keep the button stays in every frame.\n\nIf this function is called by a lifecycle event function, then the `onClick` function in the fourth parameter could also be considered as a lifecycle event function.\n\nThis means that you can use other functions from this module inside the `onClick` function, even though the functions are not under the `Outside Lifecycle` category.\n\nFor example, the code piece below\n```\nimport {init_unity_academy_3d, set_start, set_update, instantiate, gui_button, set_position }\nfrom \"unity_academy\";\ninit_unity_academy_3d();\n\nconst cube = instantiate(\"cube\");\n\nconst cube_update = (gameObject) => {\n  gui_button(\"Button\", 1000, 300, 200, 50, ()=>\n    set_position(gameObject, 0, 10, 6) // calling set_position inside the onClick function\n  );\n};\n\nset_update(cube, cube_update);\n```\nis correct.\n\nYou can use rich text for the parameter `text`. For example: `gui_button(\"<color=#AA00FF>Hello World</color>\", 100, 100, 200, 50, my_onclick_function);`\n", "parameters": ["${1:text}", "${2:x}", "${3:y}", "${4:width}", "${5:height}", "${6:onClick}"]}, {"label": "gui_label", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### gui_label(text, x, y) \u2192 void\nDraw a text (string) on the screen with given **screen space position** in the current frame.\n\nThe origin of screen space is upper-left corner and the positive Y direction is downward.\n\nThe drawn text will only last for one frame. You should put this under the `Update` function (or a function that is called by the `Update` function) to keep the text stays in every frame.\n\nYou can use rich text for the parameter `text`. For example: `gui_label(\"<color=#AA00FF>Hello World</color>\", 100, 100);`\n", "parameters": ["${1:text}", "${2:x}", "${3:y}"]}, {"label": "init_unity_academy_2d", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### init_unity_academy_2d() \u2192 void\nLoad and initialize Unity Academy WebGL player and set it to 2D mode. All other functions (except Maths functions) in this module requires calling this function or `init_unity_academy_3d` first.\n\nI recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.\n", "parameters": []}, {"label": "init_unity_academy_3d", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### init_unity_academy_3d() \u2192 void\nLoad and initialize Unity Academy WebGL player and set it to 3D mode. All other functions (except Maths functions) in this module requires calling this function or `init_unity_academy_2d` first.\n\nI recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.\n", "parameters": []}, {"label": "instantiate", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### instantiate(prefab_name) \u2192 GameObjectIdentifier\nCreates a new GameObject from an existing Prefab\n\n**3D mode only**\n\nA prefab is something that is pre-built and can be created and used as a whole.\n\nAvailable Prefab Information: <a href = 'https://unity-academy.s3.ap-southeast-1.amazonaws.com/webgl\\_assetbundles/prefab\\_info.html' rel=\"noopener noreferrer\" target=\"\\_blank\">Click Here</a>\n", "parameters": ["${1:prefab_name}"]}, {"label": "instantiate_empty", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### instantiate_empty() \u2192 GameObjectIdentifier\nCreates a new empty GameObject.\n\nAn empty GameObject is invisible and only have transform properties by default.\n\nYou may use the empty GameObject to run some general game management code or use the position of the empty GameObject to represent a point in the scene that the rest of your codes can access and utilize.\n", "parameters": []}, {"label": "instantiate_sprite", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### instantiate_sprite(sourceImageUrl) \u2192 GameObjectIdentifier\nCreates a new 2D Sprite GameObject from an online image.\n\nThe Sprite GameObject has a BoxCollider2D that matches its size by default. You may use `remove_collider_components` function to remove the default collider.\n\nNote that Unity Academy will use a HTTP GET request to download the image, which means that the HTTP response from the URL must allows CORS.\n\n**2D mode only**\n", "parameters": ["${1:sourceImageUrl}"]}, {"label": "look_at", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### look_at(gameObjectIdentifier, position) \u2192 void\nRotates the GameObject's transform so the local forward vector points at the given position.\n\nThe +Z direction of the GameObject (with respect to the GameObject's local space), which denotes forward in Unity's conventions, will pointing to the given position.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Transform.LookAt.html\n", "parameters": ["${1:gameObjectIdentifier}", "${2:position}"]}, {"label": "magnitude", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### magnitude(vector) \u2192 number\nCalcuate the magnitude of a vector\n", "parameters": ["${1:vector}"]}, {"label": "normalize", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### normalize(vector) \u2192 Vector3\nNormalize a vector. The returned vector will have the same direction as the original vector but have a magnitude of 1.\n", "parameters": ["${1:vector}"]}, {"label": "on_collision_enter", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### on_collision_enter(gameObjectIdentifier, eventFunction) \u2192 void\nSet the lifecycle event function that will be called when the collider on this GameObject just starting colliding with another collider.\n\nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).\n\nFor example: `const myFunction = (self, other) => {...};`\n\n* Note that for collision detaction to happen, for the two colliding GameObjects:\n  + if **in 3D mode**, both GameObjects must applied Rigidbody by `apply_rigidbody`\n  + if **in 2D mode**, at least one GameObject must applied Rigidbody by `apply_rigidbody`\n\nFor more information, see\n\n* https://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html (For 3D Mode)\n* https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionEnter2D.html (For 2D Mode)", "parameters": ["${1:gameObjectIdentifier}", "${2:eventFunction}"]}, {"label": "on_collision_exit", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### on_collision_exit(gameObjectIdentifier, eventFunction) \u2192 void\nSet the lifecycle event function that will be called when the collider on this GameObject just stops colliding with another collider.\n\nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).\n\nFor example: `const myFunction = (self, other) => {...};`\n\n* Note that for collision detaction to happen, for the two colliding GameObjects:\n  + if **in 3D mode**, both GameObjects must applied Rigidbody by `apply_rigidbody`\n  + if **in 2D mode**, at least one GameObject must applied Rigidbody by `apply_rigidbody`\n\nFor more information, see\n\n* https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit.html (For 3D Mode)\n* https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit2D.html (For 2D Mode)", "parameters": ["${1:gameObjectIdentifier}", "${2:eventFunction}"]}, {"label": "on_collision_stay", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### on_collision_stay(gameObjectIdentifier, eventFunction) \u2192 void\nSet the lifecycle event function that will be called per frame when the collider on this GameObject is colliding with another collider.\n\nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).\n\nFor example: `const myFunction = (self, other) => {...};`\n\n* Note that for collision detaction to happen, for the two colliding GameObjects:\n  + if **in 3D mode**, both GameObjects must applied Rigidbody by `apply_rigidbody`\n  + if **in 2D mode**, at least one GameObject must applied Rigidbody by `apply_rigidbody`\n\nFor more information, see\n\n* https://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html (For 3D Mode)\n* https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionStay2D.html (For 2D Mode)", "parameters": ["${1:gameObjectIdentifier}", "${2:eventFunction}"]}, {"label": "play_animator_state", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### play_animator_state(gameObjectIdentifier, animatorStateName) \u2192 void\nPlays an Unity animation state with given name on the GameObject's animator. Note that not all game objects have Unity animations. You should ask the people who provided you the prefab asset bundle for available animation names assigned to the prefab.\n\nIf you provide an invalid animator state name, this function will not take effect.\n\n**3D mode only**\n", "parameters": ["${1:gameObjectIdentifier}", "${2:animatorStateName}"]}, {"label": "point_distance", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### point_distance(pointA, pointB) \u2192 number\nCalcuate the distance between two 3D points\n", "parameters": ["${1:pointA}", "${2:pointB}"]}, {"label": "remove_collider_components", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### remove_collider_components(gameObjectIdentifier) \u2192 void\nRemoves all collider components directly attached on the given GameObject by default.\n\nYou can use this function on GameObjects those you don't want them to collide with other GameObjects.\n\nFor example, you may use this on the background image sprite GameObject in 2D scene.\n", "parameters": ["${1:gameObjectIdentifier}"]}, {"label": "request_for_main_camera_control", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### request_for_main_camera_control() \u2192 GameObjectIdentifier\nRequest for main camera control and get a GameObject identifier that can directly be used to control the main camera's position and rotation.\n\nWhen you request for the direct control over main camera with this function, the default camera controllers will be disabled, thus the GameObject identifier returned by `get_main_camera_following_target` will become useless, as you can no longer use the default main camera controllers.\n\nThis function is for totally customizing the position and rotation of the main camera. If you'd like to simplify the camera controlling with the help of the default camera controllers in Unity Academy, please consider use `get_main_camera_following_target` function.\n", "parameters": []}, {"label": "rotate_world", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### rotate_world(gameObjectIdentifier, angles) \u2192 void\nRotates a GameObject with given x, y and z values (Euler angle)\n", "parameters": ["${1:gameObjectIdentifier}", "${2:angles}"]}, {"label": "same_gameobject", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### same_gameobject(first, second) \u2192 boolean\nDetermines whether two GameObject identifiers refers to the same GameObject.\n", "parameters": ["${1:first}", "${2:second}"]}, {"label": "scale_vector", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### scale_vector(vector, factor) \u2192 Vector3\nScales a 3D vector with the given factor.\n", "parameters": ["${1:vector}", "${2:factor}"]}, {"label": "set_angular_drag", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_angular_drag(gameObjectIdentifier, value) \u2192 void\nSet the angular drag (similar to an air resistance that affects angular velocity) the rigidbody attached on the game object.\n\nBy default the angular drag is 0.05\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:value}"]}, {"label": "set_angular_velocity", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_angular_velocity(gameObjectIdentifier, angularVelocity) \u2192 void\nSet the angular velocity of the rigidbody attached on the game object.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n\n\\*\\*2D Mode Special: \\*\\*In 2D mode there is no angular velocity on X nor Y axis, so the X and Y values in the Vector3 is ignored.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:angularVelocity}"]}, {"label": "set_custom_prop", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_custom_prop(gameObjectIdentifier, propName, value) \u2192 void\nSet a custom property with name and value on a GameObject\n", "parameters": ["${1:gameObjectIdentifier}", "${2:propName}", "${3:value}"]}, {"label": "set_drag", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_drag(gameObjectIdentifier, value) \u2192 void\nSet the drag (similar to air resistance) the rigidbody attached on the game object.\n\nBy default the drag is zero.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:value}"]}, {"label": "set_mass", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_mass(gameObjectIdentifier, mass) \u2192 void\nSet the mass of the rigidbody attached on the game object.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:mass}"]}, {"label": "set_position", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_position(gameObjectIdentifier, position) \u2192 void\nSet the world position of a given GameObject\n", "parameters": ["${1:gameObjectIdentifier}", "${2:position}"]}, {"label": "set_rotation_euler", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_rotation_euler(gameObjectIdentifier, rotation) \u2192 void\nSet the world rotation of a given GameObject with given Euler angle rotation.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:rotation}"]}, {"label": "set_scale", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_scale(gameObjectIdentifier, scale) \u2192 void\nSet the scale (size) of a given GameObject\n\nBy default the scale of a GameObject is (1, 1, 1). Changing the scale of a GameObject along one axis will lead to a stretch or squeeze of the GameObject along that axis.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:scale}"]}, {"label": "set_start", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_start(gameObjectIdentifier, startFunction) \u2192 void\nSets the Start function of a given GameObject\n", "parameters": ["${1:gameObjectIdentifier}", "${2:startFunction}"]}, {"label": "set_update", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_update(gameObjectIdentifier, updateFunction) \u2192 void\nSets the Update function of a given GameObject\n", "parameters": ["${1:gameObjectIdentifier}", "${2:updateFunction}"]}, {"label": "set_use_gravity", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_use_gravity(gameObjectIdentifier, useGravity) \u2192 void\nSet whether the rigidbody attached on the game object should calculate for gravity.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:useGravity}"]}, {"label": "set_velocity", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### set_velocity(gameObjectIdentifier, velocity) \u2192 void\nSet the (linear) velocity of the rigidbody attached on the GameObject.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:velocity}"]}, {"label": "translate_local", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### translate_local(gameObjectIdentifier, deltaPosition) \u2192 void\nMoves a GameObject with given x, y and z values, **with respect to its local space**.\n\nThe current rotation of the GameObject will affect the real direction of movement.\n\nIn Unity, usually, the direction of +Z axis denotes forward.\n", "parameters": ["${1:gameObjectIdentifier}", "${2:deltaPosition}"]}, {"label": "translate_world", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### translate_world(gameObjectIdentifier, deltaPosition) \u2192 void\nMoves a GameObject with given x, y and z values\n", "parameters": ["${1:gameObjectIdentifier}", "${2:deltaPosition}"]}, {"label": "vector3", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### vector3(x, y, z) \u2192 Vector3\nCreate a 3D vector\n", "parameters": ["${1:x}", "${2:y}", "${3:z}"]}, {"label": "vector_difference", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### vector_difference(vectorA, vectorB) \u2192 Vector3\nCalcuate the vector difference between two vectors (vectorA - vectorB).\n", "parameters": ["${1:vectorA}", "${2:vectorB}"]}, {"label": "zero_vector", "meta": "func", "title": "Auto-import from unity_academy", "description": "#### zero_vector() \u2192 Vector3\nGet the zero vector\n", "parameters": []}], "plotly": [{"label": "draw_connected_2d", "meta": "func", "title": "Auto-import from plotly", "description": "#### draw_connected_2d(numPoints) \u2192 CurvePlotFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_connected_3d", "meta": "func", "title": "Auto-import from plotly", "description": "#### draw_connected_3d(numPoints) \u2192 CurvePlotFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the\n3D Curve at `num` sample points and connecting each pair with a line.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_points_2d", "meta": "func", "title": "Auto-import from plotly", "description": "#### draw_points_2d(numPoints) \u2192 CurvePlotFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at num sample points. The Drawing consists of isolated points, and does not connect them.\nWhen a program evaluates to a Drawing, the Source system displays it graphically, in a window,\n\n\\*\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_points_3d", "meta": "func", "title": "Auto-import from plotly", "description": "#### draw_points_3d(numPoints) \u2192 CurvePlotFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the\n3D Curve at num sample points. The Drawing consists of isolated points, and does not connect them.\nWhen a program evaluates to a Drawing, the Source system displays it graphically, in a window,\n\n\\*\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_sound_2d", "meta": "func", "title": "Auto-import from plotly", "description": "#### draw_sound_2d(sound) \u2192 void\nVisualizes the sound on a 2d line graph\n", "parameters": ["${1:sound}"]}, {"label": "new_plot", "meta": "func", "title": "Auto-import from plotly", "description": "#### new_plot(data) \u2192 void\nAdds a new plotly plot to the context which will be rendered in the Plotly Tabs\n", "parameters": ["${1:data}"]}, {"label": "new_plot_json", "meta": "func", "title": "Auto-import from plotly", "description": "#### new_plot_json(data) \u2192 void\nAdds a new plotly plot to the context which will be rendered in the Plotly Tabs\n", "parameters": ["${1:data}"]}], "repeat": [{"label": "repeat", "meta": "func", "title": "Auto-import from repeat", "description": "#### repeat(func, n) \u2192 Function\nReturns a new function which when applied to an argument, has the same effect\nas applying the specified function to the same argument n times.\n", "parameters": ["${1:func}", "${2:n}"]}, {"label": "thrice", "meta": "func", "title": "Auto-import from repeat", "description": "#### thrice(func) \u2192 Function\nReturns a new function which when applied to an argument, has the same effect\nas applying the specified function to the same argument 3 times.\n", "parameters": ["${1:func}"]}, {"label": "twice", "meta": "func", "title": "Auto-import from repeat", "description": "#### twice(func) \u2192 Function\nReturns a new function which when applied to an argument, has the same effect\nas applying the specified function to the same argument 2 times.\n", "parameters": ["${1:func}"]}], "pix_n_flix": [{"label": "alpha_of", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### alpha_of(pixel) \u2192 number\nReturns the alpha component of the given pixel.\n", "parameters": ["${1:pixel}"]}, {"label": "blue_of", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### blue_of(pixel) \u2192 number\nReturns the blue component of the given pixel.\n", "parameters": ["${1:pixel}"]}, {"label": "compose_filter", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### compose_filter(filter1, filter2) \u2192 Filter\nReturns a new filter that is equivalent to applying\nfilter1 and then filter2.\n", "parameters": ["${1:filter1}", "${2:filter2}"]}, {"label": "copy_image", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### copy_image(src, dest) \u2192 void\nThe default filter that just copies the source image to the\ndestination image.\n", "parameters": ["${1:src}", "${2:dest}"]}, {"label": "get_video_time", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### get_video_time() \u2192 number\nReturns the elapsed time in milliseconds since the start of the video.\n", "parameters": []}, {"label": "green_of", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### green_of(pixel) \u2192 number\nReturns the green component of the given pixel.\n", "parameters": ["${1:pixel}"]}, {"label": "image_height", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### image_height() \u2192 number\nReturns the current height of the displayed images in\npixels, i.e. the number of pixels in the vertical dimension.\n", "parameters": []}, {"label": "image_width", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### image_width() \u2192 number\nReturns the current width of the displayed images in\npixels, i.e. the number of pixels in the horizontal dimension.\n", "parameters": []}, {"label": "install_filter", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### install_filter(_filter) \u2192 void\nInstalls the given filter to be used to transform each source image from\nthe live camera or from a local/remote file to a destination image that\nis then displayed on screen.\n\nA filter is a function that is applied to two\ntwo-dimensional arrays of Pixels:\nthe source image and the destination image.\n", "parameters": ["${1:_filter}"]}, {"label": "keep_aspect_ratio", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### keep_aspect_ratio(_keepAspectRatio) \u2192 void\nSets pix\\_n\\_flix to preserve the aspect ratio of the video or image\n", "parameters": ["${1:_keepAspectRatio}"]}, {"label": "pause_at", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### pause_at(pause_time) \u2192 void\nPauses the video at a set time after the video starts.\n", "parameters": ["${1:pause_time}"]}, {"label": "red_of", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### red_of(pixel) \u2192 number\nReturns the red component of the given pixel.\n", "parameters": ["${1:pixel}"]}, {"label": "reset_filter", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### reset_filter() \u2192 void\nResets the installed filter to the default filter.\n", "parameters": []}, {"label": "set_dimensions", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### set_dimensions(width, height) \u2192 void\nSets the diemsions of the displayed images.\nNote: Only accepts width and height values within the range of 1 to 500.\n", "parameters": ["${1:width}", "${2:height}"]}, {"label": "set_fps", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### set_fps(fps) \u2192 void\nSets the framerate (i.e. frames per second (FPS)) of the video.\nNote: Only accepts FPS values within the range of 2 to 30.\n", "parameters": ["${1:fps}"]}, {"label": "set_loop_count", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### set_loop_count(n) \u2192 void\nSets the number of times the video is played.\nIf the number of times the video repeats is negative, the video will loop forever.\n", "parameters": ["${1:n}"]}, {"label": "set_rgba", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### set_rgba(pixel, r, g, b, a) \u2192 void\nAssigns the given red, green, blue and alpha component values to\nthe given pixel.\n", "parameters": ["${1:pixel}", "${2:r}", "${3:g}", "${4:b}", "${5:a}"]}, {"label": "set_volume", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### set_volume(volume) \u2192 void\nSets the audio volume of the local video file played.\nNote: Only accepts volume value within the range of 0 to 100.\n", "parameters": ["${1:volume}"]}, {"label": "start", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### start() \u2192 StartPacket\nStarts processing the image or video using the installed filter.\n", "parameters": []}, {"label": "use_image_url", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### use_image_url(URL) \u2192 void\nSets pix\\_n\\_flix to use the image from the given URL as the image feed\ninstead of using the default live camera feed.\n", "parameters": ["${1:URL}"]}, {"label": "use_local_file", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### use_local_file() \u2192 void\nSets pix\\_n\\_flix to use video or image feed from a local file\ninstead of using the default live camera feed.\n", "parameters": []}, {"label": "use_video_url", "meta": "func", "title": "Auto-import from pix_n_flix", "description": "#### use_video_url(URL) \u2192 void\nSets pix\\_n\\_flix to use the video from the given URL as the video feed\ninstead of using the default live camera feed.\n", "parameters": ["${1:URL}"]}], "binary_tree": [{"label": "entry", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### entry(t) \u2192 boolean\nReturns the entry of a given binary tree.\n", "parameters": ["${1:t}"]}, {"label": "is_empty_tree", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### is_empty_tree(value) \u2192 boolean\nReturns a boolean value, indicating whether the given\nvalue is an empty binary tree.\n", "parameters": ["${1:value}"]}, {"label": "is_tree", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### is_tree(value) \u2192 boolean\nReturns a boolean value, indicating whether the given\nvalue is a binary tree.\n", "parameters": ["${1:value}"]}, {"label": "left_branch", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### left_branch(t) \u2192 BinaryTree\nReturns the left branch of a given binary tree.\n", "parameters": ["${1:t}"]}, {"label": "make_empty_tree", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### make_empty_tree() \u2192 BinaryTree\nReturns an empty binary tree, represented by the empty list null\n", "parameters": []}, {"label": "make_tree", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### make_tree(value, left, right) \u2192 BinaryTree\nReturns a binary tree node composed of the specified left subtree, value and right subtree.\n", "parameters": ["${1:value}", "${2:left}", "${3:right}"]}, {"label": "right_branch", "meta": "func", "title": "Auto-import from binary_tree", "description": "#### right_branch(t) \u2192 BinaryTree\nReturns the right branch of a given binary tree.\n", "parameters": ["${1:t}"]}], "copy_gc": [{"label": "allHeap", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### allHeap(newHeap) \u2192 voido description availabl", "parameters": ["${1:newHeap}"]}, {"label": "doneShowRoot", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### doneShowRoot(heap) \u2192 voido description availabl", "parameters": ["${1:heap}"]}, {"label": "endFlip", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### endFlip(left, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:heap}"]}, {"label": "generateMemory", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### generateMemory() \u2192 voido description availabl", "parameters": []}, {"label": "init", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### init() \u2192 Objecto description availabl", "parameters": []}, {"label": "initialize_memory", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### initialize_memory(memorySize) \u2192 voido description availabl", "parameters": ["${1:memorySize}"]}, {"label": "initialize_tag", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### initialize_tag(allTag, types) \u2192 voido description availabl", "parameters": ["${1:allTag}", "${2:types}"]}, {"label": "newAssign", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### newAssign(res, left, heap) \u2192 voido description availabl", "parameters": ["${1:res}", "${2:left}", "${3:heap}"]}, {"label": "newCommand", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### newCommand(type, toSpace, fromSpace, left, right, sizeLeft, sizeRight, heap, description, firstDesc, lastDesc) \u2192 voido description availabl", "parameters": ["${1:type}", "${2:toSpace}", "${3:fromSpace}", "${4:left}", "${5:right}", "${6:sizeLeft}", "${7:sizeRight}", "${8:heap}", "${9:description}", "${10:firstDesc}", "${11:lastDesc}"]}, {"label": "newCopy", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### newCopy(left, right, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:right}", "${3:heap}"]}, {"label": "newNew", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### newNew(left, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:heap}"]}, {"label": "newPop", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### newPop(res, left, right, heap) \u2192 voido description availabl", "parameters": ["${1:res}", "${2:left}", "${3:right}", "${4:heap}"]}, {"label": "newPush", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### newPush(left, right, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:right}", "${3:heap}"]}, {"label": "resetFromSpace", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### resetFromSpace(fromSpace, heap) \u2192 number[]o description availabl", "parameters": ["${1:fromSpace}", "${2:heap}"]}, {"label": "resetRoots", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### resetRoots() \u2192 voido description availabl", "parameters": []}, {"label": "scanFlip", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### scanFlip(left, right, scan, free, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:right}", "${3:scan}", "${4:free}", "${5:heap}"]}, {"label": "showRoots", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### showRoots(left, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:heap}"]}, {"label": "startFlip", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### startFlip(toSpace, fromSpace, heap) \u2192 voido description availabl", "parameters": ["${1:toSpace}", "${2:fromSpace}", "${3:heap}"]}, {"label": "updateRoots", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### updateRoots(array) \u2192 voido description availabl", "parameters": ["${1:array}"]}, {"label": "updateSlotSegment", "meta": "func", "title": "Auto-import from copy_gc", "description": "#### updateSlotSegment(tag, size, first, last) \u2192 voido description availabl", "parameters": ["${1:tag}", "${2:size}", "${3:first}", "${4:last}"]}], "curve": [{"label": "animate_3D_curve", "meta": "func", "title": "Auto-import from curve", "description": "#### animate_3D_curve(duration, fps, drawer, func) \u2192 AnimatedCurve\nCreate a animation of curves using a curve generating function.\n", "parameters": ["${1:duration}", "${2:fps}", "${3:drawer}", "${4:func}"]}, {"label": "animate_curve", "meta": "func", "title": "Auto-import from curve", "description": "#### animate_curve(duration, fps, drawer, func) \u2192 AnimatedCurve\nCreate a animation of curves using a curve generating function.\n", "parameters": ["${1:duration}", "${2:fps}", "${3:drawer}", "${4:func}"]}, {"label": "arc", "meta": "func", "title": "Auto-import from curve", "description": "#### arc(t) \u2192 Point\nThis function is a curve: a function from a fraction t to a point. The points\nlie on the right half of the unit circle. They start at Point (0,1) when t is\n\n0. When t is 0.5, they reach Point (1,0), when t is 1, they reach Point\n   (0, -1).", "parameters": ["${1:t}"]}, {"label": "b_of", "meta": "func", "title": "Auto-import from curve", "description": "#### b_of(pt) \u2192 number\nRetrieves the blue component of a given Point.\n", "parameters": ["${1:pt}"]}, {"label": "connect_ends", "meta": "func", "title": "Auto-import from curve", "description": "#### connect_ends(curve1, curve2) \u2192 Curve\nThis function is a binary Curve operator: It takes two Curves as arguments\nand returns a new Curve. The two Curves are combined by using the full first\nCurve for the first portion of the result and by using the full second Curve\nfor the second portion of the result. The second Curve is translated such\nthat its point at fraction 0 is the same as the Point of the first Curve at\nfraction 1.\n", "parameters": ["${1:curve1}", "${2:curve2}"]}, {"label": "connect_rigidly", "meta": "func", "title": "Auto-import from curve", "description": "#### connect_rigidly(curve1, curve2) \u2192 Curve\nThis function is a binary Curve operator: It takes two Curves as arguments\nand returns a new Curve. The two Curves are combined by using the full first\nCurve for the first portion of the result and by using the full second Curve\nfor the second portion of the result. The second Curve is not changed, and\ntherefore there might be a big jump in the middle of the result Curve.\n", "parameters": ["${1:curve1}", "${2:curve2}"]}, {"label": "draw_3D_connected", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_3D_connected(numPoints) \u2192 RenderFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points and connecting each pair with\na line. The parts between (0,0,0) and (1,1,1) of the resulting Drawing are\nshown within the unit cube.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_3D_connected_full_view", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_3D_connected_full_view(numPoints) \u2192 RenderFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points and connecting each pair with\na line. The Drawing is translated and stretched/shrunk to show the full\ncurve and maximize its width and height within the cube.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_3D_connected_full_view_proportional", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_3D_connected_full_view_proportional(numPoints) \u2192 RenderFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points and connecting each pair with\na line. The Drawing is translated and scaled proportionally with its size\nmaximized to fit entirely inside the cube.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_3D_points", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_3D_points(numPoints) \u2192 RenderFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points. The Drawing consists of\nisolated points, and does not connect them. The parts between (0,0,0)\nand (1,1,1) of the resulting Drawing are shown within the unit cube.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_3D_points_full_view", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_3D_points_full_view(numPoints) \u2192 RenderFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points. The Drawing consists of\nisolated points, and does not connect them. The Drawing is translated and\nstretched/shrunk to maximize its size to fit entirely inside the cube.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_3D_points_full_view_proportional", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_3D_points_full_view_proportional(numPoints) \u2192 RenderFunction\nReturns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points. The Drawing consists of\nisolated points, and does not connect them. The Drawing is translated and\nscaled proportionally with its size maximized to fit entirely inside the cube.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_connected", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_connected(numPoints) \u2192 RenderFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line.\nThe parts between (0,0) and (1,1) of the resulting Drawing are shown in the window.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_connected_full_view", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_connected_full_view(numPoints) \u2192 RenderFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line. The Drawing is\ntranslated and stretched/shrunk to show the full curve and maximize its width\nand height, with some padding.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_connected_full_view_proportional", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_connected_full_view_proportional(numPoints) \u2192 RenderFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line. The Drawing\nis translated and scaled proportionally to show the full curve and maximize\nits size, with some padding.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_points", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_points(numPoints) \u2192 RenderFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points. The Drawing consists of isolated\npoints, and does not connect them. The parts between (0,0) and (1,1) of the\nresulting Drawing are shown in the window.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_points_full_view", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_points_full_view(numPoints) \u2192 RenderFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points. The Drawing consists of isolated\npoints, and does not connect them. The Drawing is translated and\nstretched/shrunk to show the full curve and maximize its width and height,\nwith some padding.\n", "parameters": ["${1:numPoints}"]}, {"label": "draw_points_full_view_proportional", "meta": "func", "title": "Auto-import from curve", "description": "#### draw_points_full_view_proportional(numPoints) \u2192 RenderFunction\nReturns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points. The Drawing consists of isolated\npoints, and does not connect them. The Drawing is translated and scaled\nproportionally with its size maximized to fit entirely inside the window,\nwith some padding.\n", "parameters": ["${1:numPoints}"]}, {"label": "g_of", "meta": "func", "title": "Auto-import from curve", "description": "#### g_of(pt) \u2192 number\nRetrieves the green component of a given Point.\n", "parameters": ["${1:pt}"]}, {"label": "invert", "meta": "func", "title": "Auto-import from curve", "description": "#### invert(curve) \u2192 Curve\nThis function is a Curve transformation: a function from a Curve to a Curve.\nThe points of the result Curve are the same points as the points of the\noriginal Curve, but in reverse: The result Curve applied to 0 is the original\nCurve applied to 1 and vice versa.\n", "parameters": ["${1:curve}"]}, {"label": "make_3D_color_point", "meta": "func", "title": "Auto-import from curve", "description": "#### make_3D_color_point(x, y, z, r, g, b) \u2192 Point\nMakes a 3D color Point with given x, y and z coordinates, and RGB values\nranging from 0 to 255. Any input lower than 0 for RGB will be rounded up to\n0, and any input higher than 255 will be rounded down to 255.\n", "parameters": ["${1:x}", "${2:y}", "${3:z}", "${4:r}", "${5:g}", "${6:b}"]}, {"label": "make_3D_point", "meta": "func", "title": "Auto-import from curve", "description": "#### make_3D_point(x, y, z) \u2192 Point\nMakes a 3D Point with given x, y and z coordinates.\n", "parameters": ["${1:x}", "${2:y}", "${3:z}"]}, {"label": "make_color_point", "meta": "func", "title": "Auto-import from curve", "description": "#### make_color_point(x, y, r, g, b) \u2192 Point\nMakes a color Point with given x and y coordinates, and RGB values ranging\nfrom 0 to 255. Any input lower than 0 for RGB will be rounded up to 0, and\nany input higher than 255 will be rounded down to 255.\n", "parameters": ["${1:x}", "${2:y}", "${3:r}", "${4:g}", "${5:b}"]}, {"label": "make_point", "meta": "func", "title": "Auto-import from curve", "description": "#### make_point(x, y) \u2192 Point\nMakes a Point with given x and y coordinates.\n", "parameters": ["${1:x}", "${2:y}"]}, {"label": "put_in_standard_position", "meta": "func", "title": "Auto-import from curve", "description": "#### put_in_standard_position(curve) \u2192 Curve\nThis function is a Curve transformation: It takes a Curve as argument and\nreturns a new Curve, as follows. A Curve is in standard position if it\nstarts at (0,0) ends at (1,0). This function puts the given Curve in\nstandard position by rigidly translating it so its start Point is at the\norigin (0,0), then rotating it about the origin to put its endpoint on the\nx axis, then scaling it to put the endpoint at (1,0). Behavior is unspecified\non closed Curves where start-point equal end-point.\n", "parameters": ["${1:curve}"]}, {"label": "r_of", "meta": "func", "title": "Auto-import from curve", "description": "#### r_of(pt) \u2192 number\nRetrieves the red component of a given Point.\n", "parameters": ["${1:pt}"]}, {"label": "rotate_around_origin", "meta": "func", "title": "Auto-import from curve", "description": "#### rotate_around_origin(theta1, theta2, theta3) \u2192 CurveTransformer\nThis function takes 3 angles, a, b and c in radians as parameter\nand returns a Curve transformation: a function that takes a Curve as argument\nand returns a new Curve, which is the original Curve rotated\nextrinsically with Euler angles (a, b, c) about x, y,\nand z axes.\n", "parameters": ["${1:theta1}", "${2:theta2}", "${3:theta3}"]}, {"label": "scale", "meta": "func", "title": "Auto-import from curve", "description": "#### scale(a, b, c) \u2192 CurveTransformer\nThis function takes scaling factors `a`, `b` and\n`c`, as arguments and returns a\nCurve transformation that scales a given Curve by `a` in\nx-direction, `b` in y-direction and `c` in z-direction.\n", "parameters": ["${1:a}", "${2:b}", "${3:c}"]}, {"label": "scale_proportional", "meta": "func", "title": "Auto-import from curve", "description": "#### scale_proportional(s) \u2192 CurveTransformer\nThis function takes a scaling factor s argument and returns a Curve\ntransformation that scales a given Curve by s in x, y and z direction.\n", "parameters": ["${1:s}"]}, {"label": "translate", "meta": "func", "title": "Auto-import from curve", "description": "#### translate(x0, y0, z0) \u2192 CurveTransformer\nThis function returns a Curve transformation: It takes an x-value x0, a\ny-value y0 and a z-value z0, as arguments and\nreturns a Curve transformation that takes a Curve as argument and returns a\nnew Curve, by translating the original by x0 in x-direction, y0 in\ny-direction and z0 in z-direction.\n", "parameters": ["${1:x0}", "${2:y0}", "${3:z0}"]}, {"label": "unit_circle", "meta": "func", "title": "Auto-import from curve", "description": "#### unit_circle(t) \u2192 Point\nThis function is a curve: a function from a fraction t to a point. The points\nlie on the unit circle. They start at Point (1,0) when t is 0. When t is\n0.25, they reach Point (0,1), when t is 0.5, they reach Point (-1, 0), etc.\n", "parameters": ["${1:t}"]}, {"label": "unit_line", "meta": "func", "title": "Auto-import from curve", "description": "#### unit_line(t) \u2192 Point\nThis function is a curve: a function from a fraction t to a point. The\nx-coordinate at fraction t is t, and the y-coordinate is 0.\n", "parameters": ["${1:t}"]}, {"label": "unit_line_at", "meta": "func", "title": "Auto-import from curve", "description": "#### unit_line_at(t) \u2192 Curve\nThis function is a Curve generator: it takes a number and returns a\nhorizontal curve. The number is a y-coordinate, and the Curve generates only\npoints with the given y-coordinate.\n", "parameters": ["${1:t}"]}, {"label": "x_of", "meta": "func", "title": "Auto-import from curve", "description": "#### x_of(pt) \u2192 number\nRetrieves the x-coordinate of a given Point.\n", "parameters": ["${1:pt}"]}, {"label": "y_of", "meta": "func", "title": "Auto-import from curve", "description": "#### y_of(pt) \u2192 number\nRetrieves the y-coordinate of a given Point.\n", "parameters": ["${1:pt}"]}, {"label": "z_of", "meta": "func", "title": "Auto-import from curve", "description": "#### z_of(pt) \u2192 number\nRetrieves the z-coordinate of a given Point.\n", "parameters": ["${1:pt}"]}], "mark_sweep": [{"label": "addRoots", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### addRoots(arr) \u2192 voido description availabl", "parameters": ["${1:arr}"]}, {"label": "allHeap", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### allHeap(newHeap) \u2192 voido description availabl", "parameters": ["${1:newHeap}"]}, {"label": "endGC", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### endGC(heap) \u2192 voido description availabl", "parameters": ["${1:heap}"]}, {"label": "generateMemory", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### generateMemory() \u2192 voido description availabl", "parameters": []}, {"label": "init", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### init() \u2192 Objecto description availabl", "parameters": []}, {"label": "initialize_memory", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### initialize_memory(memorySize, nodeSize, marked, unmarked) \u2192 voido description availabl", "parameters": ["${1:memorySize}", "${2:nodeSize}", "${3:marked}", "${4:unmarked}"]}, {"label": "initialize_tag", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### initialize_tag(allTag, types) \u2192 voido description availabl", "parameters": ["${1:allTag}", "${2:types}"]}, {"label": "newAssign", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newAssign(res, left, heap) \u2192 voido description availabl", "parameters": ["${1:res}", "${2:left}", "${3:heap}"]}, {"label": "newCommand", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newCommand(type, left, right, sizeLeft, sizeRight, heap, description, firstDesc, lastDesc, queue) \u2192 voido description availabl", "parameters": ["${1:type}", "${2:left}", "${3:right}", "${4:sizeLeft}", "${5:sizeRight}", "${6:heap}", "${7:description}", "${8:firstDesc}", "${9:lastDesc}", "${10:queue}"]}, {"label": "newGC", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newGC(heap) \u2192 voido description availabl", "parameters": ["${1:heap}"]}, {"label": "newMark", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newMark(left, heap, queue) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:heap}", "${3:queue}"]}, {"label": "newNew", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newNew(left, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:heap}"]}, {"label": "newPop", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newPop(res, left, right, heap) \u2192 voido description availabl", "parameters": ["${1:res}", "${2:left}", "${3:right}", "${4:heap}"]}, {"label": "newPush", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newPush(left, right, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:right}", "${3:heap}"]}, {"label": "newSweep", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newSweep(left, heap) \u2192 voido description availabl", "parameters": ["${1:left}", "${2:heap}"]}, {"label": "newUpdateSweep", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### newUpdateSweep(right, heap) \u2192 voido description availabl", "parameters": ["${1:right}", "${2:heap}"]}, {"label": "showRoot", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### showRoot(heap) \u2192 voido description availabl", "parameters": ["${1:heap}"]}, {"label": "showRoots", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### showRoots(heap) \u2192 voido description availabl", "parameters": ["${1:heap}"]}, {"label": "updateRoots", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### updateRoots(array) \u2192 voido description availabl", "parameters": ["${1:array}"]}, {"label": "updateSlotSegment", "meta": "func", "title": "Auto-import from mark_sweep", "description": "#### updateSlotSegment(tag, size, first, last) \u2192 voido description availabl", "parameters": ["${1:tag}", "${2:size}", "${3:first}", "${4:last}"]}], "sound": [{"label": "adsr", "meta": "func", "title": "Auto-import from sound", "description": "#### adsr(attack_ratio, decay_ratio, sustain_level, release_ratio) \u2192 SoundTransformer\nReturns an envelope: a function from Sound to Sound.\nWhen the adsr envelope is applied to a Sound, it returns\na new Sound with its amplitude modified according to parameters\nThe relative amplitude increases from 0 to 1 linearly over the\nattack proportion, then decreases from 1 to sustain level over the\ndecay proportion, and remains at that level until the release\nproportion when it decays back to 0.\n", "parameters": ["${1:attack_ratio}", "${2:decay_ratio}", "${3:sustain_level}", "${4:release_ratio}"]}, {"label": "bell", "meta": "func", "title": "Auto-import from sound", "description": "#### bell(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a bell, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "cello", "meta": "func", "title": "Auto-import from sound", "description": "#### cello(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a cello, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "consecutively", "meta": "func", "title": "Auto-import from sound", "description": "#### consecutively(list_of_sounds) \u2192 Sound\nMakes a new Sound by combining the sounds in a given list\nwhere the second Sound is appended to the end of the first Sound,\nthe third Sound is appended to the end of the second Sound, and\nso on. The effect is that the Sounds in the list are joined end-to-end\n", "parameters": ["${1:list_of_sounds}"]}, {"label": "get_duration", "meta": "func", "title": "Auto-import from sound", "description": "#### get_duration(sound) \u2192 number\nAccesses the duration of a given Sound.\n", "parameters": ["${1:sound}"]}, {"label": "get_wave", "meta": "func", "title": "Auto-import from sound", "description": "#### get_wave(sound) \u2192 Wave\nAccesses the wave function of a given Sound.\n", "parameters": ["${1:sound}"]}, {"label": "init_record", "meta": "func", "title": "Auto-import from sound", "description": "#### init_record() \u2192 string\nInitialize recording by obtaining permission\nto use the default device microphone\n", "parameters": []}, {"label": "is_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### is_sound(x) \u2192 x is Sound\nChecks if the argument is a Sound\n", "parameters": ["${1:x}"]}, {"label": "letter_name_to_frequency", "meta": "func", "title": "Auto-import from sound", "description": "#### letter_name_to_frequency(note) \u2192 number\nConverts a letter name to its corresponding frequency.\n", "parameters": ["${1:note}"]}, {"label": "letter_name_to_midi_note", "meta": "func", "title": "Auto-import from sound", "description": "#### letter_name_to_midi_note(note) \u2192 number\nConverts a letter name to its corresponding MIDI note.\nThe letter name is represented in standard pitch notation.\nExamples are \"A5\", \"Db3\", \"C#7\".\nRefer to <a href=\"https://i.imgur.com/qGQgmYr.png\">this mapping from\nletter name to midi notes.\n", "parameters": ["${1:note}"]}, {"label": "make_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### make_sound(wave, duration) \u2192 Sound\nMakes a Sound with given wave function and duration.\nThe wave function is a function: number -> number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.\n", "parameters": ["${1:wave}", "${2:duration}"]}, {"label": "midi_note_to_frequency", "meta": "func", "title": "Auto-import from sound", "description": "#### midi_note_to_frequency(note) \u2192 number\nConverts a MIDI note to its corresponding frequency.\n", "parameters": ["${1:note}"]}, {"label": "noise_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### noise_sound(duration) \u2192 Sound\nMakes a noise Sound with given duration\n", "parameters": ["${1:duration}"]}, {"label": "phase_mod", "meta": "func", "title": "Auto-import from sound", "description": "#### phase_mod(freq, duration, amount) \u2192 SoundTransformer\nReturns a Sound transformer which uses its argument\nto modulate the phase of a (carrier) sine wave\nof given frequency and duration with a given Sound.\nModulating with a low frequency Sound results in a vibrato effect.\nModulating with a Sound with frequencies comparable to\nthe sine wave frequency results in more complex wave forms.\n", "parameters": ["${1:freq}", "${2:duration}", "${3:amount}"]}, {"label": "piano", "meta": "func", "title": "Auto-import from sound", "description": "#### piano(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a piano, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "play", "meta": "func", "title": "Auto-import from sound", "description": "#### play(sound) \u2192 Sound\nPlays the given Sound using the computer\u2019s sound device\non top of any Sounds that are currently playing.\n", "parameters": ["${1:sound}"]}, {"label": "play_in_tab", "meta": "func", "title": "Auto-import from sound", "description": "#### play_in_tab(sound) \u2192 Sound\nPlays the given Sound using the computer\u2019s sound device.\nThe sound is added to a list of sounds to be played one-at-a-time\nin a Source Academy tab.\n", "parameters": ["${1:sound}"]}, {"label": "play_wave", "meta": "func", "title": "Auto-import from sound", "description": "#### play_wave(wave, duration) \u2192 Sound\nPlays the given Wave using the computer\u2019s sound device, for the duration\ngiven in seconds.\n", "parameters": ["${1:wave}", "${2:duration}"]}, {"label": "record", "meta": "func", "title": "Auto-import from sound", "description": "#### record(buffer) \u2192 Function\nRecords a sound until the returned stop function is called.\nTakes a <CODE>buffer</CODE> duration (in seconds) as argument, and\nreturns a nullary stop function <CODE>stop</CODE>. A call\n<CODE>stop()</CODE> returns a Sound promise: a nullary function\nthat returns a Sound. Example: <PRE><CODE>init\\_record();\nconst stop = record(0.5);\n// record after 0.5 seconds. Then in next query:\nconst promise = stop();\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>\n", "parameters": ["${1:buffer}"]}, {"label": "record_for", "meta": "func", "title": "Auto-import from sound", "description": "#### record_for(duration, buffer) \u2192 Function\nRecords a sound of given <CODE>duration</CODE> in seconds, after\na <CODE>buffer</CODE> also in seconds, and\nreturns a Sound promise: a nullary function\nthat returns a Sound. Example: <PRE><CODE>init\\_record();\nconst promise = record\\_for(2, 0.5);\n// In next query, you can play the promised Sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>\n", "parameters": ["${1:duration}", "${2:buffer}"]}, {"label": "sawtooth_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### sawtooth_sound(freq, duration) \u2192 Sound\nMakes a sawtooth wave Sound with given frequency and duration\n", "parameters": ["${1:freq}", "${2:duration}"]}, {"label": "silence_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### silence_sound(duration) \u2192 Sound\nMakes a silence Sound with given duration\n", "parameters": ["${1:duration}"]}, {"label": "simultaneously", "meta": "func", "title": "Auto-import from sound", "description": "#### simultaneously(list_of_sounds) \u2192 Sound\nMakes a new Sound by combining the Sounds in a given list.\nIn the result sound, the component sounds overlap such that\nthey start at the beginning of the result sound. To achieve\nthis, the amplitudes of the component sounds are added together\nand then divided by the length of the list.\n", "parameters": ["${1:list_of_sounds}"]}, {"label": "sine_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### sine_sound(freq, duration) \u2192 Sound\nMakes a sine wave Sound with given frequency and duration\n", "parameters": ["${1:freq}", "${2:duration}"]}, {"label": "square_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### square_sound(f, duration) \u2192 Sound\nMakes a square wave Sound with given frequency and duration\n", "parameters": ["${1:f}", "${2:duration}"]}, {"label": "stacking_adsr", "meta": "func", "title": "Auto-import from sound", "description": "#### stacking_adsr(waveform, base_frequency, duration, envelopes) \u2192 Sound\nReturns a Sound that results from applying a list of envelopes\nto a given wave form. The wave form is a Sound generator that\ntakes a frequency and a duration as arguments and produces a\nSound with the given frequency and duration. Each envelope is\napplied to a harmonic: the first harmonic has the given frequency,\nthe second has twice the frequency, the third three times the\nfrequency etc. The harmonics are then layered simultaneously to\nproduce the resulting Sound.\n", "parameters": ["${1:waveform}", "${2:base_frequency}", "${3:duration}", "${4:envelopes}"]}, {"label": "stop", "meta": "func", "title": "Auto-import from sound", "description": "#### stop() \u2192 void\nStops all currently playing sounds.\n", "parameters": []}, {"label": "triangle_sound", "meta": "func", "title": "Auto-import from sound", "description": "#### triangle_sound(freq, duration) \u2192 Sound\nMakes a triangle wave Sound with given frequency and duration\n", "parameters": ["${1:freq}", "${2:duration}"]}, {"label": "trombone", "meta": "func", "title": "Auto-import from sound", "description": "#### trombone(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a trombone, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "violin", "meta": "func", "title": "Auto-import from sound", "description": "#### violin(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a violin, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}], "scrabble": [{"label": "scrabble_letters", "meta": "const", "title": "Auto-import from scrabble", "description": "#### scrabble_letters:string[][]\n`scrabble_letters` is an array of arrays of strings. Each array\nof strings represents an allowed word in Scrabble and contains\nthe letters of that word as single-character strings in the\norder in which the letters appear in the word.\n"}, {"label": "scrabble_letters_tiny", "meta": "const", "title": "Auto-import from scrabble", "description": "#### scrabble_letters_tiny:string[][]o description availabl"}, {"label": "scrabble_words", "meta": "const", "title": "Auto-import from scrabble", "description": "#### scrabble_words:string[]\n`scrabble_words` is an array of strings, each representing\nan allowed word in Scrabble.\n"}, {"label": "scrabble_words_tiny", "meta": "const", "title": "Auto-import from scrabble", "description": "#### scrabble_words_tiny:string[]o description availabl"}], "stereo_sound": [{"label": "adsr", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### adsr(attack_ratio, decay_ratio, sustain_level, release_ratio) \u2192 SoundTransformer\nReturns an envelope: a function from Sound to Sound.\nWhen the adsr envelope is applied to a Sound, it returns\na new Sound with its amplitude modified according to parameters\nThe relative amplitude increases from 0 to 1 linearly over the\nattack proportion, then decreases from 1 to sustain level over the\ndecay proportion, and remains at that level until the release\nproportion when it decays back to 0.\n", "parameters": ["${1:attack_ratio}", "${2:decay_ratio}", "${3:sustain_level}", "${4:release_ratio}"]}, {"label": "bell", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### bell(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a bell, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "cello", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### cello(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a cello, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "consecutively", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### consecutively(list_of_sounds) \u2192 Sound\nMakes a new Sound by combining the sounds in a given list\nwhere the second sound is appended to the end of the first sound,\nthe third sound is appended to the end of the second sound, and\nso on. The effect is that the sounds in the list are joined end-to-end\n", "parameters": ["${1:list_of_sounds}"]}, {"label": "get_duration", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### get_duration(sound) \u2192 number\nAccesses the duration of a given Sound.\n", "parameters": ["${1:sound}"]}, {"label": "get_left_wave", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### get_left_wave(sound) \u2192 Wave\nAccesses the left wave function of a given Sound.\n", "parameters": ["${1:sound}"]}, {"label": "get_right_wave", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### get_right_wave(sound) \u2192 Wave\nAccesses the left wave function of a given Sound.\n", "parameters": ["${1:sound}"]}, {"label": "init_record", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### init_record() \u2192 string\nInitialize recording by obtaining permission\nto use the default device microphone\n", "parameters": []}, {"label": "is_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### is_sound(x) \u2192 boolean\nChecks if the argument is a Sound\n", "parameters": ["${1:x}"]}, {"label": "letter_name_to_frequency", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### letter_name_to_frequency(note) \u2192 number\nConverts a letter name to its corresponding frequency.\n", "parameters": ["${1:note}"]}, {"label": "letter_name_to_midi_note", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### letter_name_to_midi_note(note) \u2192 number\nConverts a letter name to its corresponding MIDI note.\nThe letter name is represented in standard pitch notation.\nExamples are \"A5\", \"Db3\", \"C#7\".\nRefer to <a href=\"https://i.imgur.com/qGQgmYr.png\">this mapping from\nletter name to midi notes.\n", "parameters": ["${1:note}"]}, {"label": "make_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### make_sound(wave, duration) \u2192 Sound\nMakes a Sound with given wave function and duration.\nThe wave function is a function: number -> number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.\n", "parameters": ["${1:wave}", "${2:duration}"]}, {"label": "make_stereo_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### make_stereo_sound(left_wave, right_wave, duration) \u2192 Sound\nMakes a Stereo Sound with given wave function and duration.\nThe wave function is a function: number -> number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.\n", "parameters": ["${1:left_wave}", "${2:right_wave}", "${3:duration}"]}, {"label": "midi_note_to_frequency", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### midi_note_to_frequency(note) \u2192 number\nConverts a MIDI note to its corresponding frequency.\n", "parameters": ["${1:note}"]}, {"label": "noise_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### noise_sound(duration) \u2192 Sound\nMakes a noise sound with given duration\n", "parameters": ["${1:duration}"]}, {"label": "pan", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### pan(amount) \u2192 SoundTransformer\nReturns a Sound Transformer that pans a sound based on the pan amount.\nThe input sound is first squashed to mono.\nAn amount of `-1` is a hard left pan, `0` is balanced, `1` is hard right pan.\n", "parameters": ["${1:amount}"]}, {"label": "pan_mod", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### pan_mod(modulator) \u2192 SoundTransformer\nReturns a Sound Transformer that uses a Sound to pan another Sound.\nThe modulator is treated as a mono sound and its output is used to pan\nan input Sound.\n`-1` is a hard left pan, `0` is balanced, `1` is hard right pan.\n", "parameters": ["${1:modulator}"]}, {"label": "phase_mod", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### phase_mod(freq, duration, amount) \u2192 SoundTransformer\nReturns a SoundTransformer which uses its argument\nto modulate the phase of a (carrier) sine wave\nof given frequency and duration with a given Sound.\nModulating with a low frequency Sound results in a vibrato effect.\nModulating with a Sound with frequencies comparable to\nthe sine wave frequency results in more complex wave forms.\n", "parameters": ["${1:freq}", "${2:duration}", "${3:amount}"]}, {"label": "piano", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### piano(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a piano, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "play", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### play(sound) \u2192 Sound\nPlays the given Sound using the computer\u2019s sound device\non top of any Sounds that are currently playing.\n", "parameters": ["${1:sound}"]}, {"label": "play_in_tab", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### play_in_tab(sound) \u2192 Sound\nPlays the given Sound using the computer\u2019s sound device.\nThe Sound is added to a list of Sounds to be played one-at-a-time\nin a Source Academy tab.\n", "parameters": ["${1:sound}"]}, {"label": "play_wave", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### play_wave(wave, duration) \u2192 Sound\nPlays the given Wave using the computer\u2019s sound device, for the duration\ngiven in seconds.\n", "parameters": ["${1:wave}", "${2:duration}"]}, {"label": "play_waves", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### play_waves(wave1, wave2, duration) \u2192 Sound\nPlays the given two Waves using the computer\u2019s sound device, for the duration\ngiven in seconds. The first Wave is for the left channel, the second for the\nright channel.\n", "parameters": ["${1:wave1}", "${2:wave2}", "${3:duration}"]}, {"label": "record", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### record(buffer) \u2192 Function\nRecords a sound until the returned stop function is called.\nTakes a <CODE>buffer</CODE> duration (in seconds) as argument, and\nreturns a nullary stop function <CODE>stop</CODE>. A call\n<CODE>stop()</CODE> returns a Sound promise: a nullary function\nthat returns a Sound. Example: <PRE><CODE>init\\_record();\nconst stop = record(0.5);\n// record after 0.5 seconds. Then in next query:\nconst promise = stop();\n// In next query, you can play the promised Sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>\n", "parameters": ["${1:buffer}"]}, {"label": "record_for", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### record_for(duration, buffer) \u2192 Function\nRecords a sound of given <CODE>duration</CODE> in seconds, after\na <CODE>buffer</CODE> also in seconds, and\nreturns a Sound promise: a nullary function\nthat returns a Sound. Example: <PRE><CODE>init\\_record();\nconst promise = record\\_for(2, 0.5);\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>\n", "parameters": ["${1:duration}", "${2:buffer}"]}, {"label": "sawtooth_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### sawtooth_sound(freq, duration) \u2192 Sound\nMakes a sawtooth wave sound with given frequency and duration\n", "parameters": ["${1:freq}", "${2:duration}"]}, {"label": "silence_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### silence_sound(duration) \u2192 Sound\nMakes a silence sound with given duration\n", "parameters": ["${1:duration}"]}, {"label": "simultaneously", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### simultaneously(list_of_sounds) \u2192 Sound\nMakes a new Sound by combining the sounds in a given list.\nIn the result sound, the component sounds overlap such that\nthey start at the beginning of the result sound. To achieve\nthis, the amplitudes of the component sounds are added together\nand then divided by the length of the list.\n", "parameters": ["${1:list_of_sounds}"]}, {"label": "sine_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### sine_sound(freq, duration) \u2192 Sound\nMakes a sine wave sound with given frequency and duration\n", "parameters": ["${1:freq}", "${2:duration}"]}, {"label": "square_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### square_sound(f, duration) \u2192 Sound\nMakes a square wave sound with given frequency and duration\n", "parameters": ["${1:f}", "${2:duration}"]}, {"label": "squash", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### squash(sound) \u2192 Sound\nCenters a Sound by averaging its left and right channels,\nresulting in an effectively mono sound.\n", "parameters": ["${1:sound}"]}, {"label": "stacking_adsr", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### stacking_adsr(waveform, base_frequency, duration, envelopes) \u2192 Sound\nReturns a Sound that results from applying a list of envelopes\nto a given wave form. The wave form is a Sound generator that\ntakes a frequency and a duration as arguments and produces a\nSound with the given frequency and duration. Each envelope is\napplied to a harmonic: the first harmonic has the given frequency,\nthe second has twice the frequency, the third three times the\nfrequency etc. The harmonics are then layered simultaneously to\nproduce the resulting Sound.\n", "parameters": ["${1:waveform}", "${2:base_frequency}", "${3:duration}", "${4:envelopes}"]}, {"label": "stop", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### stop() \u2192 void\nStops all currently playing sounds.\n", "parameters": []}, {"label": "triangle_sound", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### triangle_sound(freq, duration) \u2192 Sound\nMakes a triangle wave sound with given frequency and duration\n", "parameters": ["${1:freq}", "${2:duration}"]}, {"label": "trombone", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### trombone(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a trombone, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}, {"label": "violin", "meta": "func", "title": "Auto-import from stereo_sound", "description": "#### violin(note, duration) \u2192 Sound\nreturns a Sound reminiscent of a violin, playing\na given note for a given duration\n", "parameters": ["${1:note}", "${2:duration}"]}], "game": [{"label": "add", "meta": "func", "title": "Auto-import from game", "description": "#### add(obj) \u2192 GameObject | undefined\nAdd the object to the scene. Only objects added to the scene\nwill appear.\n", "parameters": ["${1:obj}"]}, {"label": "add_keyboard_listener", "meta": "func", "title": "Auto-import from game", "description": "#### add_keyboard_listener(key, event, callback) \u2192 GameObject\nAttach a listener to the object. The callback will be executed\nwhen the event is emitted.\nMutate the object.\n\nFor all available events, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Input.Events.html\n\nFor list of keycodes, see:\nhttps://github.com/photonstorm/phaser/blob/v3.22.0/src/input/keyboard/keys/KeyCodes.js\n", "parameters": ["${1:key}", "${2:event}", "${3:callback}"]}, {"label": "add_listener", "meta": "func", "title": "Auto-import from game", "description": "#### add_listener(obj, event, callback) \u2192 GameObject | undefined\nAttach a listener to the object. The callback will be executed\nwhen the event is emitted.\nMutate the object.\n\nFor all available events, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Input.Events.html\n", "parameters": ["${1:obj}", "${2:event}", "${3:callback}"]}, {"label": "add_to_container", "meta": "func", "title": "Auto-import from game", "description": "#### add_to_container(container, obj) \u2192 GameObject | undefined\nAdd the given game object to the container.\nMutates the container.\n", "parameters": ["${1:container}", "${2:obj}"]}, {"label": "add_tween", "meta": "func", "title": "Auto-import from game", "description": "#### add_tween(obj, config) \u2192 Promise<GameObject | undefined>\nCreates a tween to the object and plays it.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:config}"]}, {"label": "create_anim", "meta": "func", "title": "Auto-import from game", "description": "#### create_anim(anim_config) \u2192 boolean\nCreate a new animation and add it to the available animations.\nAnimations are global i.e. once created, it can be used anytime, anywhere.\n\nNOTE: Anims DO NOT need to be added into the scene to be used.\nIt is automatically added to the scene when it is created.\n\nWill return true if the animation key is valid\n(key is specified within the anim\\_config); false if the key\nis already in use.\n", "parameters": ["${1:anim_config}"]}, {"label": "create_anim_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_anim_config(anims_key, anim_frames, frame_rate, duration, repeat, yoyo, show_on_start, hide_on_complete) \u2192 ObjectConfig\nCreate anims config, can be used to configure anims\n\nFor more details about the config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Animations.html#.Animation\n", "parameters": ["${1:anims_key}", "${2:anim_frames}", "${3:frame_rate}", "${4:duration}", "${5:repeat}", "${6:yoyo}", "${7:show_on_start}", "${8:hide_on_complete}"]}, {"label": "create_anim_frame_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_anim_frame_config(key, duration, visible) \u2192 ObjectConfig\nCreate animation frame config, can be used to configure a specific frame\nwithin an animation.\n\nThe key should refer to an image that is already loaded.\nTo make frame\\_config from spritesheet based on its frames,\nuse create\\_anim\\_spritesheet\\_frame\\_configs instead.\n", "parameters": ["${1:key}", "${2:duration}", "${3:visible}"]}, {"label": "create_anim_spritesheet_frame_configs", "meta": "func", "title": "Auto-import from game", "description": "#### create_anim_spritesheet_frame_configs(key) \u2192 ObjectConfig[] | undefined\nCreate list of animation frame config, can be used directly as part of\nanim\\_config's `frames` parameter.\n\nThis function will generate list of frame configs based on the\nspritesheet\\_config attached to the associated spritesheet.\nThis function requires that the given key is a spritesheet key\ni.e. a key associated with loaded spritesheet, loaded in using\nload\\_spritesheet function.\n\nWill return empty frame configs if key is not associated with\na spritesheet.\n", "parameters": ["${1:key}"]}, {"label": "create_award", "meta": "func", "title": "Auto-import from game", "description": "#### create_award(x, y, award_key) \u2192 GameObject\nCreate an award using the key associated with the award.\nThe award key can be obtained from the Awards Hall or\nAwards menu, after attaining the award.\n\nValid award will have an on-hover VERIFIED tag to distinguish\nit from images created by create\\_image.\n\nIf student does not possess the award, this function will\nreturn a untagged, default image.\n", "parameters": ["${1:x}", "${2:y}", "${3:award_key}"]}, {"label": "create_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_config(lst) \u2192 ObjectConfig\nTransforms the given list of pairs into an object config. The list follows\nthe format of list(pair(key1, value1), pair(key2, value2), ...).\n\ne.g list(pair(\"alpha\", 0), pair(\"duration\", 1000))\n", "parameters": ["${1:lst}"]}, {"label": "create_container", "meta": "func", "title": "Auto-import from game", "description": "#### create_container(x, y) \u2192 GameObject\nCreate a container object. Container is able to contain any other game object,\nand the positions of contained game object will be relative to the container.\n\nRendering the container as visible or invisible will also affect the contained\ngame object.\n\nContainer can also contain another container.\n\n0, 0 is located at the top, left hand side.\n\nFor more details about container object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Container.html\n", "parameters": ["${1:x}", "${2:y}"]}, {"label": "create_ellipse", "meta": "func", "title": "Auto-import from game", "description": "#### create_ellipse(x, y, width, height, fill, alpha) \u2192 GameObject\nCreate an ellipse object.\n", "parameters": ["${1:x}", "${2:y}", "${3:width}", "${4:height}", "${5:fill}", "${6:alpha}"]}, {"label": "create_image", "meta": "func", "title": "Auto-import from game", "description": "#### create_image(x, y, asset_key) \u2192 GameObject | undefined\nCreate an image using the key associated with a loaded image.\nIf key is not associated with any loaded image, throws error.\n\n0, 0 is located at the top, left hand side.\n", "parameters": ["${1:x}", "${2:y}", "${3:asset_key}"]}, {"label": "create_interactive_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_interactive_config(draggable, use_hand_cursor, pixel_perfect, alpha_tolerance) \u2192 ObjectConfig\nCreate interactive config object, can be used to configure interactive settings.\n\nFor more details about interactive config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Input.html#.InputConfiguration\n", "parameters": ["${1:draggable}", "${2:use_hand_cursor}", "${3:pixel_perfect}", "${4:alpha_tolerance}"]}, {"label": "create_rect", "meta": "func", "title": "Auto-import from game", "description": "#### create_rect(x, y, width, height, fill, alpha) \u2192 GameObject\nCreate a rectangle object.\n\n0, 0 is located at the top, left hand side.\n", "parameters": ["${1:x}", "${2:y}", "${3:width}", "${4:height}", "${5:fill}", "${6:alpha}"]}, {"label": "create_sound_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_sound_config(mute, volume, rate, detune, seek, loop, delay) \u2192 ObjectConfig\nCreate sound config object, can be used to configure sound settings.\n\nFor more details about sound config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Sound.html#.SoundConfig\n", "parameters": ["${1:mute}", "${2:volume}", "${3:rate}", "${4:detune}", "${5:seek}", "${6:loop}", "${7:delay}"]}, {"label": "create_spritesheet_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_spritesheet_config(frame_width, frame_height, start_frame, margin, spacing) \u2192 ObjectConfig\nCreate spritesheet config, can be used to configure the frames within the\nspritesheet. Can be used as config at load\\_spritesheet.\n", "parameters": ["${1:frame_width}", "${2:frame_height}", "${3:start_frame}", "${4:margin}", "${5:spacing}"]}, {"label": "create_text", "meta": "func", "title": "Auto-import from game", "description": "#### create_text(x, y, text, config) \u2192 GameObject\nCreate a text object.\n\n0, 0 is located at the top, left hand side.\n", "parameters": ["${1:x}", "${2:y}", "${3:text}", "${4:config}"]}, {"label": "create_text_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_text_config(font_family, font_size, color, stroke, stroke_thickness, align) \u2192 ObjectConfig\nCreate text config object, can be used to stylise text object.\n\nfont\\_family: for available font\\_family, see:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-family#Valid\\_family\\_names\n\nalign: must be either 'left', 'right', 'center', or 'justify'\n\nFor more details about text config, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.GameObjects.Text.html#.TextStyle\n", "parameters": ["${1:font_family}", "${2:font_size}", "${3:color}", "${4:stroke}", "${5:stroke_thickness}", "${6:align}"]}, {"label": "create_tween_config", "meta": "func", "title": "Auto-import from game", "description": "#### create_tween_config(target_prop, target_value, delay, duration, ease, on_complete, yoyo, loop, loop_delay, on_loop) \u2192 ObjectConfig\nCreate tween config object, can be used to configure tween settings.\n\nFor more details about tween config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Tweens.html#.TweenBuilderConfig\n", "parameters": ["${1:target_prop}", "${2:target_value}", "${3:delay}", "${4:duration}", "${5:ease}", "${6:on_complete}", "${7:yoyo}", "${8:loop}", "${9:loop_delay}", "${10:on_loop}"]}, {"label": "destroy_obj", "meta": "func", "title": "Auto-import from game", "description": "#### destroy_obj(obj) \u2192 void\nDestroy the given game object. Destroyed game object\nis removed from the scene, and all of its listeners\nis also removed.\n", "parameters": ["${1:obj}"]}, {"label": "get_screen_display_height", "meta": "func", "title": "Auto-import from game", "description": "#### get_screen_display_height() \u2192 number\nGet game screen display height (accounting window size).\n", "parameters": []}, {"label": "get_screen_display_width", "meta": "func", "title": "Auto-import from game", "description": "#### get_screen_display_width() \u2192 number\nGet game screen display width (accounting window size).\n", "parameters": []}, {"label": "get_screen_height", "meta": "func", "title": "Auto-import from game", "description": "#### get_screen_height() \u2192 number\nGet in-game screen height.\n", "parameters": []}, {"label": "get_screen_width", "meta": "func", "title": "Auto-import from game", "description": "#### get_screen_width() \u2192 number\nGet in-game screen width.\n", "parameters": []}, {"label": "load_image", "meta": "func", "title": "Auto-import from game", "description": "#### load_image(key, url) \u2192 void\nLoad the image asset into the scene for use. All images\nmust be loaded before used in create\\_image.\n", "parameters": ["${1:key}", "${2:url}"]}, {"label": "load_sound", "meta": "func", "title": "Auto-import from game", "description": "#### load_sound(key, url) \u2192 void\nLoad the sound asset into the scene for use. All sound\nmust be loaded before used in play\\_sound.\n", "parameters": ["${1:key}", "${2:url}"]}, {"label": "load_spritesheet", "meta": "func", "title": "Auto-import from game", "description": "#### load_spritesheet(key, url, spritesheet_config) \u2192 void\nLoad the spritesheet into the scene for use. All spritesheet must\nbe loaded before used in create\\_image.\n", "parameters": ["${1:key}", "${2:url}", "${3:spritesheet_config}"]}, {"label": "play_anim_on_image", "meta": "func", "title": "Auto-import from game", "description": "#### play_anim_on_image(image, anims_key) \u2192 GameObject | undefined\nStart playing the given animation on image game object.\n", "parameters": ["${1:image}", "${2:anims_key}"]}, {"label": "play_sound", "meta": "func", "title": "Auto-import from game", "description": "#### play_sound(key, config) \u2192 void\nPlay the sound associated with the key.\nThrows error if key is non-existent.\n", "parameters": ["${1:key}", "${2:config}"]}, {"label": "prepend_remote_url", "meta": "func", "title": "Auto-import from game", "description": "#### prepend_remote_url(asset_key) \u2192 string\nPrepend the given asset key with the remote path (S3 path).\n", "parameters": ["${1:asset_key}"]}, {"label": "remove_listener", "meta": "func", "title": "Auto-import from game", "description": "#### remove_listener(listener) \u2192 boolean\nDeactivate and remove listener.\n", "parameters": ["${1:listener}"]}, {"label": "set_alpha", "meta": "func", "title": "Auto-import from game", "description": "#### set_alpha(obj, alpha) \u2192 GameObject | undefined\nSet the alpha of the object.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:alpha}"]}, {"label": "set_display_size", "meta": "func", "title": "Auto-import from game", "description": "#### set_display_size(obj, x, y) \u2192 GameObject | undefined\nSet the display size of the object.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:x}", "${3:y}"]}, {"label": "set_flip", "meta": "func", "title": "Auto-import from game", "description": "#### set_flip(obj, x, y) \u2192 GameObject | undefined\nSets the horizontal and flipped state of the object.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:x}", "${3:y}"]}, {"label": "set_interactive", "meta": "func", "title": "Auto-import from game", "description": "#### set_interactive(obj, config) \u2192 GameObject | undefined\nSet the interactivity of the object.\nMutate the object.\n\nRectangle and Ellipse are not able to receive configs, only boolean\ni.e. set\\_interactive(rect, true); set\\_interactive(ellipse, false)\n", "parameters": ["${1:obj}", "${2:config}"]}, {"label": "set_origin", "meta": "func", "title": "Auto-import from game", "description": "#### set_origin(obj, x, y) \u2192 GameObject | undefined\nSet the origin in which all position related will be relative to.\nIn other words, the anchor of the object.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:x}", "${3:y}"]}, {"label": "set_position", "meta": "func", "title": "Auto-import from game", "description": "#### set_position(obj, x, y) \u2192 GameObject | undefined\nSet the position of the game object\nMutate the object\n", "parameters": ["${1:obj}", "${2:x}", "${3:y}"]}, {"label": "set_rotation", "meta": "func", "title": "Auto-import from game", "description": "#### set_rotation(obj, rad) \u2192 GameObject | undefined\nSet the rotation of the object.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:rad}"]}, {"label": "set_scale", "meta": "func", "title": "Auto-import from game", "description": "#### set_scale(obj, x, y) \u2192 GameObject | undefined\nSet the scale of the object.\nMutate the object.\n", "parameters": ["${1:obj}", "${2:x}", "${3:y}"]}], "rune": [{"label": "blank", "meta": "const", "title": "Auto-import from rune", "description": "#### blank:Rune\nRune with the shape of a blank square\n"}, {"label": "circle", "meta": "const", "title": "Auto-import from rune", "description": "#### circle:Rune\nRune with the shape of a circle\n"}, {"label": "corner", "meta": "const", "title": "Auto-import from rune", "description": "#### corner:Rune\nRune with black triangle,\nfilling upper right corner\n"}, {"label": "heart", "meta": "const", "title": "Auto-import from rune", "description": "#### heart:Rune\nRune with the shape of a heart\n"}, {"label": "nova", "meta": "const", "title": "Auto-import from rune", "description": "#### nova:Rune\nRune with the shape of two overlapping\ntriangles, residing in the upper half\nof the shape\n"}, {"label": "pentagram", "meta": "const", "title": "Auto-import from rune", "description": "#### pentagram:Rune\nRune with the shape of a pentagram\n"}, {"label": "rcross", "meta": "const", "title": "Auto-import from rune", "description": "#### rcross:Rune\nRune with the shape of a\nsmall square inside a large square,\neach diagonally split into a\nblack and white half\n"}, {"label": "ribbon", "meta": "const", "title": "Auto-import from rune", "description": "#### ribbon:Rune\nRune with the shape of a ribbon\nwinding outwards in an anticlockwise spiral\n"}, {"label": "sail", "meta": "const", "title": "Auto-import from rune", "description": "#### sail:Rune\nRune with the shape of a sail\n"}, {"label": "square", "meta": "const", "title": "Auto-import from rune", "description": "#### square:Rune\nRune with the shape of a full square\n"}, {"label": "triangle", "meta": "const", "title": "Auto-import from rune", "description": "#### triangle:Rune\nRune with the shape of a triangle\n"}, {"label": "anaglyph", "meta": "func", "title": "Auto-import from rune", "description": "#### anaglyph(rune) \u2192 Rune\nRenders the specified Rune in a tab as an anaglyph. Use 3D glasses to view the\nanaglyph.\n", "parameters": ["${1:rune}"]}, {"label": "animate_anaglyph", "meta": "func", "title": "Auto-import from rune", "description": "#### animate_anaglyph(duration, fps, func) \u2192 AnimatedRune\nCreate an animation of anaglyph runes\n", "parameters": ["${1:duration}", "${2:fps}", "${3:func}"]}, {"label": "animate_rune", "meta": "func", "title": "Auto-import from rune", "description": "#### animate_rune(duration, fps, func) \u2192 AnimatedRune\nCreate an animation of runes\n", "parameters": ["${1:duration}", "${2:fps}", "${3:func}"]}, {"label": "beside", "meta": "func", "title": "Auto-import from rune", "description": "#### beside(rune1, rune2) \u2192 Rune\nMakes a new Rune from two given Runes by\nplacing the first on the left of the second,\nboth occupying equal portions of the width\nof the result\n", "parameters": ["${1:rune1}", "${2:rune2}"]}, {"label": "beside_frac", "meta": "func", "title": "Auto-import from rune", "description": "#### beside_frac(frac, rune1, rune2) \u2192 Rune\nMakes a new Rune from two given Runes by\nplacing the first on the left of the second\nsuch that the first one occupies frac\nportion of the width of the result and\nthe second the rest\n", "parameters": ["${1:frac}", "${2:rune1}", "${3:rune2}"]}, {"label": "black", "meta": "func", "title": "Auto-import from rune", "description": "#### black(rune) \u2192 Rune\nColors the given rune black (#000000).\n", "parameters": ["${1:rune}"]}, {"label": "blue", "meta": "func", "title": "Auto-import from rune", "description": "#### blue(rune) \u2192 Rune\nColors the given rune blue (#2196F3).\n", "parameters": ["${1:rune}"]}, {"label": "brown", "meta": "func", "title": "Auto-import from rune", "description": "#### brown(rune) \u2192 Rune\nColors the given rune brown.\n", "parameters": ["${1:rune}"]}, {"label": "color", "meta": "func", "title": "Auto-import from rune", "description": "#### color(rune, r, g, b) \u2192 Rune\nAdds color to rune by specifying\nthe red, green, blue (RGB) value, ranging from 0.0 to 1.0.\nRGB is additive: if all values are 1, the color is white,\nand if all values are 0, the color is black.\n", "parameters": ["${1:rune}", "${2:r}", "${3:g}", "${4:b}"]}, {"label": "flip_horiz", "meta": "func", "title": "Auto-import from rune", "description": "#### flip_horiz(rune) \u2192 Rune\nMakes a new Rune from a given Rune by\nflipping it around a vertical axis,\ncreating a mirror image\n", "parameters": ["${1:rune}"]}, {"label": "flip_vert", "meta": "func", "title": "Auto-import from rune", "description": "#### flip_vert(rune) \u2192 Rune\nMakes a new Rune from a given Rune by\nflipping it around a horizontal axis,\nturning it upside down\n", "parameters": ["${1:rune}"]}, {"label": "from_url", "meta": "func", "title": "Auto-import from rune", "description": "#### from_url(imageUrl) \u2192 Rune\nCreate a rune using the image provided in the url\n", "parameters": ["${1:imageUrl}"]}, {"label": "green", "meta": "func", "title": "Auto-import from rune", "description": "#### green(rune) \u2192 Rune\nColors the given rune green (#4CAF50).\n", "parameters": ["${1:rune}"]}, {"label": "hollusion", "meta": "func", "title": "Auto-import from rune", "description": "#### hollusion(rune) \u2192 Rune\nRenders the specified Rune in a tab as a hollusion, with a default magnitude\nof 0.1.\n", "parameters": ["${1:rune}"]}, {"label": "hollusion_magnitude", "meta": "func", "title": "Auto-import from rune", "description": "#### hollusion_magnitude(rune, magnitude) \u2192 Rune\nRenders the specified Rune in a tab as a hollusion, using the specified\nmagnitude.\n", "parameters": ["${1:rune}", "${2:magnitude}"]}, {"label": "indigo", "meta": "func", "title": "Auto-import from rune", "description": "#### indigo(rune) \u2192 Rune\nColors the given rune indigo (#3F51B5).\n", "parameters": ["${1:rune}"]}, {"label": "make_cross", "meta": "func", "title": "Auto-import from rune", "description": "#### make_cross(rune) \u2192 Rune\nMakes a new Rune from a given Rune by\narranging into a square for copies of the\ngiven Rune in different orientations\n", "parameters": ["${1:rune}"]}, {"label": "orange", "meta": "func", "title": "Auto-import from rune", "description": "#### orange(rune) \u2192 Rune\nColors the given rune orange (#FF9800).\n", "parameters": ["${1:rune}"]}, {"label": "overlay", "meta": "func", "title": "Auto-import from rune", "description": "#### overlay(rune1, rune2) \u2192 Rune\nThe depth range of the z-axis of a rune is [0,-1], this function maps the depth range of rune1 and rune2 to [0,-0.5] and [-0.5,-1] respectively.\n", "parameters": ["${1:rune1}", "${2:rune2}"]}, {"label": "overlay_frac", "meta": "func", "title": "Auto-import from rune", "description": "#### overlay_frac(frac, rune1, rune2) \u2192 Rune\nThe depth range of the z-axis of a rune is [0,-1], this function gives a [0, -frac] of the depth range to rune1 and the rest to rune2.\n", "parameters": ["${1:frac}", "${2:rune1}", "${3:rune2}"]}, {"label": "pink", "meta": "func", "title": "Auto-import from rune", "description": "#### pink(rune) \u2192 Rune\nColors the given rune pink (#E91E63s).\n", "parameters": ["${1:rune}"]}, {"label": "purple", "meta": "func", "title": "Auto-import from rune", "description": "#### purple(rune) \u2192 Rune\nColors the given rune purple (#AA00FF).\n", "parameters": ["${1:rune}"]}, {"label": "quarter_turn_left", "meta": "func", "title": "Auto-import from rune", "description": "#### quarter_turn_left(rune) \u2192 Rune\nMakes a new Rune from a given Rune\nby turning it a quarter-turn in\nanti-clockwise direction.\n", "parameters": ["${1:rune}"]}, {"label": "quarter_turn_right", "meta": "func", "title": "Auto-import from rune", "description": "#### quarter_turn_right(rune) \u2192 Rune\nMakes a new Rune from a given Rune\nby turning it a quarter-turn around the centre in\nclockwise direction.\n", "parameters": ["${1:rune}"]}, {"label": "random_color", "meta": "func", "title": "Auto-import from rune", "description": "#### random_color(rune) \u2192 Rune\nGives random color to the given rune.\nThe color is chosen randomly from the following nine\ncolors: red, pink, purple, indigo, blue, green, yellow, orange, brown\n", "parameters": ["${1:rune}"]}, {"label": "red", "meta": "func", "title": "Auto-import from rune", "description": "#### red(rune) \u2192 Rune\nColors the given rune red (#F44336).\n", "parameters": ["${1:rune}"]}, {"label": "repeat_pattern", "meta": "func", "title": "Auto-import from rune", "description": "#### repeat_pattern(n, pattern, initial) \u2192 Rune\nApplies a given function n times to an initial value\n", "parameters": ["${1:n}", "${2:pattern}", "${3:initial}"]}, {"label": "rotate", "meta": "func", "title": "Auto-import from rune", "description": "#### rotate(rad, rune) \u2192 Rune\nRotates a given Rune by a given angle,\ngiven in radians, in anti-clockwise direction.\nNote that parts of the Rune\nmay be cropped as a result.\n", "parameters": ["${1:rad}", "${2:rune}"]}, {"label": "scale", "meta": "func", "title": "Auto-import from rune", "description": "#### scale(ratio, rune) \u2192 Rune\nScales a given Rune by a given factor in both x and y direction\n", "parameters": ["${1:ratio}", "${2:rune}"]}, {"label": "scale_independent", "meta": "func", "title": "Auto-import from rune", "description": "#### scale_independent(ratio_x, ratio_y, rune) \u2192 Rune\nScales a given Rune by separate factors in x and y direction\n", "parameters": ["${1:ratio_x}", "${2:ratio_y}", "${3:rune}"]}, {"label": "show", "meta": "func", "title": "Auto-import from rune", "description": "#### show(rune) \u2192 Rune\nRenders the specified Rune in a tab as a basic drawing.\n", "parameters": ["${1:rune}"]}, {"label": "stack", "meta": "func", "title": "Auto-import from rune", "description": "#### stack(rune1, rune2) \u2192 Rune\nMakes a new Rune from two given Runes by\nplacing the first on top of the second, each\noccupying equal parts of the height of the\nresult\n", "parameters": ["${1:rune1}", "${2:rune2}"]}, {"label": "stack_frac", "meta": "func", "title": "Auto-import from rune", "description": "#### stack_frac(frac, rune1, rune2) \u2192 Rune\nMakes a new Rune from two given Runes by\nplacing the first on top of the second\nsuch that the first one occupies frac\nportion of the height of the result and\nthe second the rest\n", "parameters": ["${1:frac}", "${2:rune1}", "${3:rune2}"]}, {"label": "stackn", "meta": "func", "title": "Auto-import from rune", "description": "#### stackn(n, rune) \u2192 Rune\nMakes a new Rune from a given Rune\nby vertically stacking n copies of it\n", "parameters": ["${1:n}", "${2:rune}"]}, {"label": "translate", "meta": "func", "title": "Auto-import from rune", "description": "#### translate(x, y, rune) \u2192 Rune\nTranslates a given Rune by given values in x and y direction\n", "parameters": ["${1:x}", "${2:y}", "${3:rune}"]}, {"label": "turn_upside_down", "meta": "func", "title": "Auto-import from rune", "description": "#### turn_upside_down(rune) \u2192 Rune\nMakes a new Rune from a given Rune\nby turning it upside-down\n", "parameters": ["${1:rune}"]}, {"label": "white", "meta": "func", "title": "Auto-import from rune", "description": "#### white(rune) \u2192 Rune\nColors the given rune white (#FFFFFF).\n", "parameters": ["${1:rune}"]}, {"label": "yellow", "meta": "func", "title": "Auto-import from rune", "description": "#### yellow(rune) \u2192 Rune\nColors the given rune yellow (#FFEB3B).\n", "parameters": ["${1:rune}"]}], "rune_in_words": [{"label": "blank", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### blank:string\nRune with the shape of a blank square\n"}, {"label": "circle", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### circle:string\nRune with the shape of a circle\n"}, {"label": "corner", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### corner:string\nRune with black triangle,\nfilling upper right corner\n"}, {"label": "heart", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### heart:string\nRune with the shape of a heart\n"}, {"label": "nova", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### nova:string\nRune with the shape of two overlapping\ntriangles, residing in the upper half\nof the shape\n"}, {"label": "pentagram", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### pentagram:string\nRune with the shape of a pentagram\n"}, {"label": "rcross", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### rcross:string\nRune with the shape of a\nsmall square inside a large square,\neach diagonally split into a\nblack and white half\n"}, {"label": "ribbon", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### ribbon:string\nRune with the shape of a ribbon\nwinding outwards in an anticlockwise spiral\n"}, {"label": "sail", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### sail:string\nRune with the shape of a sail\n"}, {"label": "square", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### square:string\nRune with the shape of a full square\n"}, {"label": "triangle", "meta": "const", "title": "Auto-import from rune_in_words", "description": "#### triangle:string\nRune with the shape of a triangle\n"}, {"label": "anaglyph", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### anaglyph(rune) \u2192 string\nRenders the specified Rune in a tab as an anaglyph. Use 3D glasses to view the\nanaglyph.\n", "parameters": ["${1:rune}"]}, {"label": "beside", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### beside(rune1, rune2) \u2192 string\nMakes a new Rune from two given Runes by\nplacing the first on the left of the second,\nboth occupying equal portions of the width\nof the result\n", "parameters": ["${1:rune1}", "${2:rune2}"]}, {"label": "beside_frac", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### beside_frac(frac, rune1, rune2) \u2192 string\nMakes a new Rune from two given Runes by\nplacing the first on the left of the second\nsuch that the first one occupies frac\nportion of the width of the result and\nthe second the rest\n", "parameters": ["${1:frac}", "${2:rune1}", "${3:rune2}"]}, {"label": "black", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### black(rune) \u2192 string\nColors the given rune black (#000000).\n", "parameters": ["${1:rune}"]}, {"label": "blue", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### blue(rune) \u2192 string\nColors the given rune blue (#2196F3).\n", "parameters": ["${1:rune}"]}, {"label": "brown", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### brown(rune) \u2192 string\nColors the given rune brown.\n", "parameters": ["${1:rune}"]}, {"label": "color", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### color(rune, r, g, b) \u2192 string\nAdds color to rune by specifying\nthe red, green, blue (RGB) value, ranging from 0.0 to 1.0.\nRGB is additive: if all values are 1, the color is white,\nand if all values are 0, the color is black.\n", "parameters": ["${1:rune}", "${2:r}", "${3:g}", "${4:b}"]}, {"label": "flip_horiz", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### flip_horiz(rune) \u2192 string\nMakes a new Rune from a given Rune by\nflipping it around a vertical axis,\ncreating a mirror image\n", "parameters": ["${1:rune}"]}, {"label": "flip_vert", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### flip_vert(rune) \u2192 string\nMakes a new Rune from a given Rune by\nflipping it around a horizontal axis,\nturning it upside down\n", "parameters": ["${1:rune}"]}, {"label": "from_url", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### from_url(imageUrl) \u2192 string\nCreate a rune using the image provided in the url\n", "parameters": ["${1:imageUrl}"]}, {"label": "green", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### green(rune) \u2192 string\nColors the given rune green (#4CAF50).\n", "parameters": ["${1:rune}"]}, {"label": "hollusion", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### hollusion(rune) \u2192 string\nRenders the specified Rune in a tab as a hollusion, with a default magnitude\nof 0.1.\n", "parameters": ["${1:rune}"]}, {"label": "indigo", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### indigo(rune) \u2192 string\nColors the given rune indigo (#3F51B5).\n", "parameters": ["${1:rune}"]}, {"label": "make_cross", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### make_cross(rune) \u2192 string\nMakes a new Rune from a given Rune by\narranging into a square for copies of the\ngiven Rune in different orientations\n", "parameters": ["${1:rune}"]}, {"label": "orange", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### orange(rune) \u2192 string\nColors the given rune orange (#FF9800).\n", "parameters": ["${1:rune}"]}, {"label": "overlay", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### overlay(rune1, rune2) \u2192 string\nThe depth range of the z-axis of a rune is [0,-1], this function maps the depth range of rune1 and rune2 to [0,-0.5] and [-0.5,-1] respectively.\n", "parameters": ["${1:rune1}", "${2:rune2}"]}, {"label": "overlay_frac", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### overlay_frac(frac, rune1, rune2) \u2192 string\nThe depth range of the z-axis of a rune is [0,-1], this function gives a [0, -frac] of the depth range to rune1 and the rest to rune2.\n", "parameters": ["${1:frac}", "${2:rune1}", "${3:rune2}"]}, {"label": "pink", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### pink(rune) \u2192 string\nColors the given rune pink (#E91E63s).\n", "parameters": ["${1:rune}"]}, {"label": "purple", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### purple(rune) \u2192 string\nColors the given rune purple (#AA00FF).\n", "parameters": ["${1:rune}"]}, {"label": "quarter_turn_left", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### quarter_turn_left(rune) \u2192 string\nMakes a new Rune from a given Rune\nby turning it a quarter-turn in\nanti-clockwise direction.\n", "parameters": ["${1:rune}"]}, {"label": "quarter_turn_right", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### quarter_turn_right(rune) \u2192 string\nMakes a new Rune from a given Rune\nby turning it a quarter-turn around the centre in\nclockwise direction.\n", "parameters": ["${1:rune}"]}, {"label": "random_color", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### random_color(rune) \u2192 string\nGives random color to the given rune.\nThe color is chosen randomly from the following nine\ncolors: red, pink, purple, indigo, blue, green, yellow, orange, brown\n", "parameters": ["${1:rune}"]}, {"label": "red", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### red(rune) \u2192 string\nColors the given rune red (#F44336).\n", "parameters": ["${1:rune}"]}, {"label": "repeat_pattern", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### repeat_pattern(n, pattern, initial) \u2192 string\nApplies a given function n times to an initial value\n", "parameters": ["${1:n}", "${2:pattern}", "${3:initial}"]}, {"label": "rotate", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### rotate(rad, rune) \u2192 string\nRotates a given Rune by a given angle,\ngiven in radians, in anti-clockwise direction.\nNote that parts of the Rune\nmay be cropped as a result.\n", "parameters": ["${1:rad}", "${2:rune}"]}, {"label": "scale", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### scale(ratio, rune) \u2192 string\nScales a given Rune by a given factor in both x and y direction\n", "parameters": ["${1:ratio}", "${2:rune}"]}, {"label": "scale_independent", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### scale_independent(ratio_x, ratio_y, rune) \u2192 string\nScales a given Rune by separate factors in x and y direction\n", "parameters": ["${1:ratio_x}", "${2:ratio_y}", "${3:rune}"]}, {"label": "show", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### show(rune) \u2192 string\nRenders the specified Rune in a tab as a basic drawing.\n", "parameters": ["${1:rune}"]}, {"label": "stack", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### stack(rune1, rune2) \u2192 string\nMakes a new Rune from two given Runes by\nplacing the first on top of the second, each\noccupying equal parts of the height of the\nresult\n", "parameters": ["${1:rune1}", "${2:rune2}"]}, {"label": "stack_frac", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### stack_frac(frac, rune1, rune2) \u2192 string\nMakes a new Rune from two given Runes by\nplacing the first on top of the second\nsuch that the first one occupies frac\nportion of the height of the result and\nthe second the rest\n", "parameters": ["${1:frac}", "${2:rune1}", "${3:rune2}"]}, {"label": "stackn", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### stackn(n, rune) \u2192 string\nMakes a new Rune from a given Rune\nby vertically stacking n copies of it\n", "parameters": ["${1:n}", "${2:rune}"]}, {"label": "translate", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### translate(x, y, rune) \u2192 string\nTranslates a given Rune by given values in x and y direction\n", "parameters": ["${1:x}", "${2:y}", "${3:rune}"]}, {"label": "turn_upside_down", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### turn_upside_down(rune) \u2192 string\nMakes a new Rune from a given Rune\nby turning it upside-down\n", "parameters": ["${1:rune}"]}, {"label": "white", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### white(rune) \u2192 string\nColors the given rune white (#FFFFFF).\n", "parameters": ["${1:rune}"]}, {"label": "yellow", "meta": "func", "title": "Auto-import from rune_in_words", "description": "#### yellow(rune) \u2192 string\nColors the given rune yellow (#FFEB3B).\n", "parameters": ["${1:rune}"]}], "sound_matrix": [{"label": "clear_matrix", "meta": "unknown", "title": "Auto-import from sound_matrix", "description": ""}, {"label": "ToneMatrix", "meta": "const", "title": "Auto-import from sound_matrix", "description": "#### ToneMatrix:Objecto description availabl"}, {"label": "clear_all_timeout", "meta": "func", "title": "Auto-import from sound_matrix", "description": "#### clear_all_timeout() \u2192 voido description availabl", "parameters": []}, {"label": "get_matrix", "meta": "func", "title": "Auto-import from sound_matrix", "description": "#### get_matrix() \u2192 Listo description availabl", "parameters": []}, {"label": "set_timeout", "meta": "func", "title": "Auto-import from sound_matrix", "description": "#### set_timeout(f, t) \u2192 voido description availabl", "parameters": ["${1:f}", "${2:t}"]}], "csg": [{"label": "black", "meta": "const", "title": "Auto-import from csg", "description": "#### black:string\nA hex color code for black (#000000).\n"}, {"label": "blue", "meta": "const", "title": "Auto-import from csg", "description": "#### blue:string\nA hex color code for blue (#5555FF).\n"}, {"label": "crimson", "meta": "const", "title": "Auto-import from csg", "description": "#### crimson:string\nA hex color code for dark red (#AA0000).\n"}, {"label": "cyan", "meta": "const", "title": "Auto-import from csg", "description": "#### cyan:string\nA hex color code for cyan (#55FFFF).\n"}, {"label": "gray", "meta": "const", "title": "Auto-import from csg", "description": "#### gray:string\nA hex color code for dark gray (#555555).\n"}, {"label": "green", "meta": "const", "title": "Auto-import from csg", "description": "#### green:string\nA hex color code for green (#00AA00).\n"}, {"label": "lime", "meta": "const", "title": "Auto-import from csg", "description": "#### lime:string\nA hex color code for light green (#55FF55).\n"}, {"label": "navy", "meta": "const", "title": "Auto-import from csg", "description": "#### navy:string\nA hex color code for dark blue (#0000AA).\n"}, {"label": "orange", "meta": "const", "title": "Auto-import from csg", "description": "#### orange:string\nA hex color code for orange (#FFAA00).\n"}, {"label": "pink", "meta": "const", "title": "Auto-import from csg", "description": "#### pink:string\nA hex color code for pink (#FF55FF).\n"}, {"label": "purple", "meta": "const", "title": "Auto-import from csg", "description": "#### purple:string\nA hex color code for purple (#AA00AA).\n"}, {"label": "rose", "meta": "const", "title": "Auto-import from csg", "description": "#### rose:string\nA hex color code for light red (#FF5555).\n"}, {"label": "silver", "meta": "const", "title": "Auto-import from csg", "description": "#### silver:string\nA hex color code for light gray (#AAAAAA).\n"}, {"label": "teal", "meta": "const", "title": "Auto-import from csg", "description": "#### teal:string\nA hex color code for dark cyan (#00AAAA).\n"}, {"label": "white", "meta": "const", "title": "Auto-import from csg", "description": "#### white:string\nA hex color code for white (#FFFFFF).\n"}, {"label": "yellow", "meta": "const", "title": "Auto-import from csg", "description": "#### yellow:string\nA hex color code for yellow (#FFFF55).\n"}, {"label": "bounding_box", "meta": "func", "title": "Auto-import from csg", "description": "#### bounding_box(shape) \u2192 Function\nReturns a function of type (string, string) \u2192 number, for getting the\nspecified Shape's bounding box coordinates.\n\nIts first parameter must be \"x\", \"y\", or \"z\", indicating the coordinate axis.\n\nIts second parameter must be \"min\" or \"max\", indicating the minimum or\nmaximum bounding box coordinate respectively.\n\nFor example, if a sphere of radius 0.5 is centred at (0.5, 0.5, 0.5), its\nminimum bounding coordinates will be (0, 0, 0), and its maximum bounding\ncoordinates will be (1, 1, 1).\n```\n// Sample usage\nconst getter_function = bounding_box(sphere(silver));\ndisplay(getter_function(\"y\", \"max\")); // Displays 1, the maximum y coordinate\n```\n\n", "parameters": ["${1:shape}"]}, {"label": "cone", "meta": "func", "title": "Auto-import from csg", "description": "#### cone(hex) \u2192 Shape\nReturns a cone Shape in the specified color.\n\n* Height: 1\n* Radius: 0.5\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "cube", "meta": "func", "title": "Auto-import from csg", "description": "#### cube(hex) \u2192 Shape\nReturns a cube Shape in the specified color.\n\n* Side length: 1\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "cylinder", "meta": "func", "title": "Auto-import from csg", "description": "#### cylinder(hex) \u2192 Shape\nReturns an upright cylinder Shape in the specified color.\n\n* Height: 1\n* Radius: 0.5\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "download_shape_stl", "meta": "func", "title": "Auto-import from csg", "description": "#### download_shape_stl(shape) \u2192 Promise<void>\nExports the specified Shape as an STL file, downloaded to your device.\n\nThe file can be used for purposes such as 3D printing.\n", "parameters": ["${1:shape}"]}, {"label": "empty_shape", "meta": "func", "title": "Auto-import from csg", "description": "#### empty_shape() \u2192 Shape\nAn empty Shape.\n", "parameters": []}, {"label": "geodesic_sphere", "meta": "func", "title": "Auto-import from csg", "description": "#### geodesic_sphere(hex) \u2192 Shape\nReturns a geodesic sphere Shape in the specified color.\n\n* Radius: 0.5\n* Center: Floating at (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "group", "meta": "func", "title": "Auto-import from csg", "description": "#### group(operables) \u2192 Group\nGroups the specified list of Operables together. Groups can contain a mix of\nShapes and other nested Groups.\n\nGroups cannot be operated on, but can be transformed together. I.e. a call\nlike `intersect(group_a, group_b)` is not allowed, but a call like\n`scale(group, 5, 5, 5)` is.\n", "parameters": ["${1:operables}"]}, {"label": "intersect", "meta": "func", "title": "Auto-import from csg", "description": "#### intersect(first, second) \u2192 Shape\nReturns the intersection of the two specified Shapes.\n", "parameters": ["${1:first}", "${2:second}"]}, {"label": "is_group", "meta": "func", "title": "Auto-import from csg", "description": "#### is_group(parameter) \u2192 boolean\nChecks if the given parameter is a Group.\n", "parameters": ["${1:parameter}"]}, {"label": "is_shape", "meta": "func", "title": "Auto-import from csg", "description": "#### is_shape(parameter) \u2192 boolean\nChecks if the given parameter is a Shape.\n", "parameters": ["${1:parameter}"]}, {"label": "prism", "meta": "func", "title": "Auto-import from csg", "description": "#### prism(hex) \u2192 Shape\nReturns an upright triangular prism Shape in the specified color.\n\n* Height: 1\n* Side length: 1\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "pyramid", "meta": "func", "title": "Auto-import from csg", "description": "#### pyramid(hex) \u2192 Shape\nReturns a square pyramid Shape in the specified color.\n\n* Height: 1\n* Base length: 1\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "render", "meta": "func", "title": "Auto-import from csg", "description": "#### render(operable) \u2192 RenderGroup\nRenders the specified Operable.\n", "parameters": ["${1:operable}"]}, {"label": "render_axes", "meta": "func", "title": "Auto-import from csg", "description": "#### render_axes(operable) \u2192 RenderGroup\nRenders the specified Operable, along with z, y, and z axes.\n", "parameters": ["${1:operable}"]}, {"label": "render_grid", "meta": "func", "title": "Auto-import from csg", "description": "#### render_grid(operable) \u2192 RenderGroup\nRenders the specified Operable, along with a grid.\n", "parameters": ["${1:operable}"]}, {"label": "render_grid_axes", "meta": "func", "title": "Auto-import from csg", "description": "#### render_grid_axes(operable) \u2192 RenderGroup\nRenders the specified Operable, along with both a grid and axes.\n", "parameters": ["${1:operable}"]}, {"label": "rgb", "meta": "func", "title": "Auto-import from csg", "description": "#### rgb(redValue, greenValue, blueValue) \u2192 string\nReturns a hex color code representing the specified RGB values.\n", "parameters": ["${1:redValue}", "${2:greenValue}", "${3:blueValue}"]}, {"label": "rotate", "meta": "func", "title": "Auto-import from csg", "description": "#### rotate(operable, xAngle, yAngle, zAngle) \u2192 Operable\nSequentially rotates the specified Operable about the x, y, and z axes using\nthe specified angles, in radians (i.e. 2\u03c0 represents 360\u00b0).\n\nThe order of rotation is: x, y, then z axis. The order of rotation can affect\nthe result, so you may wish to make multiple separate calls to rotate() if\nyou require a specific order of rotation.\n", "parameters": ["${1:operable}", "${2:xAngle}", "${3:yAngle}", "${4:zAngle}"]}, {"label": "rounded_cube", "meta": "func", "title": "Auto-import from csg", "description": "#### rounded_cube(hex) \u2192 Shape\nReturns a rounded cube Shape in the specified color.\n\n* Side length: 1\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "rounded_cylinder", "meta": "func", "title": "Auto-import from csg", "description": "#### rounded_cylinder(hex) \u2192 Shape\nReturns a rounded, upright cylinder Shape in the specified color.\n\n* Height: 1\n* Radius: 0.5\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "scale", "meta": "func", "title": "Auto-import from csg", "description": "#### scale(operable, xFactor, yFactor, zFactor) \u2192 Operable\nScales the specified Operable in the x, y, and z directions using the\nspecified factors. Scaling is done about the origin (0, 0, 0).\n\nFor example, a factor of 0.5 results in a smaller Shape, while a factor of 2\nresults in a larger Shape. A factor of 1 results in the original Shape.\nFactors must be greater than 0.\n", "parameters": ["${1:operable}", "${2:xFactor}", "${3:yFactor}", "${4:zFactor}"]}, {"label": "sphere", "meta": "func", "title": "Auto-import from csg", "description": "#### sphere(hex) \u2192 Shape\nReturns a sphere Shape in the specified color.\n\n* Radius: 0.5\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "star", "meta": "func", "title": "Auto-import from csg", "description": "#### star(hex) \u2192 Shape\nReturns an upright extruded star Shape in the specified color.\n\n* Height: 1\n* Center: (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "subtract", "meta": "func", "title": "Auto-import from csg", "description": "#### subtract(target, subtractedShape) \u2192 Shape\nSubtracts the second Shape from the first Shape, returning the resultant\nShape.\n", "parameters": ["${1:target}", "${2:subtractedShape}"]}, {"label": "torus", "meta": "func", "title": "Auto-import from csg", "description": "#### torus(hex) \u2192 Shape\nReturns a torus (donut) Shape in the specified color.\n\n* Inner radius: 0.15 (ring is 0.3 thick)\n* Total radius: 0.5 (from the centre of the hole to \"outside\")\n* Center: Floating at (0.5, 0.5, 0.5)", "parameters": ["${1:hex}"]}, {"label": "translate", "meta": "func", "title": "Auto-import from csg", "description": "#### translate(operable, xOffset, yOffset, zOffset) \u2192 Operable\nTranslates (moves) the specified Operable in the x, y, and z directions using\nthe specified offsets.\n", "parameters": ["${1:operable}", "${2:xOffset}", "${3:yOffset}", "${4:zOffset}"]}, {"label": "ungroup", "meta": "func", "title": "Auto-import from csg", "description": "#### ungroup(g) \u2192 List\nUngroups the specified Group, returning the list of Shapes and/or nested\nGroups contained within.\n", "parameters": ["${1:g}"]}, {"label": "union", "meta": "func", "title": "Auto-import from csg", "description": "#### union(first, second) \u2192 Shape\nReturns the union of the two specified Shapes.\n", "parameters": ["${1:first}", "${2:second}"]}], "repl": [{"label": "default_js_slang", "meta": "func", "title": "Auto-import from repl", "description": "#### default_js_slang(_program) \u2192 any\nWhen use this function as the entrance function in the parameter of \"set\\_evaluator\", the Programmable Repl will directly use the default js-slang interpreter to run your program in Programmable Repl editor. Do not directly call this function in your own code.\n", "parameters": ["${1:_program}"]}, {"label": "repl_display", "meta": "func", "title": "Auto-import from repl", "description": "#### repl_display(content) \u2192 any\nDisplay message in Programmable Repl Tab\nIf you give a pair as the parameter, it will use the given pair to generate rich text and use rich text display mode to display the string in Programmable Repl Tab with undefined return value (see module description for more information).\nIf you give other things as the parameter, it will simply display the toString value of the parameter in Programmable Repl Tab and returns the displayed string itself.\n\n**Rich Text Display**\n\n* First you need to `import { repl_display } from \"repl\";`\n* Format: pair(pair(\"string\",style),style)...\n* Examples:\n\n\n```\n// A large italic underlined \"Hello World\"\nrepl_display(pair(pair(pair(pair(\"Hello World\", \"underline\"), \"italic\"), \"bold\"), \"gigantic\"));\n\n// A large italic underlined \"Hello World\" in blue\nrepl_display(pair(pair(pair(pair(pair(\"Hello World\", \"underline\"),\"italic\"), \"bold\"), \"gigantic\"), \"clrt#0000ff\"));\n\n// A large italic underlined \"Hello World\" with orange foreground and purple background\nrepl_display(pair(pair(pair(pair(pair(pair(\"Hello World\", \"underline\"), \"italic\"), \"bold\"), \"gigantic\"), \"clrb#A000A0\"),\"clrt#ff9700\"));\n```\n\n\n* Coloring:\n  + `clrt` stands for text color, `clrb` stands for background color. The color string are in hexadecimal begin with \"#\" and followed by 6 hexadecimal digits.\n  + Example: `pair(\"123\",\"clrt#ff0000\")` will produce a red \"123\"; `pair(\"456\",\"clrb#00ff00\")` will produce a green \"456\".\n* Besides coloring, the following styles are also supported:\n  + `bold`: Make the text bold.\n  + `italic`: Make the text italic.\n  + `small`: Make the text in small size.\n  + `medium`: Make the text in medium size.\n  + `large`: Make the text in large size.\n  + `gigantic`: Make the text in very large size.\n  + `underline`: Underline the text.\n* Note that if you apply the conflicting attributes together, only one conflicted style will take effect and other conflicting styles will be discarded, like \"pair(pair(pair(\"123\", small), medium), large) \" (Set conflicting font size for the same text)\n* Also note that for safety matters, certain words and characters are not allowed to appear under rich text display mode.", "parameters": ["${1:content}"]}, {"label": "set_background_image", "meta": "func", "title": "Auto-import from repl", "description": "#### set_background_image(img_url, background_color_alpha) \u2192 void\nSet Programmable Repl editor background image with a customized image URL\n", "parameters": ["${1:img_url}", "${2:background_color_alpha}"]}, {"label": "set_evaluator", "meta": "func", "title": "Auto-import from repl", "description": "#### set_evaluator(evalFunc) \u2192 Object\nSetup the programmable REPL with given evaulator's entrance function\n\nThe function should take one parameter as the code from the module's editor, for example:\n```\nfunction parse_and_evaluate(code) {\n  // ...\n}\n```\n\n", "parameters": ["${1:evalFunc}"]}, {"label": "set_font_size", "meta": "func", "title": "Auto-import from repl", "description": "#### set_font_size(font_size_px) \u2192 void\nSet Programmable Repl editor font size\n", "parameters": ["${1:font_size_px}"]}, {"label": "set_program_text", "meta": "func", "title": "Auto-import from repl", "description": "#### set_program_text(text) \u2192 void\nSet program text in the Repl editor to the given string\n", "parameters": ["${1:text}"]}], "remote_execution": [{"label": "EV3", "meta": "const", "title": "Auto-import from remote_execution", "description": "#### EV3:Objecto description availabl"}], "wasm": [{"label": "wcompile", "meta": "func", "title": "Auto-import from wasm", "description": "#### wcompile(program) \u2192 number[]\nCompile a (hopefully valid) WebAssembly Text module to binary.\n", "parameters": ["${1:program}"]}, {"label": "wrun", "meta": "func", "title": "Auto-import from wasm", "description": "#### wrun(buffer) \u2192 AlternatingLinkedList<string, ExportValue>\nRun a compiled WebAssembly Binary Buffer.\n", "parameters": ["${1:buffer}"]}], "arcade_2d": [{"label": "build_game", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### build_game() \u2192 BuildGame\nBuilds the game.\nProcesses the initialization and updating of the game.\nAll created GameObjects and their properties are passed into the game.\n", "parameters": []}, {"label": "create_audio", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### create_audio(audio_url, volume_level) \u2192 AudioClip\nCreate an audio clip that can be referenced.\nSource Academy assets can be found at https://source-academy-assets.s3-ap-southeast-1.amazonaws.com/ with Ctrl+f \".mp3\".\nPhaser audio assets can be found at https://labs.phaser.io/assets/audio.\nPhaser sound effects assets can be found at https://labs.phaser.io/assets/audio/SoundEffects/.\nIf Phaser assets are unavailable, go to https://github.com/photonstorm/phaser3-examples/tree/master/public/assets\nto get the asset path and append it to `https://labs.phaser.io/assets/`.\nThis function should not be called in your update function.\n", "parameters": ["${1:audio_url}", "${2:volume_level}"]}, {"label": "create_circle", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### create_circle(radius) \u2192 ShapeGameObject\nCreates a CircleGameObject that takes in circle shape properties.\n", "parameters": ["${1:radius}"]}, {"label": "create_rectangle", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### create_rectangle(width, height) \u2192 ShapeGameObject\nCreates a RectangleGameObject that takes in rectangle shape properties.\n", "parameters": ["${1:width}", "${2:height}"]}, {"label": "create_sprite", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### create_sprite(image_url) \u2192 SpriteGameObject\nCreates a GameObject that contains a Sprite image reference.\nSource Academy assets can be used by specifying path without the prepend.\nSource Academy assets can be found at https://source-academy-assets.s3-ap-southeast-1.amazonaws.com/ with Ctrl+f \".png\".\nPhaser assets can be found at https://labs.phaser.io/assets/.\nIf Phaser assets are unavailable, go to https://github.com/photonstorm/phaser3-examples/tree/master/public/assets\nto get the asset path and append it to `https://labs.phaser.io/assets/`.\nAssets from other websites can also be used if they support Cross-Origin Resource Sharing (CORS), but the full path must be specified.\n", "parameters": ["${1:image_url}"]}, {"label": "create_text", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### create_text(text) \u2192 TextGameObject\nCreates a GameObject that contains a text reference.\n", "parameters": ["${1:text}"]}, {"label": "create_triangle", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### create_triangle(width, height) \u2192 ShapeGameObject\nCreates a TriangleGameObject that takes in an downright isosceles triangle shape properties.\n", "parameters": ["${1:width}", "${2:height}"]}, {"label": "debug_log", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### debug_log(info) \u2192 void\nLogs any information passed into it within the `update_loop`.\nDisplays the information in the top-left corner of the canvas only if debug mode is enabled.\nCalling `display` within the `update_loop` function will not work as intended, so use `debug_log` instead.\n", "parameters": ["${1:info}"]}, {"label": "enable_debug", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### enable_debug() \u2192 void\nEnables debug mode.\nHit box interaction between pointer and GameObjects are shown with a green outline in debug mode.\nHit box interaction between GameObjects is based off a rectangular area instead, which is not reflected.\ndebug\\_log(...) information is shown on the top-left corner of the canvas.\n", "parameters": []}, {"label": "gameobjects_overlap", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### gameobjects_overlap(gameObject1, gameObject2) \u2192 boolean\nChecks if two gameobjects overlap with each other, using a rectangular bounding box.\nThis bounding box is rectangular, for all GameObjects.\nThis function should be called in your update function.\n", "parameters": ["${1:gameObject1}", "${2:gameObject2}"]}, {"label": "get_game_time", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### get_game_time() \u2192 number\nGets the current in-game time, which is based off the start time.\nThis function should be called in your update function.\n", "parameters": []}, {"label": "get_loop_count", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### get_loop_count() \u2192 number\nGets the current loop count, which is the number of frames that have run.\nDepends on the framerate set for how fast this changes.\nThis function should be called in your update function.\n", "parameters": []}, {"label": "input_key_down", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### input_key_down(key_name) \u2192 boolean\nDetects if a key input is pressed down.\nThis function must be called in your update function to detect inputs.\nTo get specific keys, go to https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key#result.\n", "parameters": ["${1:key_name}"]}, {"label": "input_left_mouse_down", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### input_left_mouse_down() \u2192 boolean\nDetects if the left mouse button is pressed down.\nThis function should be called in your update function.\n", "parameters": []}, {"label": "input_right_mouse_down", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### input_right_mouse_down() \u2192 boolean\nDetects if the right mouse button is pressed down.\nThis function should be called in your update function.\n", "parameters": []}, {"label": "loop_audio", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### loop_audio(audio_clip) \u2192 AudioClip\nLoops the audio clip provided, which will play the audio clip indefinitely.\nSetting whether an audio clip should loop be done outside the update function.\n", "parameters": ["${1:audio_clip}"]}, {"label": "play_audio", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### play_audio(audio_clip) \u2192 AudioClip\nPlays the audio clip, and stops when the audio clip is over.\n", "parameters": ["${1:audio_clip}"]}, {"label": "pointer_over_gameobject", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### pointer_over_gameobject(gameObject) \u2192 boolean\nDetects if the (mouse) pointer is over the gameobject.\nThis function should be called in your update function.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_color", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_color(gameObject) \u2192 ColorRGBA\nQueries the [r, g, b, a] color property of the GameObject.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_flip", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_flip(gameObject) \u2192 FlipXY\nQueries the [x, y] flip property of the GameObject.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_id", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_id(gameObject) \u2192 number\nQueries the id of the GameObject.\nThe id of a GameObject is in the order of creation, starting from 0.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_pointer_position", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_pointer_position() \u2192 PositionXY\nQueries the (mouse) pointer position.\n", "parameters": []}, {"label": "query_position", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_position(gameObject) \u2192 PositionXY\nQueries the [x, y] position transform of the GameObject.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_rotation", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_rotation(gameObject) \u2192 number\nQueries the z-rotation transform of the GameObject.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_scale", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_scale(gameObject) \u2192 ScaleXY\nQueries the [x, y] scale transform of the GameObject.\n", "parameters": ["${1:gameObject}"]}, {"label": "query_text", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### query_text(textGameObject) \u2192 string\nQueries the text of a Text GameObject.\n", "parameters": ["${1:textGameObject}"]}, {"label": "set_dimensions", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### set_dimensions(dimensions) \u2192 void\nSets the dimensions of the canvas, which should be between the\nmin and max widths and height.\n", "parameters": ["${1:dimensions}"]}, {"label": "set_fps", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### set_fps(fps) \u2192 void\nSets the frames per second of the canvas, which should be between the MIN\\_FPS and MAX\\_FPS.\nIt ranges between 1 and 120, with the default target as 30.\nThis function should not be called in the update function.\n", "parameters": ["${1:fps}"]}, {"label": "set_scale", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### set_scale(scale) \u2192 void\nSets the scale (zoom) of the pixels in the canvas.\nIf scale is doubled, then the number of units across would be halved.\nThis has a side effect of making the game pixelated if scale > 1.\nThe default scale is 1.\n", "parameters": ["${1:scale}"]}, {"label": "stop_audio", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### stop_audio(audio_clip) \u2192 AudioClip\nStops the audio clip immediately.\n", "parameters": ["${1:audio_clip}"]}, {"label": "update_color", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_color(gameObject, color) \u2192 GameObject\nUpdates the color of the GameObject.\nNote that the value is modulo 256, so passing values greater than 255 is allowed.\n", "parameters": ["${1:gameObject}", "${2:color}"]}, {"label": "update_flip", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_flip(gameObject, flip) \u2192 GameObject\nUpdates the flip state of the GameObject.\n", "parameters": ["${1:gameObject}", "${2:flip}"]}, {"label": "update_loop", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_loop(update_function) \u2192 void\nThis sets the update loop in the canvas.\nThe update loop is run once per frame, so it depends on the fps set for the number of times this loop is run.\nThere should only be one update\\_loop called.\nAll game logic should be handled within your update\\_function.\nYou cannot create GameObjects inside the update\\_loop.\ngame\\_state is an array that can be modified to store anything.\n", "parameters": ["${1:update_function}"]}, {"label": "update_position", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_position(gameObject, coordinates) \u2192 GameObject\nUpdates the position transform of the GameObject.\n", "parameters": ["${1:gameObject}", "${2:coordinates}"]}, {"label": "update_rotation", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_rotation(gameObject, radians) \u2192 GameObject\nUpdates the rotation transform of the GameObject.\n", "parameters": ["${1:gameObject}", "${2:radians}"]}, {"label": "update_scale", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_scale(gameObject, scale) \u2192 GameObject\nUpdates the scale transform of the GameObject.\n", "parameters": ["${1:gameObject}", "${2:scale}"]}, {"label": "update_text", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_text(textGameObject, text) \u2192 GameObject\nUpdates the text of the TextGameObject.\n", "parameters": ["${1:textGameObject}", "${2:text}"]}, {"label": "update_to_top", "meta": "func", "title": "Auto-import from arcade_2d", "description": "#### update_to_top(gameObject) \u2192 GameObject\nRenders this GameObject in front of all other GameObjects.\n", "parameters": ["${1:gameObject}"]}], "physics_2d": [{"label": "add_box_object", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### add_box_object(pos, rot, velc, size, isStatic) \u2192 PhysicsObject\nMakes a box object with given initial position, rotation, velocity, size and add it to the world.\n", "parameters": ["${1:pos}", "${2:rot}", "${3:velc}", "${4:size}", "${5:isStatic}"]}, {"label": "add_circle_object", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### add_circle_object(pos, rot, velc, radius, isStatic) \u2192 PhysicsObject\nMakes a circle object with given initial position, rotation, velocity, radius and add it to the world.\n", "parameters": ["${1:pos}", "${2:rot}", "${3:velc}", "${4:radius}", "${5:isStatic}"]}, {"label": "add_triangle_object", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### add_triangle_object(pos, rot, velc, base, height, isStatic) \u2192 PhysicsObject\nMakes a triangle object with given initial position, rotation, velocity, base, height and add it to the world.\n", "parameters": ["${1:pos}", "${2:rot}", "${3:velc}", "${4:base}", "${5:height}", "${6:isStatic}"]}, {"label": "add_vector", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### add_vector(vec1, vec2) \u2192 Vector2\nAdds two vectors together and returns the resultant vector.\n", "parameters": ["${1:vec1}", "${2:vec2}"]}, {"label": "add_wall", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### add_wall(pos, rot, size) \u2192 PhysicsObject\nMakes a wall (static box object with no velocity).\n", "parameters": ["${1:pos}", "${2:rot}", "${3:size}"]}, {"label": "apply_force", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### apply_force(force, pos, obj) \u2192 void\nApllies force to given object at given world point.\n", "parameters": ["${1:force}", "${2:pos}", "${3:obj}"]}, {"label": "apply_force_to_center", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### apply_force_to_center(force, obj) \u2192 void\nApplies a force to given object at its center.\n", "parameters": ["${1:force}", "${2:obj}"]}, {"label": "array_to_vector", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### array_to_vector(arr) \u2192 Vector2\nConverts an array of 2 numbers into a 2d vector.\n", "parameters": ["${1:arr}"]}, {"label": "get_angular_velocity", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### get_angular_velocity(obj) \u2192 Vector2\nGets angular velocity of the object at current world time.\n", "parameters": ["${1:obj}"]}, {"label": "get_position", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### get_position(obj) \u2192 Vector2\nGets position of the object at current world time.\n", "parameters": ["${1:obj}"]}, {"label": "get_rotation", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### get_rotation(obj) \u2192 number\nGets rotation of the object at current world time.\n", "parameters": ["${1:obj}"]}, {"label": "get_velocity", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### get_velocity(obj) \u2192 Vector2\nGets velocity of the object at current world time.\n", "parameters": ["${1:obj}"]}, {"label": "impact_start_time", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### impact_start_time(obj1, obj2) \u2192 number\nGets the impact start time of two currently touching objects.\nReturns -1 if they are not touching.\n", "parameters": ["${1:obj1}", "${2:obj2}"]}, {"label": "is_touching", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### is_touching(obj1, obj2) \u2192 boolean\nChecks if two objects are touching at current world time.\n", "parameters": ["${1:obj1}", "${2:obj2}"]}, {"label": "make_force", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### make_force(dir, mag, dur, start) \u2192 Force\nMakes a force with direction vector, magnitude, force duration and start time.\n", "parameters": ["${1:dir}", "${2:mag}", "${3:dur}", "${4:start}"]}, {"label": "make_ground", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### make_ground(height, friction) \u2192 void\nMakes the ground body of the world.\n", "parameters": ["${1:height}", "${2:friction}"]}, {"label": "make_vector", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### make_vector(x, y) \u2192 Vector2\nMakes a 2d vector with the given x and y components.\n", "parameters": ["${1:x}", "${2:y}"]}, {"label": "scale_size", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### scale_size(obj, scale) \u2192 void\nResizes the object with given scale factor.\n", "parameters": ["${1:obj}", "${2:scale}"]}, {"label": "set_angular_velocity", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_angular_velocity(obj, velc) \u2192 void\nSets current angular velocity of the object.\n", "parameters": ["${1:obj}", "${2:velc}"]}, {"label": "set_density", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_density(obj, density) \u2192 void\nSet density of the object.\n", "parameters": ["${1:obj}", "${2:density}"]}, {"label": "set_friction", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_friction(obj, friction) \u2192 void\nSets the friction value of the object.\n", "parameters": ["${1:obj}", "${2:friction}"]}, {"label": "set_gravity", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_gravity(v) \u2192 void\nCreates a new physics world and sets the gravity of the world.\n", "parameters": ["${1:v}"]}, {"label": "set_position", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_position(obj, pos) \u2192 void\nSets the position of the object.\n", "parameters": ["${1:obj}", "${2:pos}"]}, {"label": "set_rotation", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_rotation(obj, rot) \u2192 void\nSets the rotation of the object.\n", "parameters": ["${1:obj}", "${2:rot}"]}, {"label": "set_velocity", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### set_velocity(obj, velc) \u2192 void\nSets current velocity of the object.\n", "parameters": ["${1:obj}", "${2:velc}"]}, {"label": "simulate_world", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### simulate_world(total_time) \u2192 void\nSimulates the world for given duration.\n", "parameters": ["${1:total_time}"]}, {"label": "subtract_vector", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### subtract_vector(vec1, vec2) \u2192 Vector2\nSubtract the second vector from the first and returns the resultant vector.\n", "parameters": ["${1:vec1}", "${2:vec2}"]}, {"label": "update_world", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### update_world(dt) \u2192 void\nUpdates the world once with the given time step.\n", "parameters": ["${1:dt}"]}, {"label": "vector_to_array", "meta": "func", "title": "Auto-import from physics_2d", "description": "#### vector_to_array(vec) \u2192 number[]\nConverts a 2d vector into an array.\n", "parameters": ["${1:vec}"]}], "robot_simulation": [{"label": "addControllerToWorld", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### addControllerToWorld(controller, world) \u2192 void\nAdd a controller to the world.\n\nThe controller is a unit of computation modelled after Unity's MonoBehaviour. It is used to\nencapsulate the logic of the simulation. Controllers can be used to create robots, sensors,\nactuators, and other objects in the simulation.\n\nThe controller should be added to the world using this function in order for the simulation to\naccess the controller's logic.\n\n*\\*This is a Utility function and should be called within init\\_simulation.*\n", "parameters": ["${1:controller}", "${2:world}"]}, {"label": "createCSE", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createCSE() \u2192 Program\nCreates a CSE machine as a Program Object. The CSE machine is used to evaluate the code written\nby the user. The execution of the code will be automatically synchronized with the simulation\nto ensure that the code is executed at the correct time.\n\nThe returned Program object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**\n", "parameters": []}, {"label": "createCuboid", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createCuboid(physics, renderer, position_x, position_y, position_z, width, length, height, mass, color, bodyType) \u2192 Cuboid\nCreates a cuboid. joel-todo: The dynamic version wont work\n\nThis function is used to create the floor and wall controllers.\n\nThe returned Cuboid object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**\n", "parameters": ["${1:physics}", "${2:renderer}", "${3:position_x}", "${4:position_y}", "${5:position_z}", "${6:width}", "${7:length}", "${8:height}", "${9:mass}", "${10:color}", "${11:bodyType}"]}, {"label": "createCustomPhysics", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createCustomPhysics(gravity, timestep) \u2192 Physics\nCreate a physics engine with the provided gravity and timestep. A physics engine\nwith default gravity and timestep can be created using createPhysics.\n\nThe returned Physics object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**\n", "parameters": ["${1:gravity}", "${2:timestep}"]}, {"label": "createEv3", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createEv3(physics, renderer) \u2192 DefaultEv3\nCreate an EV3.\n\nThe resulting EV3 should be saved to the context using saveToContext.\n\nThe returned EV3 object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**\n", "parameters": ["${1:physics}", "${2:renderer}"]}, {"label": "createFloor", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createFloor(physics, renderer) \u2192 Cuboid\nCreate a floor. This function is a wrapper around createCuboid.\n\nThe returned Cuboid object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**\n", "parameters": ["${1:physics}", "${2:renderer}"]}, {"label": "createPaper", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createPaper(render, url, width, height, x, y, rotation) \u2192 Paper\nCreates a paper on the floor.\n\nThe returned Paper object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**\n", "parameters": ["${1:render}", "${2:url}", "${3:width}", "${4:height}", "${5:x}", "${6:y}", "${7:rotation}"]}, {"label": "createPhysics", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createPhysics() \u2192 Physics\nCreate a physics engine with default gravity and timestep. Default gravity is -9.81 and timestep is 1/20.\nA custom physics engine can be created using createCustomPhysics.\n\nThe returned Physics object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**\n", "parameters": []}, {"label": "createRenderer", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createRenderer() \u2192 Renderer\nCreates a renderer for the simulation.\n\nThe returned Renderer object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**\n", "parameters": []}, {"label": "createRobotConsole", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createRobotConsole() \u2192 RobotConsole\nCreates a RobotConsole for the simulation.\n\nThe RobotConsole is used to display messages and errors to the user. The console\nmessages can be seen in the console tab of the simulator.\n\nThe returned RobotConsole object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**\n", "parameters": []}, {"label": "createTimer", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createTimer() \u2192 Timer\nCreates a Timer for the simulation.\n\nThe returned Timer object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**\n", "parameters": []}, {"label": "createWall", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createWall(physics, renderer, x, y, width, length, height) \u2192 Cuboid\nCreates a wall. This function is a wrapper around createCuboid.\n\nThe returned Cuboid object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**\n", "parameters": ["${1:physics}", "${2:renderer}", "${3:x}", "${4:y}", "${5:width}", "${6:length}", "${7:height}"]}, {"label": "createWorld", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### createWorld(physics, renderer, timer, robotConsole) \u2192 World\nCreates a custom world with the provided physics, renderer, timer and console .\n\nA world is responsible for managing the physics, rendering, timing and console of the simulation.\nIt also manages the controllers that are added to the world, ensuring that the appropriate functions\nare called at the correct time.\n\nThe returned World object is designed to be returned by the init\\_simulation callback.\n\nYou can add controllers to the world using addControllerToWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**\n", "parameters": ["${1:physics}", "${2:renderer}", "${3:timer}", "${4:robotConsole}"]}, {"label": "ev3_colorSensor", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_colorSensor() \u2192 ColorSensor\nGets the colour sensor connected any of ports 1, 2, 3 or 4.\n", "parameters": []}, {"label": "ev3_colorSensorBlue", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_colorSensorBlue(colorSensor) \u2192 number\nGets the amount of blue seen by the colour sensor.\n", "parameters": ["${1:colorSensor}"]}, {"label": "ev3_colorSensorGreen", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_colorSensorGreen(colorSensor) \u2192 number\nGets the amount of green seen by the colour sensor.\n", "parameters": ["${1:colorSensor}"]}, {"label": "ev3_colorSensorRed", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_colorSensorRed(colorSensor) \u2192 number\nGets the amount of red seen by the colour sensor.\n", "parameters": ["${1:colorSensor}"]}, {"label": "ev3_motorA", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_motorA() \u2192 MotorFunctionReturnType\nGets the motor connected to port A.\n", "parameters": []}, {"label": "ev3_motorB", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_motorB() \u2192 MotorFunctionReturnType\nGets the motor connected to port B.\n", "parameters": []}, {"label": "ev3_motorC", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_motorC() \u2192 MotorFunctionReturnType\nGets the motor connected to port C.\n", "parameters": []}, {"label": "ev3_motorD", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_motorD() \u2192 MotorFunctionReturnType\nGets the motor connected to port D.\n", "parameters": []}, {"label": "ev3_pause", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_pause(duration) \u2192 void\nPauses for a period of time.\n", "parameters": ["${1:duration}"]}, {"label": "ev3_runToRelativePosition", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_runToRelativePosition(motor, position, speed) \u2192 void\nCauses the motor to rotate until the position reaches ev3\\_motorGetPosition() + position with the given speed.\nNote: this works by sending instructions to the motors.\nThis will return almost immediately, without waiting for the motor to reach the given absolute position.\nIf you wish to wait, use ev3\\_pause.\n", "parameters": ["${1:motor}", "${2:position}", "${3:speed}"]}, {"label": "ev3_ultrasonicSensor", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_ultrasonicSensor() \u2192 UltrasonicSensor\nGets the ultrasonic sensor connected any of ports 1, 2, 3 or 4.\n", "parameters": []}, {"label": "ev3_ultrasonicSensorDistance", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### ev3_ultrasonicSensorDistance(ultraSonicSensor) \u2192 number\nGets the distance read by the ultrasonic sensor in centimeters.\n", "parameters": ["${1:ultraSonicSensor}"]}, {"label": "init_simulation", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### init_simulation(worldFactory) \u2192 void\nInitialize the simulation world. This function is to be called before the robot code.\nThis function is used to describe the simulation environment and the controllers.\n\nThe callback function takes in no parameters and returns a world created by createWorld.\nThe world should be configured with the physics, renderer, timer and console.\nThe controllers should be added to the world using addControllerToWorld.\nThe world should be saved to the context using saveToContext.\n", "parameters": ["${1:worldFactory}"]}, {"label": "saveToContext", "meta": "func", "title": "Auto-import from robot_simulation", "description": "#### saveToContext(key, value) \u2192 void\nSave a value to the context.\n\nThere are 2 important values to be saved. The world and the ev3.\nThe world needs to be saved in order for the simulation to access the physics, renderer, timer and console.\nThe ev3 needs to be saved in order for the \"ev3\\_\" functions to access the EV3\n", "parameters": ["${1:key}", "${2:value}"]}], "ar": [{"label": "alignmentBottom", "meta": "const", "title": "Auto-import from ar", "description": "#### alignmentBottom:Bottomo description availabl"}, {"label": "alignmentCenter", "meta": "const", "title": "Auto-import from ar", "description": "#### alignmentCenter:Centero description availabl"}, {"label": "alignmentLeft", "meta": "const", "title": "Auto-import from ar", "description": "#### alignmentLeft:Lefto description availabl"}, {"label": "alignmentMiddle", "meta": "const", "title": "Auto-import from ar", "description": "#### alignmentMiddle:Middleo description availabl"}, {"label": "alignmentRight", "meta": "const", "title": "Auto-import from ar", "description": "#### alignmentRight:Righto description availabl"}, {"label": "alignmentTop", "meta": "const", "title": "Auto-import from ar", "description": "#### alignmentTop:Topo description availabl"}, {"label": "addARObject", "meta": "func", "title": "Auto-import from ar", "description": "#### addARObject(arObject) \u2192 void\nAdds the specified object to the augmented world.\n", "parameters": ["${1:arObject}"]}, {"label": "clearARObjects", "meta": "func", "title": "Auto-import from ar", "description": "#### clearARObjects() \u2192 void\nRemoves all objects in the augmented world.\n", "parameters": []}, {"label": "clearMovement", "meta": "func", "title": "Auto-import from ar", "description": "#### clearMovement(object) \u2192 void\nRemoves the movement of the object.\n", "parameters": ["${1:object}"]}, {"label": "createCubeObject", "meta": "func", "title": "Auto-import from ar", "description": "#### createCubeObject(position, width, height, depth, color, onSelect) \u2192 CubeObject\nCreates an instance of an AR cube object.\n", "parameters": ["${1:position}", "${2:width}", "${3:height}", "${4:depth}", "${5:color}", "${6:onSelect}"]}, {"label": "createGltfObject", "meta": "func", "title": "Auto-import from ar", "description": "#### createGltfObject(position, src, scale, onSelect) \u2192 GltfObject\nCreates an instance of 3D object with GLTF model.\nBuild it with `createInterfaceRow`, `createInterfaceColumn`, `createInterfaceText` and `createInterfaceImage`.\n", "parameters": ["${1:position}", "${2:src}", "${3:scale}", "${4:onSelect}"]}, {"label": "createInterfaceBase64Image", "meta": "func", "title": "Auto-import from ar", "description": "#### createInterfaceBase64Image(base64, imageWidth, imageHeight, paddingLeft, paddingRight, paddingTop, paddingBottom) \u2192 UIBase64ImageComponent\nCreates an image component for UI object, using Base64 string.\nCrops the image to the specified size.\n", "parameters": ["${1:base64}", "${2:imageWidth}", "${3:imageHeight}", "${4:paddingLeft}", "${5:paddingRight}", "${6:paddingTop}", "${7:paddingBottom}"]}, {"label": "createInterfaceColumn", "meta": "func", "title": "Auto-import from ar", "description": "#### createInterfaceColumn(children, horizontalAlignment, paddingLeft, paddingRight, paddingTop, paddingBottom, backgroundColor) \u2192 UIColumnItem\nCreates a row component for UI object.\n", "parameters": ["${1:children}", "${2:horizontalAlignment}", "${3:paddingLeft}", "${4:paddingRight}", "${5:paddingTop}", "${6:paddingBottom}", "${7:backgroundColor}"]}, {"label": "createInterfaceImage", "meta": "func", "title": "Auto-import from ar", "description": "#### createInterfaceImage(src, imageWidth, imageHeight, paddingLeft, paddingRight, paddingTop, paddingBottom) \u2192 UIImageItem\nCreates an image component for UI object.\nCrops the image to the specified size.\n", "parameters": ["${1:src}", "${2:imageWidth}", "${3:imageHeight}", "${4:paddingLeft}", "${5:paddingRight}", "${6:paddingTop}", "${7:paddingBottom}"]}, {"label": "createInterfaceObject", "meta": "func", "title": "Auto-import from ar", "description": "#### createInterfaceObject(position, rootComponent, onSelect) \u2192 UIObject\nCreates an instance of AR user interface.\nBuild it with `createInterfaceRow`, `createInterfaceColumn`, `createInterfaceText` and `createInterfaceImage`.\n", "parameters": ["${1:position}", "${2:rootComponent}", "${3:onSelect}"]}, {"label": "createInterfaceRow", "meta": "func", "title": "Auto-import from ar", "description": "#### createInterfaceRow(children, verticalAlignment, paddingLeft, paddingRight, paddingTop, paddingBottom, backgroundColor) \u2192 UIRowItem\nCreates a row component for UI object.\n", "parameters": ["${1:children}", "${2:verticalAlignment}", "${3:paddingLeft}", "${4:paddingRight}", "${5:paddingTop}", "${6:paddingBottom}", "${7:backgroundColor}"]}, {"label": "createInterfaceText", "meta": "func", "title": "Auto-import from ar", "description": "#### createInterfaceText(text, textSize, textWidth, textAlign, paddingLeft, paddingRight, paddingTop, paddingBottom, color) \u2192 UITextItem\nCreates a text component for UI object.\n", "parameters": ["${1:text}", "${2:textSize}", "${3:textWidth}", "${4:textAlign}", "${5:paddingLeft}", "${6:paddingRight}", "${7:paddingTop}", "${8:paddingBottom}", "${9:color}"]}, {"label": "createLightObject", "meta": "func", "title": "Auto-import from ar", "description": "#### createLightObject(position, intensity) \u2192 LightObject\nCreates an instance of light source in augmented world.\nShines in all direction from a point.\n", "parameters": ["${1:position}", "${2:intensity}"]}, {"label": "createPathItem", "meta": "func", "title": "Auto-import from ar", "description": "#### createPathItem(start, end, duration) \u2192 PathItem\nCreates an instance of a path item, to specify movement path.\n", "parameters": ["${1:start}", "${2:end}", "${3:duration}"]}, {"label": "createSphereObject", "meta": "func", "title": "Auto-import from ar", "description": "#### createSphereObject(position, radius, color, onSelect) \u2192 SphereObject\nCreates an instance of an AR sphere object.\n", "parameters": ["${1:position}", "${2:radius}", "${3:color}", "${4:onSelect}"]}, {"label": "createVector3", "meta": "func", "title": "Auto-import from ar", "description": "#### createVector3(x, y, z) \u2192 Vector3\nCreates an instance of Vector3.\n", "parameters": ["${1:x}", "${2:y}", "${3:z}"]}, {"label": "getARObjects", "meta": "func", "title": "Auto-import from ar", "description": "#### getARObjects() \u2192 ARObject[]\nObtains the current ARObjects.\n", "parameters": []}, {"label": "getFrontObject", "meta": "func", "title": "Auto-import from ar", "description": "#### getFrontObject() \u2192 undefined | ARObject\nObtains the first object in the user's line of sight, if any.\n", "parameters": []}, {"label": "getJsonChild", "meta": "func", "title": "Auto-import from ar", "description": "#### getJsonChild(object, key) \u2192 any\nObtains the value of a json object at the key.\n", "parameters": ["${1:object}", "${2:key}"]}, {"label": "getXPosition", "meta": "func", "title": "Auto-import from ar", "description": "#### getXPosition(arObject) \u2192 number\nObtains the position of the specified object on the x-axis.\n", "parameters": ["${1:arObject}"]}, {"label": "getYPosition", "meta": "func", "title": "Auto-import from ar", "description": "#### getYPosition(arObject) \u2192 number\nObtains the position of the specified object on the y-axis.\n", "parameters": ["${1:arObject}"]}, {"label": "getZPosition", "meta": "func", "title": "Auto-import from ar", "description": "#### getZPosition(arObject) \u2192 number\nObtains the position of the specified object on the z-axis.\n", "parameters": ["${1:arObject}"]}, {"label": "initAR", "meta": "func", "title": "Auto-import from ar", "description": "#### initAR() \u2192 void\nInitialize AR.\n", "parameters": []}, {"label": "moveARObject", "meta": "func", "title": "Auto-import from ar", "description": "#### moveARObject(arObject, position) \u2192 void\nMoves the specified object to a new position.\n", "parameters": ["${1:arObject}", "${2:position}"]}, {"label": "removeARObject", "meta": "func", "title": "Auto-import from ar", "description": "#### removeARObject(arObject) \u2192 void\nRemoves the specified object from the augmented world.\n", "parameters": ["${1:arObject}"]}, {"label": "removeCenterToggle", "meta": "func", "title": "Auto-import from ar", "description": "#### removeCenterToggle() \u2192 void\nResets and hides the center toggle.\n", "parameters": []}, {"label": "removeLeftToggle", "meta": "func", "title": "Auto-import from ar", "description": "#### removeLeftToggle() \u2192 void\nResets and hides the left toggle.\n", "parameters": []}, {"label": "removeRightToggle", "meta": "func", "title": "Auto-import from ar", "description": "#### removeRightToggle() \u2192 void\nResets and hides the right toggle.\n", "parameters": []}, {"label": "selectObject", "meta": "func", "title": "Auto-import from ar", "description": "#### selectObject(arObject, isSelected) \u2192 void\nSets the select state for the specified AR object.\n", "parameters": ["${1:arObject}", "${2:isSelected}"]}, {"label": "setAlwaysRender", "meta": "func", "title": "Auto-import from ar", "description": "#### setAlwaysRender(object) \u2192 void\nAlways render the object.\n", "parameters": ["${1:object}"]}, {"label": "setAsARObjects", "meta": "func", "title": "Auto-import from ar", "description": "#### setAsARObjects(json) \u2192 void\nSets AR objects from json.\n", "parameters": ["${1:json}"]}, {"label": "setCenterToggle", "meta": "func", "title": "Auto-import from ar", "description": "#### setCenterToggle(text, callback) \u2192 void\nSets the center toggle.\n", "parameters": ["${1:text}", "${2:callback}"]}, {"label": "setFixedRotation", "meta": "func", "title": "Auto-import from ar", "description": "#### setFixedRotation(object, radians) \u2192 void\nFix the rotation of the object at the specified angle around the vertical axis.\n", "parameters": ["${1:object}", "${2:radians}"]}, {"label": "setHighlightFrontObject", "meta": "func", "title": "Auto-import from ar", "description": "#### setHighlightFrontObject(isEnabled) \u2192 void\nTurn on highlighting of object that the user is facing.\n", "parameters": ["${1:isEnabled}"]}, {"label": "setLeftToggle", "meta": "func", "title": "Auto-import from ar", "description": "#### setLeftToggle(text, callback) \u2192 void\nSets the left toggle.\n", "parameters": ["${1:text}", "${2:callback}"]}, {"label": "setOrbitMovement", "meta": "func", "title": "Auto-import from ar", "description": "#### setOrbitMovement(object, radius, duration) \u2192 void\nOrbits the object around its current position.\n", "parameters": ["${1:object}", "${2:radius}", "${3:duration}"]}, {"label": "setPathMovement", "meta": "func", "title": "Auto-import from ar", "description": "#### setPathMovement(object, path) \u2192 void\nMoves object in the specified path, repeat when ended.\n", "parameters": ["${1:object}", "${2:path}"]}, {"label": "setRenderDistance", "meta": "func", "title": "Auto-import from ar", "description": "#### setRenderDistance(object, distance) \u2192 void\nOnly render the object when in range.\n", "parameters": ["${1:object}", "${2:distance}"]}, {"label": "setRightToggle", "meta": "func", "title": "Auto-import from ar", "description": "#### setRightToggle(text, callback) \u2192 void\nSets the right toggle.\n", "parameters": ["${1:text}", "${2:callback}"]}, {"label": "setRotateAroundY", "meta": "func", "title": "Auto-import from ar", "description": "#### setRotateAroundY(object) \u2192 void\nRotates the object continuously around the vertical axis.\n", "parameters": ["${1:object}"]}, {"label": "setRotateToUser", "meta": "func", "title": "Auto-import from ar", "description": "#### setRotateToUser(object) \u2192 void\nAlways rotate the object to where the user is facing.\n", "parameters": ["${1:object}"]}, {"label": "setSpringMovement", "meta": "func", "title": "Auto-import from ar", "description": "#### setSpringMovement(object) \u2192 void\nAnimates movement when the position of the object changes.\n", "parameters": ["${1:object}"]}], "communication": [{"label": "STATE_CONNECTED", "meta": "const", "title": "Auto-import from communication", "description": "#### STATE_CONNECTED:\"Connected\"o description availabl"}, {"label": "STATE_DISCONNECTED", "meta": "const", "title": "Auto-import from communication", "description": "#### STATE_DISCONNECTED:\"Disconnected\"o description availabl"}, {"label": "STATE_OFFLINE", "meta": "const", "title": "Auto-import from communication", "description": "#### STATE_OFFLINE:\"Offline\"o description availabl"}, {"label": "STATE_RECONNECTING", "meta": "const", "title": "Auto-import from communication", "description": "#### STATE_RECONNECTING:\"Reconnecting\"o description availabl"}, {"label": "callFunction", "meta": "func", "title": "Auto-import from communication", "description": "#### callFunction(receiver, name, args, callback) \u2192 void\nCalls a function exposed by another user.\n", "parameters": ["${1:receiver}", "${2:name}", "${3:args}", "${4:callback}"]}, {"label": "expose", "meta": "func", "title": "Auto-import from communication", "description": "#### expose(name, func) \u2192 void\nExposes the specified function to other users.\nOther users can use \"callFunction\" to call this function.\n", "parameters": ["${1:name}", "${2:func}"]}, {"label": "getGlobalState", "meta": "func", "title": "Auto-import from communication", "description": "#### getGlobalState() \u2192 any\nObtains the current global state.\n", "parameters": []}, {"label": "getUserId", "meta": "func", "title": "Auto-import from communication", "description": "#### getUserId() \u2192 string\nObtains the user's ID.\n", "parameters": []}, {"label": "initCommunications", "meta": "func", "title": "Auto-import from communication", "description": "#### initCommunications(address, port, user, password) \u2192 void\nInitializes connection with MQTT broker.\nCurrently only supports WebSocket.\n", "parameters": ["${1:address}", "${2:port}", "${3:user}", "${4:password}"]}, {"label": "initGlobalState", "meta": "func", "title": "Auto-import from communication", "description": "#### initGlobalState(topicHeader, callback) \u2192 void\nInitializes global state.\n", "parameters": ["${1:topicHeader}", "${2:callback}"]}, {"label": "initRpc", "meta": "func", "title": "Auto-import from communication", "description": "#### initRpc(topicHeader, userId) \u2192 void\nInitializes RPC.\n", "parameters": ["${1:topicHeader}", "${2:userId}"]}, {"label": "keepRunning", "meta": "func", "title": "Auto-import from communication", "description": "#### keepRunning() \u2192 void\nKeeps the program running so that messages can come in.\n", "parameters": []}, {"label": "stopRunning", "meta": "func", "title": "Auto-import from communication", "description": "#### stopRunning() \u2192 void\nRemoves interval that keeps the program running.\n", "parameters": []}, {"label": "updateGlobalState", "meta": "func", "title": "Auto-import from communication", "description": "#### updateGlobalState(path, updatedState) \u2192 void\nBroadcasts the new states to all devices.\nHas ability to modify only part of the JSON state.\n", "parameters": ["${1:path}", "${2:updatedState}"]}], "nbody": [{"label": "addVectors", "meta": "func", "title": "Auto-import from nbody", "description": "#### addVectors(v1, v2) \u2192 Vector3\nAdd two vectors.\n", "parameters": ["${1:v1}", "${2:v2}"]}, {"label": "clone", "meta": "func", "title": "Auto-import from nbody", "description": "#### clone(obj) \u2192 CelestialBody | State | Universe | Vector3\nDeep clone an object.\n", "parameters": ["${1:obj}"]}, {"label": "createBodyCenterTransformation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createBodyCenterTransformation(i) \u2192 BodyCenterTransformation\nCreate a frame of reference transformation that moves the origin to the center of ith both.\n", "parameters": ["${1:i}"]}, {"label": "createCelestialBody", "meta": "func", "title": "Auto-import from nbody", "description": "#### createCelestialBody(label, mass, radius, position, velocity, acceleration) \u2192 CelestialBody\nCreate a new celestial body.\n", "parameters": ["${1:label}", "${2:mass}", "${3:radius}", "${4:position}", "${5:velocity}", "${6:acceleration}"]}, {"label": "createCentripetalForce", "meta": "func", "title": "Auto-import from nbody", "description": "#### createCentripetalForce(center) \u2192 CentripetalForce\nCreate a centripetal force that pulls bodies towards a center.\n", "parameters": ["${1:center}"]}, {"label": "createCoMTransformation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createCoMTransformation() \u2192 CoMTransformation\nCreate a frame of reference transformation that moves the origin to the center of mass of the system.\n", "parameters": []}, {"label": "createCombinedForce", "meta": "func", "title": "Auto-import from nbody", "description": "#### createCombinedForce(forces) \u2192 CombinedForce\nCreate a combined force that is an additive combination of all the given forces.\n", "parameters": ["${1:forces}"]}, {"label": "createExplicitEulerSim", "meta": "func", "title": "Auto-import from nbody", "description": "#### createExplicitEulerSim(force) \u2192 ExplicitEulerSim\nCreate an explicit euler integrator to be used as the simulation function.\n", "parameters": ["${1:force}"]}, {"label": "createForce", "meta": "func", "title": "Auto-import from nbody", "description": "#### createForce(fn) \u2192 Force\nCreate a force that applies to all bodies using the provided higher order/lambda/arrow/anonymous function.\n", "parameters": ["${1:fn}"]}, {"label": "createGravity", "meta": "func", "title": "Auto-import from nbody", "description": "#### createGravity(G) \u2192 Gravity\nCreate a force that applies to all bodies.\n", "parameters": ["${1:G}"]}, {"label": "createLambdaSim", "meta": "func", "title": "Auto-import from nbody", "description": "#### createLambdaSim(fn) \u2192 LambdaSim\nCreate a simulate function (usually a numerical integrator) that is used to simulate the nbody system using the provided higher order/lambda/arrow/anonymous function.\n", "parameters": ["${1:fn}"]}, {"label": "createLambdaTransformation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createLambdaTransformation(fn) \u2192 LambdaTransformation\nCreate a frame of reference transformation using a higher order/lambda/arrow/anonymous function.\n", "parameters": ["${1:fn}"]}, {"label": "createPinTransformation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createPinTransformation(axis, i) \u2192 PinTransformation\nCreate a frame of reference transformation that pins the ith body to a specific axis.\n", "parameters": ["${1:axis}", "${2:i}"]}, {"label": "createRotateTransformation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createRotateTransformation(axis, angle) \u2192 RotateTransformation\nCreate a frame of reference transformation that rotates the system around an axis by an angle.\n", "parameters": ["${1:axis}", "${2:angle}"]}, {"label": "createRungeKutta4Sim", "meta": "func", "title": "Auto-import from nbody", "description": "#### createRungeKutta4Sim(force, weights) \u2192 RungeKutta4Sim\nCreate a numerical integrator that uses the Runge-Kutta 4 method to simulate the nbody system.\n", "parameters": ["${1:force}", "${2:weights}"]}, {"label": "createSemiImplicitEulerSim", "meta": "func", "title": "Auto-import from nbody", "description": "#### createSemiImplicitEulerSim(force) \u2192 SemiImplicitEulerSim\nCreate a numerical integrator that uses the semi-implicit Euler method to simulate the nbody system.\n", "parameters": ["${1:force}"]}, {"label": "createSimulation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createSimulation(universes, visType, record, looped, showTrails, maxTrailLength) \u2192 Simulation\nCreate a new simulation.\n", "parameters": ["${1:universes}", "${2:visType}", "${3:record}", "${4:looped}", "${5:showTrails}", "${6:maxTrailLength}"]}, {"label": "createState", "meta": "func", "title": "Auto-import from nbody", "description": "#### createState(bodies) \u2192 State\nCreate a new state snapshot of the universe.\n", "parameters": ["${1:bodies}"]}, {"label": "createTimedRotateTransformation", "meta": "func", "title": "Auto-import from nbody", "description": "#### createTimedRotateTransformation(axis, revolutionTime) \u2192 TimedRotateTransformation\nCreate a frame of reference transformation that rotates the system by 360 deg around an axis over a period of time.\n", "parameters": ["${1:axis}", "${2:revolutionTime}"]}, {"label": "createUniverse", "meta": "func", "title": "Auto-import from nbody", "description": "#### createUniverse(label, color, prevState, currState, simFunc, transformations) \u2192 Universe\nCreate a new universe.\n", "parameters": ["${1:label}", "${2:color}", "${3:prevState}", "${4:currState}", "${5:simFunc}", "${6:transformations}"]}, {"label": "createVector", "meta": "func", "title": "Auto-import from nbody", "description": "#### createVector(x, y, z) \u2192 Vector3\nCreate a new 3D vector.\n", "parameters": ["${1:x}", "${2:y}", "${3:z}"]}, {"label": "createVelocityVerletSim", "meta": "func", "title": "Auto-import from nbody", "description": "#### createVelocityVerletSim(force) \u2192 VelocityVerletSim\nCreate a numerical integrator that uses the velocity Verlet method to simulate the nbody system.\n", "parameters": ["${1:force}"]}, {"label": "getBodies", "meta": "func", "title": "Auto-import from nbody", "description": "#### getBodies(state) \u2192 CelestialBody[]\nGet the bodies in a state.\n", "parameters": ["${1:state}"]}, {"label": "getX", "meta": "func", "title": "Auto-import from nbody", "description": "#### getX(v) \u2192 number\nGet the x component of a vector.\n", "parameters": ["${1:v}"]}, {"label": "getY", "meta": "func", "title": "Auto-import from nbody", "description": "#### getY(v) \u2192 number\nGet the y component of a vector.\n", "parameters": ["${1:v}"]}, {"label": "getZ", "meta": "func", "title": "Auto-import from nbody", "description": "#### getZ(v) \u2192 number\nGet the z component of a vector.\n", "parameters": ["${1:v}"]}, {"label": "multiplyScalar", "meta": "func", "title": "Auto-import from nbody", "description": "#### multiplyScalar(v, s) \u2192 Vector3\nMultiply a vector by a scalar.\n", "parameters": ["${1:v}", "${2:s}"]}, {"label": "playSim", "meta": "func", "title": "Auto-import from nbody", "description": "#### playSim(sim) \u2192 void\nPlay a simulation.\n", "parameters": ["${1:sim}"]}, {"label": "recordSim", "meta": "func", "title": "Auto-import from nbody", "description": "#### recordSim(sim, recordFor, recordSpeed) \u2192 void\nRecord and play a simulation.\n", "parameters": ["${1:sim}", "${2:recordFor}", "${3:recordSpeed}"]}, {"label": "setX", "meta": "func", "title": "Auto-import from nbody", "description": "#### setX(v, x) \u2192 void\nSet the x component of a vector.\n", "parameters": ["${1:v}", "${2:x}"]}, {"label": "setY", "meta": "func", "title": "Auto-import from nbody", "description": "#### setY(v, y) \u2192 void\nSet the y component of a vector.\n", "parameters": ["${1:v}", "${2:y}"]}, {"label": "setZ", "meta": "func", "title": "Auto-import from nbody", "description": "#### setZ(v, z) \u2192 void\nSet the z component of a vector.\n", "parameters": ["${1:v}", "${2:z}"]}, {"label": "subVectors", "meta": "func", "title": "Auto-import from nbody", "description": "#### subVectors(v1, v2) \u2192 Vector3\nSubtract two vectors.\n", "parameters": ["${1:v1}", "${2:v2}"]}], "unittest": [{"label": "default", "meta": "const", "title": "Auto-import from unittest", "description": "#### default:Objecto description availabl"}]}